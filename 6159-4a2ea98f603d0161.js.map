{"version":3,"file":"static/chunks/6159-4a2ea98f603d0161.js","mappings":"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","sources":["webpack://_N_E/./components/InlineWarning/index.tsx","webpack://_N_E/./components/InstantDeal/FirstOrderDiscountSuggestion.tsx","webpack://_N_E/./components/InstantDeal/PromotionSelection.tsx","webpack://_N_E/./components/InstantDeal/utils.ts","webpack://_N_E/./components/NotificationCenter/NotificationItem.tsx","webpack://_N_E/./components/NotificationCenter/NotificationCenter.tsx","webpack://_N_E/./components/NotificationCenter/NotificationFilter.tsx","webpack://_N_E/./components/SearchBar/SearchResultItem.tsx","webpack://_N_E/./components/Skeleton/SearchResultSkeleton.tsx","webpack://_N_E/./components/SearchBar/SearchResult.tsx","webpack://_N_E/./components/SearchBar/useSearchBar.tsx","webpack://_N_E/./components/Skeleton/NotificationListSkeleton.tsx","webpack://_N_E/./hooks/campaign/campaign.gql.generated.tsx","webpack://_N_E/./hooks/cart/cart.gql.generated.tsx","webpack://_N_E/./hooks/cart/controller.tsx","webpack://_N_E/./hooks/category/category.gql.generated.tsx","webpack://_N_E/./hooks/category/controller.tsx","webpack://_N_E/./hooks/category/utils.ts","webpack://_N_E/./hooks/discount/discount.gql.generated.tsx","webpack://_N_E/./hooks/gift/gift.gql.generated.tsx","webpack://_N_E/./hooks/orderItem/orderItem.gql.generated.tsx","webpack://_N_E/./hooks/requirement/requirement.gql.generated.tsx","webpack://_N_E/./hooks/search/search.gql.generated.tsx","webpack://_N_E/./hooks/search/controller.tsx","webpack://_N_E/./icons/DotsVertical.tsx","webpack://_N_E/./icons/InclinedBell.tsx","webpack://_N_E/./components/CatergoryMenu/index.tsx","webpack://_N_E/./hooks/useWindowSize.ts","webpack://_N_E/./components/CatergoryMenu/utils.tsx","webpack://_N_E/./components/SearchBar/index.tsx","webpack://_N_E/./components/GlobalHeader/CategoryHeader.tsx","webpack://_N_E/./layouts/Header/index.tsx","webpack://_N_E/./layouts/HeaderChrismas/index.tsx","webpack://_N_E/./layouts/HeaderTet/index.tsx","webpack://_N_E/./components/GiftsBtnNavigation/index.tsx","webpack://_N_E/./utils/request.tsx","webpack://_N_E/./components/SaleAdminBanner/index.tsx","webpack://_N_E/./layouts/BasicLayout/BasicLayout.tsx","webpack://_N_E/./components/Mobile/BottomNavigator/index.tsx","webpack://_N_E/./layouts/BasicLayout/Mobile/index.tsx","webpack://_N_E/./layouts/BasicLayout/index.tsx","webpack://_N_E/./layouts/Header/Mobile/index.tsx","webpack://_N_E/./utils/giftCampaign.ts","webpack://_N_E/./utils/gtmUtils.ts","webpack://_N_E/./utils/mediaQuery.ts","webpack://_N_E/./utils/giftItem.ts","webpack://_N_E/./utils/orderItem.ts","webpack://_N_E/./utils/search.ts","webpack://_N_E/./utils/variant.ts","webpack://_N_E/./components/CatergoryMenu/index.module.less","webpack://_N_E/./components/GiftsBtnNavigation/index.module.less","webpack://_N_E/./components/GlobalHeader/Global.module.less","webpack://_N_E/./components/InlineWarning/index.module.less","webpack://_N_E/./components/InstantDeal/styles/FirstOrderDiscountSuggestion.module.less","webpack://_N_E/./components/InstantDeal/styles/PromotionSelection.module.less","webpack://_N_E/./components/Mobile/BottomNavigator/index.module.less","webpack://_N_E/./components/NotificationCenter/NotificationCenter.module.less","webpack://_N_E/./components/NotificationCenter/NotificationFilter.module.less","webpack://_N_E/./components/NotificationCenter/NotificationItem.module.less","webpack://_N_E/./components/SaleAdminBanner/index.module.less","webpack://_N_E/./components/SearchBar/SearchResult.module.less","webpack://_N_E/./components/SearchBar/index.module.less","webpack://_N_E/./components/Skeleton/NotificationListSkeleton.module.less","webpack://_N_E/./components/Skeleton/SearchResultSkeleton.module.less","webpack://_N_E/./layouts/BasicLayout/Mobile/index.module.less","webpack://_N_E/./layouts/BasicLayout/index.module.less","webpack://_N_E/./layouts/Header/Mobile/index.module.less","webpack://_N_E/./layouts/Header/index.module.less","webpack://_N_E/./layouts/HeaderChrismas/index.module.less","webpack://_N_E/./layouts/HeaderTet/index.module.less"],"sourcesContent":["import React from 'react';\nimport style from './index.module.less';\n\ntype InLineWarningProps = { text: string };\n\nexport default function InLineWarning({ text }: InLineWarningProps) {\n  return <div className={style.container}>{text}</div>;\n}\n","import React from 'react';\nimport { ThunderboltTwoTone } from '@ant-design/icons';\n\nimport { DiscountDetails } from '@hooks/variant';\nimport { Maybe } from '@graphql/types.generated';\nimport { toVNDShort } from '@utils/formatter';\n\nimport style from './styles/FirstOrderDiscountSuggestion.module.less';\n\ninterface FirstOrderDiscountSuggestion {\n  firstOrderDiscount: Maybe<DiscountDetails>;\n  currQuantity: number;\n}\n\nconst FirstOrderDiscountSuggestion = ({ firstOrderDiscount, currQuantity }: FirstOrderDiscountSuggestion) => {\n  if (!firstOrderDiscount) return null;\n\n  const { percent, flatAmount, requirements } = firstOrderDiscount;\n  const isAchieved = requirements.quantity_threshold <= currQuantity && requirements.max_quantity >= currQuantity;\n  const isMinMaxEqual = requirements.quantity_threshold === requirements.max_quantity;\n\n  return (\n    <div className={style.root}>\n      <p>\n        <span className={style.discountIcon}>\n          <ThunderboltTwoTone twoToneColor=\"#FEBA43\" />\n        </span>\n        <span className={isAchieved ? style.discountAchieved : style.discountNotAchieved}>\n          {isAchieved ? 'Đã đạt' : 'Chưa đạt'}\n        </span>\n        <span className={style.discountText}>\n          Mua {!isMinMaxEqual && 'từ '}\n          <span className={style.highlight}>\n            {requirements.quantity_threshold} {!isMinMaxEqual && `~ ${requirements.max_quantity}`} cái\n          </span>{' '}\n          để đạt chiết khấu\n          <span className={style.highlight}>{percent ? ` ${percent}% ` : ` ${toVNDShort(flatAmount || 0)} `}</span>\n          cho đơn hàng đầu tiên\n        </span>\n        <span className={style.note}> (không áp dụng cùng lúc với các chương trình quà tặng khác)</span>\n      </p>\n    </div>\n  );\n};\n\nexport default FirstOrderDiscountSuggestion;\n","import React from 'react';\nimport { Menu, Dropdown } from 'antd';\nimport router from 'next/router';\nimport Image from 'next/image';\nimport { Key } from 'antd/lib/table/interface';\nimport { DownOutlined } from '@ant-design/icons';\n\nimport { Campaigns } from '@hooks/giftCampaigns/controller';\nimport { toVNDShort } from '@utils/formatter';\nimport { ElementType } from '@utils/typeUtils';\nimport { calculateMultiplyBy } from './utils';\n\nimport style from './styles/PromotionSelection.module.less';\n\ninterface PromotionSelectionProps {\n  variantGiftCampaigns: Campaigns;\n  options?: {\n    forVariants?: boolean;\n    itemWholesalePrice?: number;\n    textOnly?: boolean;\n    isPromotionTextHidden?: boolean;\n  };\n  disabled?: boolean;\n}\n\ntype Target = {\n  amountToTarget: string;\n  multiplyBy: number;\n  promotionName: string;\n} | null;\n\n// This function is used to insert spaces to group of variants' name\n// to make it display properly, see this issue for more information:\n// https://github.com/nanocohub/xshop/issues/1944\nconst insertSpaceToPromotionName = (promotionName = ''): string => {\n  return promotionName.replace(/\\//g, ' / ');\n};\n\nconst sortPromotionsByRequirement = (promotions: Campaigns) => {\n  const promotionWithFirstRequirement = promotions.map(promo => {\n    return {\n      ...promo,\n      totalQuantityThreshold: promo.requirements[0].totalQuantityThreshold,\n      totalRevenueThreshold: promo.requirements[0].totalRevenueThreshold,\n      totalGiftConditionItemsQuantityThreshold: promo.requirements[0].totalGiftConditionItemsQuantityThreshold,\n    };\n  });\n\n  promotionWithFirstRequirement\n    .sort((promotionOne, promotionTwo) =>\n      Number(BigInt(promotionOne.totalRevenueThreshold || 0n) - BigInt(promotionTwo.totalRevenueThreshold || 0n)),\n    )\n    .sort(\n      (promotionOne, promotionTwo) =>\n        (promotionOne.totalQuantityThreshold || 0) - (promotionTwo.totalQuantityThreshold || 0),\n    )\n    .sort(\n      (promotionOne, promotionTwo) =>\n        (promotionOne.totalGiftConditionItemsQuantityThreshold || 0) -\n        (promotionTwo.totalGiftConditionItemsQuantityThreshold || 0),\n    );\n\n  return promotionWithFirstRequirement;\n};\n\nconst calculateAmountToTarget = (promotion: ElementType<Campaigns>) => {\n  const { totalQuantityThreshold, totalRevenueThreshold, totalGiftConditionItemsQuantityThreshold } =\n    promotion.requirements[0];\n\n  // When quantity of each condition item to buy is unknown\n  // Can buy 1A/2B/5C as long as total quantity is equal to totalQuantityThreshold\n  if (totalQuantityThreshold) {\n    const inProgressQuantity =\n      promotion?.progressData?.map(item => item.quantity).reduce((acc, val) => acc + val, 0) || 0;\n    const quantityToTarget = totalQuantityThreshold - (inProgressQuantity % totalQuantityThreshold);\n\n    return quantityToTarget.toString() + ' cái';\n  }\n\n  // When revenue of each condition item to buy is unknown\n  // Can buy 5tr A/2tr B/5tr C as long as total revenue is equal to totalRevenueThreshold\n  if (totalRevenueThreshold) {\n    const inProgressRevenue =\n      promotion?.progressData?.map(item => BigInt(item.revenue)).reduce((acc, val) => acc + val, 0n) || 0n;\n    const revenueToTarget = BigInt(totalRevenueThreshold) - (inProgressRevenue % BigInt(totalRevenueThreshold));\n\n    return toVNDShort(revenueToTarget);\n  }\n\n  // When quantity of each condition item to buy is known\n  // Have to buy exactly 1A/2B/5C\n  if (totalGiftConditionItemsQuantityThreshold && totalGiftConditionItemsQuantityThreshold !== 0) {\n    const inProgressQuantity =\n      promotion?.progressData?.map(item => item.quantity).reduce((acc, val) => acc + val, 0) || 0;\n    const quantityToTarget =\n      totalGiftConditionItemsQuantityThreshold - (inProgressQuantity % totalGiftConditionItemsQuantityThreshold);\n\n    return quantityToTarget.toString() + ' cái';\n  }\n\n  return '';\n};\n\nconst PromotionSelection = ({ variantGiftCampaigns = [], options = {}, disabled = false }: PromotionSelectionProps) => {\n  const promotions = variantGiftCampaigns.filter(campaign => !campaign.duplicatedFrom);\n  // Put promotion which has smaller required amount to top\n  const sortedPromotions = sortPromotionsByRequirement(promotions);\n\n  const targets: Target[] = [\n    // Using set to remove duplicated targets number for a promotion\n    ...new Set(\n      sortedPromotions.map(promotion => {\n        const amountToTarget = calculateAmountToTarget(promotion);\n        const multiplyBy = calculateMultiplyBy(promotion);\n        return {\n          amountToTarget: amountToTarget,\n          multiplyBy,\n          promotionName: promotion.campaignName,\n        };\n      }),\n    ),\n  ];\n  const theFirstTarget = targets[0];\n\n  const handleSelect = ({ key }: { key: Key }) => {\n    router.push(`/instantdeal?gift_campaign_id=${key}`);\n  };\n\n  const menu = (\n    <Menu onClick={handleSelect} className={style.menu}>\n      {sortedPromotions?.map(promotion => (\n        <Menu.Item key={promotion.id} className={style.menuItem}>\n          <div className={style.promotionItem}>\n            {calculateMultiplyBy(promotion) >= 1 ? (\n              <p>\n                <span className={style.promotionItemAchieved}>Đã đạt ({calculateMultiplyBy(promotion)} lần)</span>\n                {'  '}\n                <span className={style.promotionItemSuggested}>\n                  Mua thêm {calculateAmountToTarget(promotion)} để đạt {calculateMultiplyBy(promotion) + 1} lần\n                </span>\n              </p>\n            ) : (\n              <p>\n                <span className={style.promotionItemNotAchieved}>Chưa đạt</span>\n                {'  '}\n                <span className={style.promotionItemSuggested}>\n                  Mua thêm {calculateAmountToTarget(promotion)} để đạt\n                </span>\n              </p>\n            )}\n            <p>{promotion.campaignName}</p>\n          </div>\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  if (promotions?.length === 0) return null;\n\n  return (\n    <div className={style.root}>\n      {!options?.isPromotionTextHidden && (\n        <div className={disabled ? style.disabledText : style.promotionText}>\n          <Image className={style.fireIcon} src=\"/images/fire.svg\" alt=\"fire icon\" width={13} height={14} />\n          &nbsp; Mua thêm <span className={style.highlight}>{theFirstTarget?.amountToTarget}</span> để đạt{' '}\n          <span className={style.highlight}>{theFirstTarget ? theFirstTarget?.multiplyBy + 1 : ''} lần</span> quà tặng -\n          Chương trình <span>{insertSpaceToPromotionName(theFirstTarget?.promotionName)}</span>\n        </div>\n      )}\n      {!options.textOnly && (\n        <Dropdown overlay={menu} trigger={['click']} placement=\"bottomCenter\" disabled={disabled}>\n          <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n            <div className={disabled ? style.disabledSeeMore : style.seeMore}>\n              Xem thêm&nbsp;\n              <DownOutlined />\n            </div>\n          </a>\n        </Dropdown>\n      )}\n    </div>\n  );\n};\n\nexport default PromotionSelection;\n","import { Campaigns } from '@hooks/giftCampaigns/controller';\nimport { ParsedUrlQuery } from '@interfaces/index';\nimport { ElementType } from '@utils/typeUtils';\n\nexport function buildParamsByQuery(query: ParsedUrlQuery = {}) {\n  return Object.keys(query).reduce((acc: ParsedUrlQuery, key) => {\n    const queryValue = query[key];\n    const param: ParsedUrlQuery = {};\n    if (key === 'q') param[key] = queryValue;\n    else param[key] = Array.isArray(queryValue) ? queryValue : queryValue.split(',');\n    return { ...acc, ...param };\n  }, {});\n}\n\nexport const calculateMultiplyBy = (promotion: ElementType<Campaigns>): number => {\n  const multiplyBy = promotion.type === 'Type A' ? promotion.multiplyBy : promotion.multiplyByTypeB || 0;\n  return multiplyBy;\n};\n","import { Col, Row } from 'antd';\nimport React, { ReactNode } from 'react';\n\nimport style from './NotificationItem.module.less';\n\ninterface NotificationItemProps {\n  title: string;\n  content: string | ReactNode;\n  createdAt: string;\n  read: boolean;\n  icon?: React.ElementType;\n}\n\nconst NotificationItem = ({ icon: Icon = 'div', title, content, createdAt, read }: NotificationItemProps) => {\n  return (\n    <Row align=\"middle\" justify=\"center\">\n      <Col span={4}>\n        <Icon className={style.orderStatusIcon} />\n      </Col>\n      <Col span={18}>\n        <p className={style.title}>{title}</p>\n        <section className={style.content}>{content}</section>\n        <p className={style.datetime}>{createdAt}</p>\n      </Col>\n      <Col span={2}>{!read && <div className={style.dot} />}</Col>\n    </Row>\n  );\n};\n\nexport default NotificationItem;\n","import React, { memo } from 'react';\nimport { Badge, Button, Dropdown, Empty, Menu, message } from 'antd';\nimport { BellOutlined, CheckOutlined } from '@ant-design/icons';\nimport router from 'next/router';\nimport dayjs from 'dayjs';\n\nimport useNotification from './useNotification';\n\nimport NotificationFilter from './NotificationFilter';\nimport NotificationItem from './NotificationItem';\nimport InclinedBell from '@icons/InclinedBell';\nimport NotificationListSkeleton from '@components/Skeleton/NotificationListSkeleton';\n\nimport style from './NotificationCenter.module.less';\n\ninterface NotificationCenterProps {\n  isMobile?: boolean;\n}\n\nconst NotificationCenter = ({ isMobile = false }: NotificationCenterProps) => {\n  const {\n    filterValue,\n    handleFilterChange,\n    unreadNotificationsCount,\n    userNotifications,\n    isLoading,\n    isError,\n    handleSeeDetails,\n    handleMarkAllNotificationsAsRead,\n  } = useNotification();\n\n  const isNotificationEmpty = userNotifications.length === 0;\n  const userNotificationsContent = userNotifications.slice(0, 5).map(notification => (\n    <Menu.Item\n      key={notification.id}\n      className={notification.read ? '' : style.unread}\n      onClick={() => handleSeeDetails(notification)}\n    >\n      <NotificationItem\n        icon={notification.icon as React.ElementType}\n        title={notification.title || ''}\n        content={notification.content}\n        createdAt={dayjs(notification.createdAt).format('DD/MM/YYYY - HH:mm')}\n        read={notification.read}\n      />\n    </Menu.Item>\n  ));\n\n  const renderNotifications = () => {\n    if (isLoading) return <NotificationListSkeleton />;\n    if (isNotificationEmpty) return <Empty description=\"Bạn không có thông báo nào\" image={<InclinedBell />} />;\n    return userNotificationsContent;\n  };\n\n  const handleSeeAllNotifications = () => {\n    router.push('/account/notifications');\n  };\n\n  const notificationsOverlay = (\n    <Menu>\n      <Menu.Item key=\"header\">\n        <div className={style.header}>\n          <p className={style.title}>Thông Báo Mới</p>\n          <Button type=\"text\" onClick={handleMarkAllNotificationsAsRead}>\n            <CheckOutlined /> Đánh dấu tất cả đã đọc\n          </Button>\n        </div>\n      </Menu.Item>\n      <NotificationFilter filterValue={filterValue} onFilterChange={handleFilterChange} />\n      {renderNotifications()}\n      <Menu.Item key=\"action\" onClick={handleSeeAllNotifications}>\n        <div className={style.seeAll}>{!isNotificationEmpty && <Button type=\"text\">Xem tất cả</Button>}</div>\n      </Menu.Item>\n    </Menu>\n  );\n\n  if (isError) {\n    message.error('Đã có lỗi xảy ra, vui lòng thử lại sau!');\n    return null;\n  }\n\n  if (isMobile)\n    return (\n      <div onClick={() => router.push('/account/notifications')}>\n        <Badge count={unreadNotificationsCount} size=\"small\">\n          <BellOutlined className={style.bellIcon} />\n        </Badge>\n      </div>\n    );\n\n  return (\n    <div className={style.root}>\n      <Dropdown\n        overlay={notificationsOverlay}\n        trigger={['click']}\n        overlayClassName={style.overlay}\n        placement=\"bottomRight\"\n      >\n        <Badge count={unreadNotificationsCount} offset={[-5, 5]}>\n          <BellOutlined className={style.bellIcon} />\n        </Badge>\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default memo(NotificationCenter);\n","import React from 'react';\nimport { Radio, RadioChangeEvent } from 'antd';\n\nimport style from './NotificationFilter.module.less';\n\ninterface NotificationFilterProps {\n  filterValue: string;\n  onFilterChange: (e: RadioChangeEvent) => void;\n}\n\nconst NotificationFilter = ({ filterValue, onFilterChange }: NotificationFilterProps) => {\n  return (\n    <div className={style.root}>\n      <Radio.Group buttonStyle=\"solid\" value={filterValue} onChange={onFilterChange}>\n        <Radio.Button className={style.filterBtn} value=\"all\">\n          Tất cả\n        </Radio.Button>\n        <Radio.Button className={style.filterBtn} value=\"unread\">\n          Chưa đọc\n        </Radio.Button>\n      </Radio.Group>\n    </div>\n  );\n};\n\nexport default NotificationFilter;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Image from 'next/image';\n\nimport PromotionSelection from '@components/InstantDeal/PromotionSelection';\nimport FirstOrderDiscountSuggestion from '@components/InstantDeal/FirstOrderDiscountSuggestion';\nimport InlineWarning from '@components/InlineWarning';\nimport { toVNDShort } from '@utils/formatter';\nimport { getVariantCampaignsFromCampaigns } from '@utils/giftCampaign';\nimport { getCurrPage } from '@utils/search';\nimport { useAuth } from '@context/AuthContext';\nimport { DiscountDetails } from '@hooks/variant';\nimport { useSearchConversionMutation } from '@hooks/search';\nimport { useCampaigns } from '@hooks/giftCampaigns/controller';\n\nimport { SearchResultProps, Variant } from './SearchResult';\n\nimport s from './SearchResult.module.less';\n\nconst dummyImage = 'https://dummyimage.com/46x46/e1e1e1/fff';\n\ntype SearchResultItemProps = {\n  variant: Variant;\n  inCartQuantity?: number;\n  options?: SearchResultProps['options'];\n  searchId?: string;\n};\n\nconst SearchResultItem = ({ variant, inCartQuantity = 0, options, searchId }: SearchResultItemProps) => {\n  const { isLoggedIn } = useAuth();\n  const { campaigns } = useCampaigns();\n  const { pathname } = useRouter();\n  const [searchConvert] = useSearchConversionMutation();\n\n  const variantCampaignIds = variant?.campaignIds || [];\n  const variantGiftCampaigns = getVariantCampaignsFromCampaigns(campaigns || [], variantCampaignIds);\n  const hasFirstOrderDiscount = variant && !!variant.firstOrderDiscount;\n\n  function handleClickResult() {\n    variant?.id &&\n      searchId &&\n      searchConvert({\n        variables: {\n          convertableType: 'Variant',\n          convertableId: variant.id,\n          searchId,\n          source: getCurrPage(pathname),\n        },\n      });\n  }\n\n  return (\n    <Link\n      href={\n        options?.linkItemToSearchList\n          ? `/instantdeal?q=${options?.searchTerm}&variantId=${variant?.id}`\n          : `/products/${variant?.product.id}?optionValueIds=${variant?.optionValues\n              .map(option => option.id)\n              .join('-')}`\n      }\n      key={variant?.id}\n      passHref\n    >\n      <a onClick={handleClickResult}>\n        <div className={s.resultItemWrapper}>\n          <div className={s.resultItem}>\n            <div className={s.image}>\n              <Image src={variant?.imageUrls[0] || variant?.defaultImageUrl || dummyImage} width={46} height={46} />\n            </div>\n            <div className={s.resultItemInfo}>\n              <span className={s.resultItemName}>\n                {variant?.name || ''} - {variant?.product.brand?.name}\n              </span>\n              {!variant?.available && <InlineWarning text=\"Sản phẩm ngừng kinh doanh\" />}\n              <p className={s.resultItemAdditionalInfo}>\n                Thương hiệu: {variant?.product.brand?.name} | Mã hàng:{' '}\n                <span className={s.materialNumber}>{variant?.materialNumber}</span> | Giá đại lý:{' '}\n                {toVNDShort(Number(variant?.vatWholesalePrice))}\n              </p>\n              {options?.isWithPromotions &&\n                (hasFirstOrderDiscount ? (\n                  <FirstOrderDiscountSuggestion\n                    firstOrderDiscount={variant?.firstOrderDiscount as DiscountDetails}\n                    currQuantity={inCartQuantity}\n                  />\n                ) : (\n                  <PromotionSelection variantGiftCampaigns={variantGiftCampaigns} options={{ textOnly: true }} />\n                ))}\n            </div>\n          </div>\n          {isLoggedIn && !options?.noAddToCart && (\n            <Button icon={<PlusOutlined />} type=\"text\" className={s.btnAddCart}>\n              Thêm\n            </Button>\n          )}\n        </div>\n      </a>\n    </Link>\n  );\n};\n\nexport default SearchResultItem;\n","import React from 'react';\nimport { Skeleton } from 'antd';\n\nimport s from './SearchResultSkeleton.module.less';\n\nconst SearchResultItemSkeleton = () => {\n  return (\n    <div className={s.item}>\n      <div className={s.imageContainer}>\n        <Skeleton.Image className={s.image} />\n      </div>\n      <div className={s.infoContainer}>\n        <Skeleton active paragraph={{ rows: 1 }} />\n      </div>\n      <div className={s.actionContainer}>\n        <Skeleton.Button size=\"small\" />\n      </div>\n    </div>\n  );\n};\n\nconst SearchResultSkeleton = () => {\n  const searchResultsSkeleton = new Array(5).fill(0).map((_, idx) => <SearchResultItemSkeleton key={idx} />);\n  return <div className={s.root}>{searchResultsSkeleton}</div>;\n};\n\nexport default SearchResultSkeleton;\n","import React, { Fragment, useEffect, memo } from 'react';\nimport { Empty, Divider } from 'antd';\nimport cn from 'classnames';\n\nimport { GetVariantSearchQuery } from '@hooks/search';\nimport { useCampaigns } from '@hooks/giftCampaigns/controller';\nimport { ElementType } from '@utils/typeUtils';\nimport { toBottomUnavailVariants } from '@utils/variant';\nimport { getUniqueCampaignIdsFromVariants } from '@utils/giftCampaign';\n\nimport SearchResultItem from './SearchResultItem';\nimport SearchResultSkeleton from '@components/Skeleton/SearchResultSkeleton';\n\nimport s from './SearchResult.module.less';\n\nexport type Variants = Exclude<GetVariantSearchQuery['variantSearch']['results']['nodes'], null | undefined>;\ntype OrderItemsWithQuantity = Array<{\n  variant: {\n    id: string;\n  };\n  quantity: number;\n  orderItemId: string;\n  vatWholesalePrice: number;\n}>;\nexport type Variant = ElementType<Variants>;\n\nexport type SearchResultProps = {\n  variants: Variants;\n  loading?: boolean;\n  orderItemsWithQuantity?: OrderItemsWithQuantity;\n  searchId?: string;\n  options?: {\n    noAddToCart: boolean;\n    linkItemToSearchList: boolean;\n    searchTerm: string;\n    setShowResult: React.Dispatch<React.SetStateAction<boolean>>;\n    isWithPromotions: boolean;\n    isWithWholesalePrice: boolean;\n  };\n  className?: string;\n};\n\nconst SearchResult = memo(\n  ({ variants, loading, orderItemsWithQuantity, options, searchId, className }: SearchResultProps) => {\n    const { setCampaignIds } = useCampaigns();\n\n    const campaignIds = getUniqueCampaignIdsFromVariants(variants) as string[];\n    const searchResults = toBottomUnavailVariants(variants).map((variant, index, array) => {\n      const inCartQuantity = (orderItemsWithQuantity || []).find(item => variant?.id === item?.variant?.id)?.quantity;\n      return (\n        <Fragment key={variant?.id}>\n          <SearchResultItem variant={variant} options={options} inCartQuantity={inCartQuantity} searchId={searchId} />\n          {index < array.length - 1 && <Divider className={s.divider} />}\n        </Fragment>\n      );\n    });\n\n    useEffect(() => {\n      setCampaignIds?.(campaignIds);\n    }, [campaignIds]);\n\n    return (\n      <div className={cn(s.root, className)} onClick={() => options?.setShowResult(false)}>\n        <div className={s.resultWrapper}>\n          {loading ? (\n            <SearchResultSkeleton />\n          ) : !variants?.length ? (\n            <Empty description=\"Không tìm thấy sản phẩm. Xin vui lòng thử lại với từ khóa khác\" className={s.empty} />\n          ) : (\n            searchResults\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nexport default SearchResult;\n","import React, { useEffect, useCallback, useRef, useState } from 'react';\nimport { Input, message } from 'antd';\nimport { useRouter } from 'next/router';\nimport debounce from 'lodash/debounce';\nimport { ITEM_PER_PAGE } from '@utils/constants';\n\nimport { useGetVariantSearchLazyQuery } from '@hooks/search';\nimport { fireSearchEvent } from '@utils/gtmUtils';\nimport { getCurrPage } from '@utils/search';\n\nconst useSearchBar = () => {\n  const [fetchVariantSearch, { loading, data }] = useGetVariantSearchLazyQuery();\n\n  const router = useRouter();\n  const query = (router.query?.q || '') as string;\n  const [showResult, setShowResult] = useState(false);\n  const [value, setValue] = useState(query);\n\n  const searchRef = useRef<Input>(null);\n\n  useEffect(() => {\n    // sync query with value of search bar\n    if (query !== value) setValue(query);\n  }, [query]);\n\n  const searchDebounced = useCallback(\n    debounce((newQuery: string): void => {\n      try {\n        fetchVariantSearch({\n          variables: {\n            query: newQuery,\n            first: ITEM_PER_PAGE,\n            source: getCurrPage(router.pathname),\n          },\n        });\n      } catch (error) {\n        message.error(error.message);\n      }\n\n      // Handle GA - Tracking search\n      fireSearchEvent(newQuery, 'Header');\n    }, 500),\n    [],\n  );\n\n  const handleFocus = useCallback(() => {\n    setShowResult(true);\n  }, []);\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (!showResult) setShowResult(true);\n      const value = e.target.value;\n      setValue(value);\n      searchDebounced(value);\n    },\n    [showResult],\n  );\n\n  const handleSearch = useCallback(\n    (text: string) => {\n      setValue(value);\n      setShowResult(false);\n      searchRef.current?.blur?.();\n      router.push(`/search?q=${text}`);\n    },\n    [value],\n  );\n\n  return {\n    searchRef,\n    showResult,\n    value,\n    loading,\n    data,\n    setShowResult,\n    handleFocus,\n    handleChange,\n    handleSearch,\n  };\n};\n\nexport default useSearchBar;\n","import { Skeleton } from 'antd';\nimport React from 'react';\n\nimport style from './NotificationListSkeleton.module.less';\n\ninterface NotificationListSkeletonProps {\n  titleLength?: number;\n  contentLength?: number;\n}\n\nconst NotificationListSkeleton = ({ titleLength = 200, contentLength = 270 }: NotificationListSkeletonProps) => {\n  const notifications = new Array(5).fill(0).map((_, idx) => (\n    <div className={style.notification} key={idx}>\n      <Skeleton.Avatar active size=\"large\" shape=\"circle\" />\n      <Skeleton paragraph={{ rows: 1, width: [contentLength] }} title={{ width: titleLength }} />\n    </div>\n  ));\n\n  return <div className={style.root}>{notifications}</div>;\n};\n\nexport default NotificationListSkeleton;\n","import * as Types from '../../graphql/types.generated';\n\nimport { GiftFragment } from '../gift/gift.gql.generated';\nimport { gql } from '@apollo/client';\nimport { GiftFragmentDoc } from '../gift/gift.gql.generated';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type SelectedGiftsFragment = (\n  Pick<Types.SelectedGift, 'id' | 'status' | 'orderId' | 'multiplyBy' | 'giftBillingOption'>\n  & { giftSelection: (\n    Pick<Types.GiftSelection, 'id'>\n    & { giftSelectionItemGroups: Array<(\n      Pick<Types.GiftSelectionItemGroup, 'quantity' | 'groupId'>\n      & { giftSelectionItems: Array<(\n        Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n        & { variant: (\n          Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n          & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n        ) }\n      )> }\n    )> }\n  ), selectedGiftItems: Array<(\n    Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n    & { giftSelectionItem: (\n      Pick<Types.GiftSelectionItem, 'id' | 'quantity' | 'groupId'>\n      & { variant: (\n        Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n        & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n      ) }\n    ) }\n  )> }\n);\n\nexport type ProgressDataFragment = Pick<Types.GiftCampaignProgressItem, 'id' | 'name' | 'quantity' | 'revenue' | 'materialNumber'>;\n\nexport type CartGiftCampaignsQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.Scalars['Boolean']>;\n}>;\n\n\nexport type CartGiftCampaignsQuery = { cartGiftCampaigns: Array<(\n    Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'fromDate' | 'toDate' | 'multiplyBy' | 'canCheckOutRewards' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'totalRewardsInCart' | 'noncombinable' | 'importableSameOrder'>\n    & { selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>> }\n  )> };\n\nexport type WarehouseTypeBCampaignsQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.Scalars['Boolean']>;\n}>;\n\n\nexport type WarehouseTypeBCampaignsQuery = { warehouseTypeBCampaigns: Array<Pick<Types.GiftCampaign, 'id' | 'campaignName' | 'noncombinable' | 'noncombinableParentId'>> };\n\nexport type CampaignDetailsByOrderQueryVariables = Types.Exact<{\n  campaignId: Types.Scalars['ID'];\n  orderId: Types.Scalars['ID'];\n}>;\n\n\nexport type CampaignDetailsByOrderQuery = { campaignDetailsByOrder: (\n    Pick<Types.GiftCampaign, 'id' | 'applied' | 'campaignName' | 'fromDate' | 'type' | 'toDate' | 'multiplyBy' | 'canCheckOutRewards' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'totalRewardsInCart'>\n    & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, gifts: Array<GiftFragment> }\n  ) };\n\nexport const SelectedGiftsFragmentDoc = gql`\n    fragment selectedGifts on SelectedGift {\n  id\n  status\n  orderId\n  multiplyBy\n  giftSelection {\n    id\n    giftSelectionItemGroups {\n      quantity\n      groupId\n      giftSelectionItems {\n        id\n        quantity\n        variant {\n          name\n          id\n          netPrice\n          materialNumber\n          vatWholesalePrice\n          optionValues {\n            id\n            value\n          }\n        }\n      }\n    }\n  }\n  selectedGiftItems {\n    giftSelectionItem {\n      id\n      quantity\n      groupId\n      variant {\n        name\n        id\n        netPrice\n        materialNumber\n        vatWholesalePrice\n        optionValues {\n          id\n          value\n        }\n      }\n    }\n    quantity\n    id\n  }\n  giftBillingOption\n}\n    `;\nexport const ProgressDataFragmentDoc = gql`\n    fragment progressData on GiftCampaignProgressItem {\n  id\n  name\n  quantity\n  revenue\n  materialNumber\n}\n    `;\nexport const CartGiftCampaignsDocument = gql`\n    query CartGiftCampaigns($filter: Boolean) {\n  cartGiftCampaigns(filter: $filter) {\n    id\n    applied\n    type\n    campaignName\n    fromDate\n    toDate\n    multiplyBy\n    canCheckOutRewards\n    remainingRewardTimes\n    remainingRewardTimesInCart\n    totalRewardsInCart\n    noncombinable\n    importableSameOrder\n    selectedGiftsInCart {\n      ...selectedGifts\n    }\n    selectedGifts {\n      ...selectedGifts\n    }\n  }\n}\n    ${SelectedGiftsFragmentDoc}`;\n\n/**\n * __useCartGiftCampaignsQuery__\n *\n * To run a query within a React component, call `useCartGiftCampaignsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCartGiftCampaignsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCartGiftCampaignsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useCartGiftCampaignsQuery(baseOptions?: Apollo.QueryHookOptions<CartGiftCampaignsQuery, CartGiftCampaignsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CartGiftCampaignsQuery, CartGiftCampaignsQueryVariables>(CartGiftCampaignsDocument, options);\n      }\nexport function useCartGiftCampaignsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CartGiftCampaignsQuery, CartGiftCampaignsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CartGiftCampaignsQuery, CartGiftCampaignsQueryVariables>(CartGiftCampaignsDocument, options);\n        }\nexport type CartGiftCampaignsQueryHookResult = ReturnType<typeof useCartGiftCampaignsQuery>;\nexport type CartGiftCampaignsLazyQueryHookResult = ReturnType<typeof useCartGiftCampaignsLazyQuery>;\nexport type CartGiftCampaignsQueryResult = Apollo.QueryResult<CartGiftCampaignsQuery, CartGiftCampaignsQueryVariables>;\nexport const WarehouseTypeBCampaignsDocument = gql`\n    query WarehouseTypeBCampaigns($filter: Boolean) {\n  warehouseTypeBCampaigns(filter: $filter) {\n    id\n    campaignName\n    noncombinable\n    noncombinableParentId\n  }\n}\n    `;\n\n/**\n * __useWarehouseTypeBCampaignsQuery__\n *\n * To run a query within a React component, call `useWarehouseTypeBCampaignsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWarehouseTypeBCampaignsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWarehouseTypeBCampaignsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useWarehouseTypeBCampaignsQuery(baseOptions?: Apollo.QueryHookOptions<WarehouseTypeBCampaignsQuery, WarehouseTypeBCampaignsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<WarehouseTypeBCampaignsQuery, WarehouseTypeBCampaignsQueryVariables>(WarehouseTypeBCampaignsDocument, options);\n      }\nexport function useWarehouseTypeBCampaignsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WarehouseTypeBCampaignsQuery, WarehouseTypeBCampaignsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<WarehouseTypeBCampaignsQuery, WarehouseTypeBCampaignsQueryVariables>(WarehouseTypeBCampaignsDocument, options);\n        }\nexport type WarehouseTypeBCampaignsQueryHookResult = ReturnType<typeof useWarehouseTypeBCampaignsQuery>;\nexport type WarehouseTypeBCampaignsLazyQueryHookResult = ReturnType<typeof useWarehouseTypeBCampaignsLazyQuery>;\nexport type WarehouseTypeBCampaignsQueryResult = Apollo.QueryResult<WarehouseTypeBCampaignsQuery, WarehouseTypeBCampaignsQueryVariables>;\nexport const CampaignDetailsByOrderDocument = gql`\n    query CampaignDetailsByOrder($campaignId: ID!, $orderId: ID!) {\n  campaignDetailsByOrder(campaignId: $campaignId, orderId: $orderId) {\n    id\n    applied\n    campaignName\n    fromDate\n    type\n    toDate\n    multiplyBy\n    canCheckOutRewards\n    remainingRewardTimes\n    remainingRewardTimesInCart\n    totalRewardsInCart\n    selectedGifts {\n      ...selectedGifts\n    }\n    selectedGiftsInCart {\n      ...selectedGifts\n    }\n    gifts {\n      ...gift\n    }\n  }\n}\n    ${SelectedGiftsFragmentDoc}\n${GiftFragmentDoc}`;\n\n/**\n * __useCampaignDetailsByOrderQuery__\n *\n * To run a query within a React component, call `useCampaignDetailsByOrderQuery` and pass it any options that fit your needs.\n * When your component renders, `useCampaignDetailsByOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCampaignDetailsByOrderQuery({\n *   variables: {\n *      campaignId: // value for 'campaignId'\n *      orderId: // value for 'orderId'\n *   },\n * });\n */\nexport function useCampaignDetailsByOrderQuery(baseOptions: Apollo.QueryHookOptions<CampaignDetailsByOrderQuery, CampaignDetailsByOrderQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CampaignDetailsByOrderQuery, CampaignDetailsByOrderQueryVariables>(CampaignDetailsByOrderDocument, options);\n      }\nexport function useCampaignDetailsByOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CampaignDetailsByOrderQuery, CampaignDetailsByOrderQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CampaignDetailsByOrderQuery, CampaignDetailsByOrderQueryVariables>(CampaignDetailsByOrderDocument, options);\n        }\nexport type CampaignDetailsByOrderQueryHookResult = ReturnType<typeof useCampaignDetailsByOrderQuery>;\nexport type CampaignDetailsByOrderLazyQueryHookResult = ReturnType<typeof useCampaignDetailsByOrderLazyQuery>;\nexport type CampaignDetailsByOrderQueryResult = Apollo.QueryResult<CampaignDetailsByOrderQuery, CampaignDetailsByOrderQueryVariables>;","import * as Types from '../../graphql/types.generated';\n\nimport { DiscountFragment } from '../discount/discount.gql.generated';\nimport { gql } from '@apollo/client';\nimport { DiscountFragmentDoc } from '../discount/discount.gql.generated';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type GetCartQueryVariables = Types.Exact<{\n  first?: Types.Maybe<Types.Scalars['Int']>;\n  after?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type GetCartQuery = { cart: (\n    Pick<Types.Order, 'id' | 'status' | 'total'>\n    & { orderItems?: Types.Maybe<(\n      Pick<Types.OrderItemConnection, 'totalCount'>\n      & { nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.OrderItem, 'id' | 'price' | 'quantity' | 'updatedAt' | 'createdAt' | 'vatWholesalePrice' | 'vat' | 'totalPriceBeforeVat' | 'totalPrice' | 'firstGiftCampaignId' | 'firstLevelableCampaignId' | 'firstNoncombinableCampaignId' | 'anyImportableSameOrder' | 'ownCampaignTypeA' | 'hasAllGiftsSelected'>\n        & { userUpdater?: Types.Maybe<Pick<Types.User, 'id' | 'name' | 'phoneNumber' | 'email'>>, variant: (\n          Pick<Types.Variant, 'name' | 'id' | 'available' | 'netPrice' | 'vatPrice' | 'campaignIds' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'volume'>\n          & { discounts: Array<DiscountFragment>, product: Pick<Types.Product, 'id'>, volumeUnit: Pick<Types.Unit, 'code'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n        ), discounts: Array<DiscountFragment> }\n      )>>>, pageInfo: Pick<Types.PageInfo, 'hasNextPage' | 'endCursor'> }\n    )> }\n  ) };\n\nexport type UpdateCartMutationVariables = Types.Exact<{\n  input: Types.UpdateCartInput;\n  first?: Types.Maybe<Types.Scalars['Int']>;\n  after?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type UpdateCartMutation = { updateCart?: Types.Maybe<(\n    Pick<Types.Order, 'id' | 'status' | 'total'>\n    & { orderItems?: Types.Maybe<(\n      Pick<Types.OrderItemConnection, 'totalCount'>\n      & { nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.OrderItem, 'id' | 'price' | 'quantity' | 'updatedAt' | 'createdAt' | 'vatWholesalePrice' | 'vat' | 'totalPriceBeforeVat' | 'totalPrice' | 'firstGiftCampaignId' | 'firstLevelableCampaignId' | 'firstNoncombinableCampaignId' | 'anyImportableSameOrder' | 'ownCampaignTypeA' | 'hasAllGiftsSelected'>\n        & { userUpdater?: Types.Maybe<Pick<Types.User, 'id' | 'name' | 'phoneNumber' | 'email'>>, variant: (\n          Pick<Types.Variant, 'name' | 'id' | 'available' | 'netPrice' | 'vatPrice' | 'campaignIds' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'volume'>\n          & { discounts: Array<DiscountFragment>, product: Pick<Types.Product, 'id'>, volumeUnit: Pick<Types.Unit, 'code'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n        ), discounts: Array<DiscountFragment> }\n      )>>>, pageInfo: Pick<Types.PageInfo, 'hasNextPage' | 'endCursor'> }\n    )> }\n  )> };\n\nexport type GiftCampaignsFragment = (\n  Pick<Types.GiftCampaign, 'id' | 'type' | 'applied' | 'campaignName' | 'description' | 'fromDate' | 'multiplyBy' | 'remainingRewardTimes' | 'toDate' | 'level'>\n  & { selectedGifts?: Types.Maybe<Array<(\n    Pick<Types.SelectedGift, 'id' | 'orderId' | 'multiplyBy' | 'totalValue'>\n    & { giftSelection: (\n      Pick<Types.GiftSelection, 'id'>\n      & { giftSelectionItemGroups: Array<(\n        Pick<Types.GiftSelectionItemGroup, 'quantity'>\n        & { giftSelectionItems: Array<Pick<Types.GiftSelectionItem, 'id' | 'quantity'>> }\n      )> }\n    ), selectedGiftItems: Array<(\n      Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n      & { giftSelectionItem: Pick<Types.GiftSelectionItem, 'id' | 'quantity'> }\n    )> }\n  )>>, progressData?: Types.Maybe<Array<Pick<Types.GiftCampaignProgressItem, 'id' | 'materialNumber' | 'name' | 'quantity' | 'revenue'>>>, requirements: Array<(\n    Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>\n    & { giftConditionItems: Array<(\n      Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold'>\n      & { variant: Pick<Types.Variant, 'id' | 'name' | 'netPrice'> }\n    )> }\n  )>, gifts: Array<(\n    Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n    & { giftSelectionItemGroups: Array<(\n      Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n      & { giftSelectionItems: Array<(\n        Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n        & { variant: (\n          Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'netPrice' | 'volume'>\n          & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n        ) }\n      )> }\n    )> }\n  )> }\n);\n\nexport type OrderItemConnectFragment = (\n  Pick<Types.OrderItemConnection, 'totalCount'>\n  & { nodes?: Types.Maybe<Array<Types.Maybe<(\n    Pick<Types.OrderItem, 'id' | 'price' | 'quantity' | 'updatedAt' | 'createdAt' | 'vatWholesalePrice' | 'totalPrice' | 'firstGiftCampaignId' | 'firstLevelableCampaignId' | 'firstNoncombinableCampaignId'>\n    & { variant: (\n      Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'volume'>\n      & { discounts: Array<Pick<Types.DiscountDetails, 'id' | 'name' | 'percent' | 'type' | 'flatAmount' | 'applied' | 'adjustment' | 'fromDate' | 'toDate' | 'requirements'>>, product: Pick<Types.Product, 'id'>, volumeUnit: Pick<Types.Unit, 'code'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n    ), discounts: Array<Pick<Types.DiscountDetails, 'id' | 'name' | 'percent' | 'type' | 'flatAmount' | 'applied' | 'adjustment' | 'fromDate' | 'toDate' | 'requirements'>>, noncombinableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.NoncombinableGiftCampaign, 'groupId'>\n      & { giftCampaignGroups?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'multiplyBy' | 'remainingRewardTimes' | 'level'>\n        & { progressData?: Types.Maybe<Array<Pick<Types.GiftCampaignProgressItem, 'id' | 'name' | 'quantity' | 'revenue'>>>, selectedGifts?: Types.Maybe<Array<(\n          Pick<Types.SelectedGift, 'id' | 'orderId' | 'multiplyBy' | 'totalValue'>\n          & { giftSelection: (\n            Pick<Types.GiftSelection, 'id'>\n            & { giftSelectionItemGroups: Array<(\n              Pick<Types.GiftSelectionItemGroup, 'quantity'>\n              & { giftSelectionItems: Array<(\n                Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n                & { variant: (\n                  Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                  & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n                ) }\n              )> }\n            )> }\n          ), selectedGiftItems: Array<(\n            Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n            & { giftSelectionItem: (\n              Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n              & { variant: (\n                Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            ) }\n          )> }\n        )>>, requirements: Array<(\n          Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>\n          & { giftConditionItems: Array<(\n            Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold'>\n            & { variant: Pick<Types.Variant, 'id' | 'name' | 'netPrice'> }\n          )> }\n        )>, gifts: Array<(\n          Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n          & { giftSelectionItemGroups: Array<(\n            Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n            & { giftSelectionItems: Array<(\n              Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n              & { variant: (\n                Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'netPrice' | 'volume'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            )> }\n          )> }\n        )> }\n      )>> }\n    )>>, levelableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.LevelableGiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'multiplyBy' | 'level' | 'remainingRewardTimes'>\n      & { selectedGifts?: Types.Maybe<Array<(\n        Pick<Types.SelectedGift, 'id' | 'orderId' | 'multiplyBy' | 'totalValue'>\n        & { giftSelection: (\n          Pick<Types.GiftSelection, 'id'>\n          & { giftSelectionItemGroups: Array<(\n            Pick<Types.GiftSelectionItemGroup, 'quantity'>\n            & { giftSelectionItems: Array<(\n              Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n              & { variant: (\n                Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            )> }\n          )> }\n        ), selectedGiftItems: Array<(\n          Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n          & { giftSelectionItem: (\n            Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n            & { variant: (\n              Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n              & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          ) }\n        )> }\n      )>>, requirements: Array<(\n        Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>\n        & { giftConditionItems: Array<(\n          Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold'>\n          & { variant: Pick<Types.Variant, 'id' | 'name' | 'netPrice'> }\n        )> }\n      )>, gifts: Array<(\n        Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n        & { giftSelectionItemGroups: Array<(\n          Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n          & { giftSelectionItems: Array<(\n            Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n            & { variant: (\n              Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'netPrice' | 'volume'>\n              & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          )> }\n        )> }\n      )>, giftCampaignChildren?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'multiplyBy' | 'level' | 'remainingRewardTimes'>\n        & { selectedGifts?: Types.Maybe<Array<(\n          Pick<Types.SelectedGift, 'id' | 'orderId' | 'multiplyBy' | 'totalValue'>\n          & { giftSelection: (\n            Pick<Types.GiftSelection, 'id'>\n            & { giftSelectionItemGroups: Array<(\n              Pick<Types.GiftSelectionItemGroup, 'quantity'>\n              & { giftSelectionItems: Array<(\n                Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n                & { variant: (\n                  Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                  & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n                ) }\n              )> }\n            )> }\n          ), selectedGiftItems: Array<(\n            Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n            & { giftSelectionItem: (\n              Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n              & { variant: (\n                Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            ) }\n          )> }\n        )>>, requirements: Array<(\n          Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>\n          & { giftConditionItems: Array<(\n            Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold'>\n            & { variant: Pick<Types.Variant, 'id' | 'name' | 'netPrice'> }\n          )> }\n        )>, gifts: Array<(\n          Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n          & { giftSelectionItemGroups: Array<(\n            Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n            & { giftSelectionItems: Array<(\n              Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n              & { variant: (\n                Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'netPrice' | 'volume'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            )> }\n          )> }\n        )> }\n      )>> }\n    )>>, giftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.GiftCampaign, 'id' | 'type' | 'applied' | 'campaignName' | 'description' | 'fromDate' | 'multiplyBy' | 'conditionCount' | 'remainingRewardTimes' | 'toDate' | 'level'>\n      & { selectedGifts?: Types.Maybe<Array<(\n        Pick<Types.SelectedGift, 'id' | 'orderId' | 'multiplyBy' | 'totalValue'>\n        & { giftSelection: (\n          Pick<Types.GiftSelection, 'id'>\n          & { giftSelectionItemGroups: Array<(\n            Pick<Types.GiftSelectionItemGroup, 'quantity'>\n            & { giftSelectionItems: Array<(\n              Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n              & { variant: Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'> }\n            )> }\n          )> }\n        ), selectedGiftItems: Array<(\n          Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n          & { giftSelectionItem: (\n            Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n            & { variant: (\n              Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n              & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          ) }\n        )> }\n      )>>, progressData?: Types.Maybe<Array<Pick<Types.GiftCampaignProgressItem, 'id' | 'materialNumber' | 'name' | 'quantity' | 'revenue'>>>, requirements: Array<(\n        Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>\n        & { giftConditionItems: Array<(\n          Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold'>\n          & { variant: Pick<Types.Variant, 'id' | 'name' | 'netPrice'> }\n        )> }\n      )>, gifts: Array<(\n        Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n        & { giftSelectionItemGroups: Array<(\n          Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n          & { giftSelectionItems: Array<(\n            Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n            & { variant: (\n              Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'netPrice' | 'volume'>\n              & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          )> }\n        )> }\n      )> }\n    )>> }\n  )>>>, pageInfo: Pick<Types.PageInfo, 'hasNextPage' | 'endCursor'> }\n);\n\nexport type GetOrderItemsWithQuantityQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrderItemsWithQuantityQuery = { cart: (\n    Pick<Types.Order, 'id'>\n    & { orderItems?: Types.Maybe<{ nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.OrderItem, 'id' | 'vatWholesalePrice' | 'quantity'>\n        & { variant: Pick<Types.Variant, 'id'> }\n      )>>> }> }\n  ) };\n\nexport type GetCartVariantAvailabilityQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type GetCartVariantAvailabilityQuery = { cart: (\n    Pick<Types.Order, 'id'>\n    & { orderItems?: Types.Maybe<{ nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.OrderItem, 'id'>\n        & { variant: Pick<Types.Variant, 'id' | 'available' | 'name'> }\n      )>>> }> }\n  ) };\n\nexport const GiftCampaignsFragmentDoc = gql`\n    fragment giftCampaigns on GiftCampaign {\n  id\n  type\n  applied\n  campaignName\n  description\n  type\n  fromDate\n  multiplyBy\n  remainingRewardTimes\n  selectedGifts {\n    id\n    orderId\n    multiplyBy\n    giftSelection {\n      id\n      giftSelectionItemGroups {\n        quantity\n        giftSelectionItems {\n          id\n          quantity\n        }\n      }\n    }\n    selectedGiftItems {\n      giftSelectionItem {\n        id\n        quantity\n      }\n      quantity\n      id\n    }\n    totalValue\n  }\n  toDate\n  progressData {\n    id\n    materialNumber\n    name\n    quantity\n    revenue\n  }\n  level\n  requirements {\n    id\n    totalRevenueThreshold\n    totalQuantityThreshold\n    giftConditionItems {\n      id\n      revenueThreshold\n      quantityThreshold\n      variant {\n        id\n        name\n        netPrice\n      }\n    }\n  }\n  gifts {\n    id\n    name\n    description\n    giftSelectionItemGroups {\n      groupId\n      itemCount\n      quantity\n      giftSelectionItems {\n        groupId\n        id\n        quantity\n        totalValue\n        variant {\n          id\n          name\n          materialNumber\n          defaultImageUrl\n          vatWholesalePrice\n          netPrice\n          volume\n          optionValues {\n            id\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const OrderItemConnectFragmentDoc = gql`\n    fragment orderItemConnect on OrderItemConnection {\n  nodes {\n    id\n    price\n    quantity\n    updatedAt\n    createdAt\n    vatWholesalePrice\n    totalPrice\n    firstGiftCampaignId\n    firstLevelableCampaignId\n    firstNoncombinableCampaignId\n    variant {\n      name\n      id\n      netPrice\n      discounts {\n        id\n        name\n        percent\n        type\n        flatAmount\n        applied\n        adjustment\n        fromDate\n        toDate\n        requirements\n      }\n      materialNumber\n      defaultImageUrl\n      vatWholesalePrice\n      volume\n      product {\n        id\n      }\n      volumeUnit {\n        code\n      }\n      optionValues {\n        id\n        value\n      }\n    }\n    discounts {\n      id\n      name\n      percent\n      type\n      flatAmount\n      applied\n      adjustment\n      fromDate\n      toDate\n      requirements\n    }\n    noncombinableGiftCampaigns {\n      groupId\n      giftCampaignGroups {\n        id\n        applied\n        type\n        campaignName\n        description\n        fromDate\n        toDate\n        multiplyBy\n        progressData {\n          id\n          name\n          quantity\n          revenue\n        }\n        remainingRewardTimes\n        selectedGifts {\n          id\n          orderId\n          multiplyBy\n          giftSelection {\n            id\n            giftSelectionItemGroups {\n              quantity\n              giftSelectionItems {\n                id\n                quantity\n                variant {\n                  name\n                  id\n                  netPrice\n                  materialNumber\n                  vatWholesalePrice\n                  optionValues {\n                    id\n                    value\n                  }\n                }\n              }\n            }\n          }\n          selectedGiftItems {\n            giftSelectionItem {\n              id\n              quantity\n              variant {\n                name\n                id\n                netPrice\n                materialNumber\n                vatWholesalePrice\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n            quantity\n            id\n          }\n          totalValue\n        }\n        level\n        requirements {\n          id\n          totalRevenueThreshold\n          totalQuantityThreshold\n          giftConditionItems {\n            id\n            revenueThreshold\n            quantityThreshold\n            variant {\n              id\n              name\n              netPrice\n            }\n          }\n        }\n        gifts {\n          id\n          name\n          description\n          giftSelectionItemGroups {\n            groupId\n            itemCount\n            quantity\n            giftSelectionItems {\n              groupId\n              id\n              quantity\n              totalValue\n              variant {\n                id\n                name\n                materialNumber\n                defaultImageUrl\n                vatWholesalePrice\n                netPrice\n                volume\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    levelableGiftCampaigns {\n      id\n      applied\n      type\n      campaignName\n      description\n      fromDate\n      toDate\n      multiplyBy\n      level\n      remainingRewardTimes\n      selectedGifts {\n        id\n        orderId\n        multiplyBy\n        giftSelection {\n          id\n          giftSelectionItemGroups {\n            quantity\n            giftSelectionItems {\n              id\n              quantity\n              variant {\n                name\n                id\n                netPrice\n                materialNumber\n                vatWholesalePrice\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n          }\n        }\n        selectedGiftItems {\n          giftSelectionItem {\n            id\n            quantity\n            variant {\n              name\n              id\n              netPrice\n              materialNumber\n              vatWholesalePrice\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n          quantity\n          id\n        }\n        totalValue\n      }\n      requirements {\n        id\n        totalRevenueThreshold\n        totalQuantityThreshold\n        giftConditionItems {\n          id\n          revenueThreshold\n          quantityThreshold\n          variant {\n            id\n            name\n            netPrice\n          }\n        }\n      }\n      gifts {\n        id\n        name\n        description\n        giftSelectionItemGroups {\n          groupId\n          itemCount\n          quantity\n          giftSelectionItems {\n            groupId\n            id\n            quantity\n            totalValue\n            variant {\n              id\n              name\n              materialNumber\n              defaultImageUrl\n              vatWholesalePrice\n              netPrice\n              volume\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n        }\n      }\n      giftCampaignChildren {\n        id\n        applied\n        type\n        campaignName\n        description\n        fromDate\n        toDate\n        multiplyBy\n        level\n        remainingRewardTimes\n        selectedGifts {\n          id\n          orderId\n          multiplyBy\n          giftSelection {\n            id\n            giftSelectionItemGroups {\n              quantity\n              giftSelectionItems {\n                id\n                quantity\n                variant {\n                  name\n                  id\n                  netPrice\n                  materialNumber\n                  vatWholesalePrice\n                  optionValues {\n                    id\n                    value\n                  }\n                }\n              }\n            }\n          }\n          selectedGiftItems {\n            giftSelectionItem {\n              id\n              quantity\n              variant {\n                name\n                id\n                netPrice\n                materialNumber\n                vatWholesalePrice\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n            quantity\n            id\n          }\n          totalValue\n        }\n        requirements {\n          id\n          totalRevenueThreshold\n          totalQuantityThreshold\n          giftConditionItems {\n            id\n            revenueThreshold\n            quantityThreshold\n            variant {\n              id\n              name\n              netPrice\n            }\n          }\n        }\n        gifts {\n          id\n          name\n          description\n          giftSelectionItemGroups {\n            groupId\n            itemCount\n            quantity\n            giftSelectionItems {\n              groupId\n              id\n              quantity\n              totalValue\n              variant {\n                id\n                name\n                materialNumber\n                defaultImageUrl\n                vatWholesalePrice\n                netPrice\n                volume\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    giftCampaigns {\n      id\n      type\n      applied\n      campaignName\n      description\n      fromDate\n      multiplyBy\n      conditionCount\n      remainingRewardTimes\n      selectedGifts {\n        id\n        orderId\n        multiplyBy\n        giftSelection {\n          id\n          giftSelectionItemGroups {\n            quantity\n            giftSelectionItems {\n              id\n              quantity\n              variant {\n                name\n                id\n                netPrice\n                materialNumber\n                vatWholesalePrice\n              }\n            }\n          }\n        }\n        selectedGiftItems {\n          giftSelectionItem {\n            id\n            quantity\n            variant {\n              name\n              id\n              netPrice\n              materialNumber\n              vatWholesalePrice\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n          quantity\n          id\n        }\n        totalValue\n      }\n      toDate\n      progressData {\n        id\n        materialNumber\n        name\n        quantity\n        revenue\n      }\n      level\n      requirements {\n        id\n        totalRevenueThreshold\n        totalQuantityThreshold\n        giftConditionItems {\n          id\n          revenueThreshold\n          quantityThreshold\n          variant {\n            id\n            name\n            netPrice\n          }\n        }\n      }\n      gifts {\n        id\n        name\n        description\n        giftSelectionItemGroups {\n          groupId\n          itemCount\n          quantity\n          giftSelectionItems {\n            groupId\n            id\n            quantity\n            totalValue\n            variant {\n              id\n              name\n              materialNumber\n              defaultImageUrl\n              vatWholesalePrice\n              netPrice\n              volume\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  pageInfo {\n    hasNextPage\n    endCursor\n  }\n  totalCount\n}\n    `;\nexport const GetCartDocument = gql`\n    query GetCart($first: Int, $after: String) {\n  cart {\n    id\n    orderItems(first: $first, after: $after) {\n      nodes {\n        id\n        price\n        quantity\n        updatedAt\n        createdAt\n        vatWholesalePrice\n        vat\n        totalPriceBeforeVat\n        totalPrice\n        firstGiftCampaignId\n        firstLevelableCampaignId\n        firstNoncombinableCampaignId\n        anyImportableSameOrder\n        ownCampaignTypeA\n        hasAllGiftsSelected\n        updatedAt\n        userUpdater {\n          id\n          name\n          phoneNumber\n          email\n        }\n        variant {\n          name\n          id\n          available\n          netPrice\n          vatPrice\n          campaignIds\n          discounts {\n            ...discount\n          }\n          materialNumber\n          defaultImageUrl\n          vatWholesalePrice\n          volume\n          product {\n            id\n          }\n          volumeUnit {\n            code\n          }\n          optionValues {\n            id\n            value\n          }\n        }\n        discounts {\n          ...discount\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n    status\n    total\n  }\n}\n    ${DiscountFragmentDoc}`;\n\n/**\n * __useGetCartQuery__\n *\n * To run a query within a React component, call `useGetCartQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCartQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useGetCartQuery(baseOptions?: Apollo.QueryHookOptions<GetCartQuery, GetCartQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCartQuery, GetCartQueryVariables>(GetCartDocument, options);\n      }\nexport function useGetCartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCartQuery, GetCartQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCartQuery, GetCartQueryVariables>(GetCartDocument, options);\n        }\nexport type GetCartQueryHookResult = ReturnType<typeof useGetCartQuery>;\nexport type GetCartLazyQueryHookResult = ReturnType<typeof useGetCartLazyQuery>;\nexport type GetCartQueryResult = Apollo.QueryResult<GetCartQuery, GetCartQueryVariables>;\nexport const UpdateCartDocument = gql`\n    mutation UpdateCart($input: UpdateCartInput!, $first: Int, $after: String) {\n  updateCart(input: $input) {\n    id\n    orderItems(first: $first, after: $after) {\n      nodes {\n        id\n        price\n        quantity\n        updatedAt\n        createdAt\n        vatWholesalePrice\n        vat\n        totalPriceBeforeVat\n        totalPrice\n        firstGiftCampaignId\n        firstLevelableCampaignId\n        firstNoncombinableCampaignId\n        anyImportableSameOrder\n        ownCampaignTypeA\n        hasAllGiftsSelected\n        updatedAt\n        userUpdater {\n          id\n          name\n          phoneNumber\n          email\n        }\n        variant {\n          name\n          id\n          available\n          netPrice\n          vatPrice\n          campaignIds\n          discounts {\n            ...discount\n          }\n          materialNumber\n          defaultImageUrl\n          vatWholesalePrice\n          volume\n          product {\n            id\n          }\n          volumeUnit {\n            code\n          }\n          optionValues {\n            id\n            value\n          }\n        }\n        discounts {\n          ...discount\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n    status\n    total\n  }\n}\n    ${DiscountFragmentDoc}`;\nexport type UpdateCartMutationFn = Apollo.MutationFunction<UpdateCartMutation, UpdateCartMutationVariables>;\n\n/**\n * __useUpdateCartMutation__\n *\n * To run a mutation, you first call `useUpdateCartMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCartMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCartMutation, { data, loading, error }] = useUpdateCartMutation({\n *   variables: {\n *      input: // value for 'input'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useUpdateCartMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCartMutation, UpdateCartMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateCartMutation, UpdateCartMutationVariables>(UpdateCartDocument, options);\n      }\nexport type UpdateCartMutationHookResult = ReturnType<typeof useUpdateCartMutation>;\nexport type UpdateCartMutationResult = Apollo.MutationResult<UpdateCartMutation>;\nexport type UpdateCartMutationOptions = Apollo.BaseMutationOptions<UpdateCartMutation, UpdateCartMutationVariables>;\nexport const GetOrderItemsWithQuantityDocument = gql`\n    query GetOrderItemsWithQuantity {\n  cart {\n    id\n    orderItems {\n      nodes {\n        id\n        vatWholesalePrice\n        quantity\n        variant {\n          id\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetOrderItemsWithQuantityQuery__\n *\n * To run a query within a React component, call `useGetOrderItemsWithQuantityQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderItemsWithQuantityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderItemsWithQuantityQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrderItemsWithQuantityQuery(baseOptions?: Apollo.QueryHookOptions<GetOrderItemsWithQuantityQuery, GetOrderItemsWithQuantityQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOrderItemsWithQuantityQuery, GetOrderItemsWithQuantityQueryVariables>(GetOrderItemsWithQuantityDocument, options);\n      }\nexport function useGetOrderItemsWithQuantityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderItemsWithQuantityQuery, GetOrderItemsWithQuantityQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOrderItemsWithQuantityQuery, GetOrderItemsWithQuantityQueryVariables>(GetOrderItemsWithQuantityDocument, options);\n        }\nexport type GetOrderItemsWithQuantityQueryHookResult = ReturnType<typeof useGetOrderItemsWithQuantityQuery>;\nexport type GetOrderItemsWithQuantityLazyQueryHookResult = ReturnType<typeof useGetOrderItemsWithQuantityLazyQuery>;\nexport type GetOrderItemsWithQuantityQueryResult = Apollo.QueryResult<GetOrderItemsWithQuantityQuery, GetOrderItemsWithQuantityQueryVariables>;\nexport const GetCartVariantAvailabilityDocument = gql`\n    query GetCartVariantAvailability {\n  cart {\n    id\n    orderItems {\n      nodes {\n        id\n        variant {\n          id\n          available\n          name\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetCartVariantAvailabilityQuery__\n *\n * To run a query within a React component, call `useGetCartVariantAvailabilityQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCartVariantAvailabilityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCartVariantAvailabilityQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCartVariantAvailabilityQuery(baseOptions?: Apollo.QueryHookOptions<GetCartVariantAvailabilityQuery, GetCartVariantAvailabilityQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCartVariantAvailabilityQuery, GetCartVariantAvailabilityQueryVariables>(GetCartVariantAvailabilityDocument, options);\n      }\nexport function useGetCartVariantAvailabilityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCartVariantAvailabilityQuery, GetCartVariantAvailabilityQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCartVariantAvailabilityQuery, GetCartVariantAvailabilityQueryVariables>(GetCartVariantAvailabilityDocument, options);\n        }\nexport type GetCartVariantAvailabilityQueryHookResult = ReturnType<typeof useGetCartVariantAvailabilityQuery>;\nexport type GetCartVariantAvailabilityLazyQueryHookResult = ReturnType<typeof useGetCartVariantAvailabilityLazyQuery>;\nexport type GetCartVariantAvailabilityQueryResult = Apollo.QueryResult<GetCartVariantAvailabilityQuery, GetCartVariantAvailabilityQueryVariables>;","import React, { useEffect, useMemo, createContext, useContext, useState, useCallback } from 'react';\nimport { ApolloError, getApolloContext, ApolloCache, FetchResult, MutationFunctionOptions } from '@apollo/client';\nimport { message } from 'antd';\nimport omit from 'lodash/omit';\nimport get from 'lodash/get';\n\nimport {\n  useGetCartQuery,\n  useGetOrderItemsWithQuantityLazyQuery,\n  GetOrderItemsWithQuantityQuery,\n  GetCartQuery,\n  useUpdateCartMutation,\n  OrderItem,\n  UpdateCartMutation,\n  UpdateCartInput,\n  GetCartDocument,\n  Exact,\n  Maybe,\n} from './cart.gql.generated';\nimport { OrderItemConnectFragment } from '@hooks/cart';\nimport { useGetOrderItemLazyQuery, GetOrderItemQuery } from '@hooks/orderItem';\nimport { PERFORMANCE_ITEM_PER_PAGE } from '@utils/constants';\n\nexport type UpdateCartOptions = MutationFunctionOptions<\n  UpdateCartMutation,\n  Exact<{\n    input: UpdateCartInput;\n    first?: Maybe<number>;\n    after?: Maybe<string>;\n  }>\n>;\n\ntype CartContextType = {\n  updateCount: number;\n  setUpdateCount?: (counter: number) => void;\n  data?: GetCartQuery;\n  orderItemData?: GetOrderItemQuery;\n  loading: boolean;\n  initialLoading: boolean;\n  updateCartLoading?: boolean;\n  error?: ApolloError;\n  variantIdWithCartData: VariantIdWithCartData;\n  isMiniCartItemDetailVisible: boolean;\n  selectedCartItemId: string | undefined;\n  selectedVariantId?: string;\n  fetchMoreCartItem?: (endCursor: string) => void;\n  handleOpenMiniCartDetail?: (id: string, variantId?: string) => void;\n  handleCloseMiniCartDetail?: () => void;\n  handleUpdateCart: (variantId: string, quantity: number, options?: UpdateCartOptions) => void;\n  orderItemLoading?: boolean;\n  refetchAfterUpdatingCart: boolean;\n  setRefetchAfterUpdatingCart?: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport type VariantIdWithCartData = {\n  [key: number]: {\n    quantity: number;\n    orderItemId: string;\n    vatWholesalePrice: number;\n  };\n};\n\ntype CartControllerProps = {\n  children: React.ReactNode;\n};\n\nconst CartContext = createContext<CartContextType>({\n  updateCount: 0,\n  loading: false,\n  initialLoading: false,\n  isMiniCartItemDetailVisible: false,\n  selectedCartItemId: '',\n  selectedVariantId: undefined,\n  variantIdWithCartData: {},\n  handleUpdateCart: () => null,\n  refetchAfterUpdatingCart: false,\n});\n\nfunction transformVariantByOrder(data: GetCartQuery | GetOrderItemsWithQuantityQuery | undefined) {\n  const orderItems: OrderItem[] = get(data, 'cart.orderItems.nodes', []);\n  return orderItems.reduce((acc, orderItem) => {\n    const id: string = orderItem.variant.id as string;\n    if (id)\n      acc[id] = {\n        orderItemId: orderItem.id,\n        quantity: orderItem.quantity,\n        vatWholesalePrice: Number(orderItem.vatWholesalePrice),\n      };\n\n    return acc;\n  }, {} as Record<string, any>);\n}\n\n// store order in variantIdWithCartData as key value pair for easy access\n\nexport function CartController({ children }: CartControllerProps) {\n  const [updateCount, setUpdateCount] = useState(0);\n  const [variantIdWithCartData, setVariantIdWithCartData] = useState({});\n  const [isMiniCartItemDetailVisible, setMiniCartItemDetailVisibility] = useState(false);\n  const [selectedCartItemId, setSelectedCartItemId] = useState<string | undefined>(undefined);\n  const [selectedVariantId, setSelectedVariantId] = useState<string | undefined>(undefined);\n  const [removingVariantId, setRemovingVariantId] = useState<string>('');\n\n  // get every order item because cart is paginated and all items's quantity are needed for instantdeal page\n  const [fetchAllOrderItems] = useGetOrderItemsWithQuantityLazyQuery({\n    fetchPolicy: 'no-cache',\n    onCompleted: response => {\n      const transformedData = transformVariantByOrder(response);\n      setVariantIdWithCartData(transformedData);\n    },\n  });\n  const { client } = useContext(getApolloContext());\n  const [refetchAfterUpdatingCart, setRefetchAfterUpdatingCart] = useState(false);\n\n  const {\n    data,\n    loading,\n    error,\n    fetchMore,\n    refetch: refetchCart,\n  } = useGetCartQuery({\n    variables: { first: PERFORMANCE_ITEM_PER_PAGE },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const [fetchOrderItem, { data: orderItemData, loading: orderItemLoading }] = useGetOrderItemLazyQuery();\n  const [updateCart, { loading: updateCartLoading }] = useUpdateCartMutation();\n  const initialLoading = loading && !data && !error;\n\n  const handleUpdateCart = React.useCallback(\n    async (variantId: string, quantity: number, options?: UpdateCartOptions) => {\n      const currOrderItemId = quantity === 0 ? get(variantIdWithCartData, `${variantId}.orderId`, '') : '';\n      try {\n        await updateCart({\n          variables: {\n            input: { variantId, quantity },\n            first: PERFORMANCE_ITEM_PER_PAGE,\n          },\n          update: (\n            cache: ApolloCache<UpdateCartMutation>,\n            mutationResult: FetchResult<UpdateCartMutation, Record<string, any>, Record<string, any>>,\n          ): void => {\n            if (!mutationResult.data?.updateCart) return;\n\n            fetchAllOrderItems();\n            currOrderItemId && cache.evict({ id: `OrderItem:${currOrderItemId}` });\n            cache.gc(); // remove stale order item from Apollo InMemoryCache\n          },\n          ...options,\n        });\n\n        setRemovingVariantId(variantId);\n        setUpdateCount(prev => prev + 1);\n        setRefetchAfterUpdatingCart(true);\n      } catch (error) {\n        message.error((error as Error).message);\n      }\n    },\n    [variantIdWithCartData],\n  );\n\n  const handleOpenMiniCartDetail = React.useCallback((id: string, variantId?: string) => {\n    setSelectedCartItemId(id);\n    setSelectedVariantId(variantId);\n    setMiniCartItemDetailVisibility(true);\n  }, []);\n\n  const handleCloseMiniCartDetail = React.useCallback(() => {\n    setSelectedCartItemId(undefined);\n    setSelectedVariantId(undefined);\n    setMiniCartItemDetailVisibility(false);\n  }, []);\n\n  const fetchMoreCartItem = React.useCallback(\n    endCursor => {\n      fetchMore?.({\n        variables: {\n          first: PERFORMANCE_ITEM_PER_PAGE,\n          after: endCursor,\n        },\n        updateQuery: (\n          prev: GetCartQuery,\n          {\n            fetchMoreResult,\n          }: {\n            fetchMoreResult?: GetCartQuery;\n          },\n        ): GetCartQuery => {\n          const orderItems = get(fetchMoreResult, 'cart.orderItems.nodes', []);\n          if (!orderItems.length) return prev;\n\n          const previousOrderItems = get(prev, 'cart.orderItems.nodes', []);\n          const orderItemFragment = get(fetchMoreResult, 'cart.orderItems', {}) as OrderItemConnectFragment;\n\n          return {\n            ...prev,\n            cart: {\n              ...prev.cart,\n              orderItems: {\n                ...orderItemFragment,\n                nodes: [...previousOrderItems, ...orderItems],\n              },\n            },\n          };\n        },\n      });\n    },\n    [fetchMore],\n  );\n\n  useEffect(() => {\n    refetchCart({\n      first: PERFORMANCE_ITEM_PER_PAGE,\n    });\n    fetchAllOrderItems();\n  }, []);\n\n  useEffect(() => {\n    const orderItemId = get(variantIdWithCartData, `${Number(selectedVariantId || 0)}.orderId`, null);\n    if (orderItemId) {\n      setSelectedCartItemId(orderItemId);\n      fetchOrderItem({\n        variables: {\n          id: orderItemId,\n        },\n      });\n    }\n\n    const data = client?.cache.readQuery({ query: GetCartDocument, variables: { first: PERFORMANCE_ITEM_PER_PAGE } });\n    if (!get(variantIdWithCartData, `${removingVariantId}`)) {\n      const firstItem = get(data, 'cart.orderItems.nodes[0]') as OrderItem;\n\n      // adding new cart item would cause variantIdWithCartData outdated\n      if (!get(variantIdWithCartData, `${firstItem?.variant?.id}`, '')) {\n        const variantId = get(firstItem, 'variant.id', '');\n        variantId &&\n          setVariantIdWithCartData(prev => ({\n            ...prev,\n            [variantId]: {\n              orderId: firstItem.id,\n              quantity: firstItem.quantity,\n              vatWholesalePrice: Number(firstItem.vatWholesalePrice),\n            },\n          }));\n      }\n    } else {\n      const newVariantIdCartData = omit(variantIdWithCartData, [removingVariantId]);\n      setVariantIdWithCartData(newVariantIdCartData);\n    }\n    setRemovingVariantId('');\n  }, [updateCount]);\n\n  const context = useMemo(\n    () => ({\n      data,\n      updateCount,\n      setUpdateCount,\n      orderItemData,\n      initialLoading,\n      loading,\n      error,\n      variantIdWithCartData,\n      fetchMoreCartItem,\n      handleUpdateCart,\n      handleOpenMiniCartDetail,\n      handleCloseMiniCartDetail,\n      isMiniCartItemDetailVisible,\n      selectedCartItemId,\n      selectedVariantId,\n      orderItemLoading,\n      updateCartLoading,\n      refetchAfterUpdatingCart,\n      setRefetchAfterUpdatingCart,\n    }),\n    [\n      loading,\n      initialLoading,\n      data,\n      updateCount,\n      orderItemData,\n      variantIdWithCartData,\n      handleUpdateCart,\n      isMiniCartItemDetailVisible,\n      selectedCartItemId,\n      selectedVariantId,\n      orderItemLoading,\n      updateCartLoading,\n      refetchAfterUpdatingCart,\n    ],\n  );\n\n  return <CartContext.Provider value={context}>{children}</CartContext.Provider>;\n}\n\nexport function useCartData() {\n  return useContext(CartContext);\n}\n\nexport function useFetchMoreCartItems() {\n  const { data, loading, fetchMoreCartItem } = useCartData();\n  const totalCount = get(data, 'cart.orderItems.totalCount');\n  const products = get(data, 'cart.orderItems.nodes', []);\n  const { hasNextPage, endCursor } = get(data, 'cart.orderItems.pageInfo', { hasNextPage: false, endCursor: '' });\n\n  const fetchMoreProducts = useCallback(() => {\n    fetchMoreCartItem?.(endCursor);\n  }, [endCursor]);\n\n  useEffect(() => {\n    if (hasNextPage && products.length < totalCount && products.length % 10 !== 0) {\n      fetchMoreProducts();\n    }\n  }, [products.length]);\n\n  return { loading, hasNextPage, endCursor, fetchMoreProducts };\n}\n\nexport const CartConsumer = CartContext.Consumer;\n","import * as Types from '../../graphql/types.generated';\n\nimport { DiscountFragment } from '../discount/discount.gql.generated';\nimport { gql } from '@apollo/client';\nimport { DiscountFragmentDoc } from '../discount/discount.gql.generated';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type GetCategoriesQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type GetCategoriesQuery = { categories: Array<(\n    Pick<Types.Category, 'id' | 'name' | 'imageUrl'>\n    & { children?: Types.Maybe<Array<(\n      Pick<Types.Category, 'id' | 'name' | 'imageUrl'>\n      & { children?: Types.Maybe<Array<Pick<Types.Category, 'id' | 'name' | 'imageUrl'>>> }\n    )>> }\n  )> };\n\nexport type GetCategoryQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n  first?: Types.Maybe<Types.Scalars['Int']>;\n  after?: Types.Maybe<Types.Scalars['String']>;\n  optionValueIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  brandIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  priceGte?: Types.Maybe<Types.Scalars['Int']>;\n  priceLte?: Types.Maybe<Types.Scalars['Int']>;\n  categoryIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  attributes?: Types.Maybe<Array<Types.Scalars['String']> | Types.Scalars['String']>;\n}>;\n\n\nexport type GetCategoryQuery = { category: (\n    Pick<Types.Category, 'id' | 'name' | 'isDeepestChild' | 'imageUrl'>\n    & { parent?: Types.Maybe<(\n      Pick<Types.Category, 'id' | 'name'>\n      & { parent?: Types.Maybe<Pick<Types.Category, 'id' | 'name'>> }\n    )>, products?: Types.Maybe<ProductConnectionFragment>, children?: Types.Maybe<Array<Pick<Types.Category, 'id' | 'name' | 'imageUrl'>>> }\n  ) };\n\nexport type GetCategoryWithGiftCampaignsQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n  first?: Types.Maybe<Types.Scalars['Int']>;\n  after?: Types.Maybe<Types.Scalars['String']>;\n  optionValueIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  brandIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  priceGte?: Types.Maybe<Types.Scalars['Int']>;\n  priceLte?: Types.Maybe<Types.Scalars['Int']>;\n  categoryIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  attributes?: Types.Maybe<Array<Types.Scalars['String']> | Types.Scalars['String']>;\n}>;\n\n\nexport type GetCategoryWithGiftCampaignsQuery = { category: (\n    Pick<Types.Category, 'id' | 'name' | 'isDeepestChild' | 'imageUrl'>\n    & { parent?: Types.Maybe<(\n      Pick<Types.Category, 'id' | 'name'>\n      & { parent?: Types.Maybe<Pick<Types.Category, 'id' | 'name'>> }\n    )>, products?: Types.Maybe<(\n      { nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.Product, 'id' | 'name'>\n        & { defaultVariant: (\n          Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'available' | 'netPrice' | 'vatPrice' | 'vatWholesalePrice' | 'defaultImageUrl'>\n          & { campaignPropratedPrices?: Types.Maybe<Array<Pick<Types.CampaignPropratedPrice, 'id' | 'propratedPrice'>>>, discounts: Array<DiscountFragment>, giftCampaigns?: Types.Maybe<Array<(\n            Pick<Types.GiftCampaign, 'id' | 'type' | 'applied' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'level' | 'multiplyBy' | 'conditionCount' | 'remainingRewardTimes'>\n            & { progressData?: Types.Maybe<Array<Pick<Types.GiftCampaignProgressItem, 'id' | 'materialNumber' | 'name' | 'quantity' | 'revenue'>>>, requirements: Array<Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>> }\n          )>>, optionValues: Array<Pick<Types.OptionValue, 'value'>> }\n        ) }\n      )>>> }\n      & ProductConnectionFragment\n    )>, children?: Types.Maybe<Array<Pick<Types.Category, 'id' | 'name' | 'imageUrl'>>> }\n  ) };\n\nexport type ProductConnectionFragment = (\n  Pick<Types.ProductConnection, 'totalCount'>\n  & { pageInfo: Pick<Types.PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'>, nodes?: Types.Maybe<Array<Types.Maybe<(\n    Pick<Types.Product, 'id' | 'name'>\n    & { filterVariant?: Types.Maybe<(\n      Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'available' | 'vatPrice' | 'netPrice' | 'vatWholesalePrice' | 'defaultImageUrl' | 'imageUrls' | 'campaignIds'>\n      & { discounts: Array<Pick<Types.DiscountDetails, 'name' | 'applied' | 'percent' | 'flatAmount' | 'adjustment' | 'type' | 'requirements'>>, firstOrderDiscount?: Types.Maybe<Pick<Types.DiscountDetails, 'name' | 'applied' | 'percent' | 'flatAmount' | 'adjustment' | 'type' | 'requirements'>>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n    )>, defaultVariant: (\n      Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'available' | 'vatPrice' | 'netPrice' | 'vatWholesalePrice' | 'defaultImageUrl' | 'imageUrls' | 'campaignIds'>\n      & { discounts: Array<Pick<Types.DiscountDetails, 'name' | 'applied' | 'percent' | 'flatAmount' | 'adjustment' | 'type' | 'requirements'>>, firstOrderDiscount?: Types.Maybe<Pick<Types.DiscountDetails, 'name' | 'applied' | 'percent' | 'flatAmount' | 'adjustment' | 'type' | 'requirements'>>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n    ) }\n  )>>> }\n);\n\nexport type GetOptionTypesQueryVariables = Types.Exact<{\n  categoryId: Types.Scalars['ID'];\n}>;\n\n\nexport type GetOptionTypesQuery = { getOptionTypes: Array<(\n    Pick<Types.OptionType, 'id' | 'name'>\n    & { optionValuesByCategory: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n  )> };\n\nexport type GetOptionValuesQueryVariables = Types.Exact<{\n  optionId: Types.Scalars['ID'];\n  categoryId: Types.Scalars['ID'];\n}>;\n\n\nexport type GetOptionValuesQuery = { listOptionValues: Array<(\n    Pick<Types.OptionValue, 'id' | 'value'>\n    & { optionType: Pick<Types.OptionType, 'id' | 'name'> }\n  )> };\n\nexport const ProductConnectionFragmentDoc = gql`\n    fragment productConnection on ProductConnection {\n  totalCount\n  pageInfo {\n    hasPreviousPage\n    hasNextPage\n    endCursor\n    startCursor\n  }\n  nodes {\n    id\n    name\n    filterVariant(attributes: $attributes, priceGte: $priceGte, priceLte: $priceLte) {\n      id\n      name\n      materialNumber\n      available\n      vatPrice\n      netPrice\n      vatWholesalePrice\n      defaultImageUrl\n      imageUrls\n      campaignIds\n      discounts {\n        name\n        applied\n        percent\n        flatAmount\n        adjustment\n        type\n        requirements\n      }\n      firstOrderDiscount {\n        name\n        applied\n        percent\n        flatAmount\n        adjustment\n        type\n        requirements\n      }\n      optionValues {\n        id\n        value\n      }\n    }\n    defaultVariant {\n      id\n      name\n      materialNumber\n      available\n      vatPrice\n      netPrice\n      vatWholesalePrice\n      defaultImageUrl\n      imageUrls\n      campaignIds\n      discounts {\n        name\n        applied\n        percent\n        flatAmount\n        adjustment\n        type\n        requirements\n      }\n      firstOrderDiscount {\n        name\n        applied\n        percent\n        flatAmount\n        adjustment\n        type\n        requirements\n      }\n      optionValues {\n        id\n        value\n      }\n    }\n  }\n}\n    `;\nexport const GetCategoriesDocument = gql`\n    query GetCategories {\n  categories {\n    id\n    name\n    imageUrl\n    children {\n      id\n      name\n      imageUrl\n      children {\n        id\n        name\n        imageUrl\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetCategoriesQuery__\n *\n * To run a query within a React component, call `useGetCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCategoriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetCategoriesQuery, GetCategoriesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCategoriesQuery, GetCategoriesQueryVariables>(GetCategoriesDocument, options);\n      }\nexport function useGetCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoriesQuery, GetCategoriesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCategoriesQuery, GetCategoriesQueryVariables>(GetCategoriesDocument, options);\n        }\nexport type GetCategoriesQueryHookResult = ReturnType<typeof useGetCategoriesQuery>;\nexport type GetCategoriesLazyQueryHookResult = ReturnType<typeof useGetCategoriesLazyQuery>;\nexport type GetCategoriesQueryResult = Apollo.QueryResult<GetCategoriesQuery, GetCategoriesQueryVariables>;\nexport const GetCategoryDocument = gql`\n    query GetCategory($id: ID!, $first: Int, $after: String, $optionValueIds: [ID!], $brandIds: [ID!], $priceGte: Int, $priceLte: Int, $categoryIds: [ID!], $attributes: [String!]) {\n  category(id: $id) {\n    id\n    name\n    isDeepestChild\n    imageUrl\n    parent {\n      id\n      name\n      parent {\n        id\n        name\n      }\n    }\n    products(\n      first: $first\n      after: $after\n      optionValueIds: $optionValueIds\n      brandIds: $brandIds\n      priceGte: $priceGte\n      priceLte: $priceLte\n      categoryIds: $categoryIds\n      attributes: $attributes\n    ) {\n      ...productConnection\n    }\n    children {\n      id\n      name\n      imageUrl\n    }\n  }\n}\n    ${ProductConnectionFragmentDoc}`;\n\n/**\n * __useGetCategoryQuery__\n *\n * To run a query within a React component, call `useGetCategoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCategoryQuery({\n *   variables: {\n *      id: // value for 'id'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      optionValueIds: // value for 'optionValueIds'\n *      brandIds: // value for 'brandIds'\n *      priceGte: // value for 'priceGte'\n *      priceLte: // value for 'priceLte'\n *      categoryIds: // value for 'categoryIds'\n *      attributes: // value for 'attributes'\n *   },\n * });\n */\nexport function useGetCategoryQuery(baseOptions: Apollo.QueryHookOptions<GetCategoryQuery, GetCategoryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCategoryQuery, GetCategoryQueryVariables>(GetCategoryDocument, options);\n      }\nexport function useGetCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoryQuery, GetCategoryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCategoryQuery, GetCategoryQueryVariables>(GetCategoryDocument, options);\n        }\nexport type GetCategoryQueryHookResult = ReturnType<typeof useGetCategoryQuery>;\nexport type GetCategoryLazyQueryHookResult = ReturnType<typeof useGetCategoryLazyQuery>;\nexport type GetCategoryQueryResult = Apollo.QueryResult<GetCategoryQuery, GetCategoryQueryVariables>;\nexport const GetCategoryWithGiftCampaignsDocument = gql`\n    query GetCategoryWithGiftCampaigns($id: ID!, $first: Int, $after: String, $optionValueIds: [ID!], $brandIds: [ID!], $priceGte: Int, $priceLte: Int, $categoryIds: [ID!], $attributes: [String!]) {\n  category(id: $id) {\n    id\n    name\n    isDeepestChild\n    imageUrl\n    parent {\n      id\n      name\n      parent {\n        id\n        name\n      }\n    }\n    products(\n      first: $first\n      after: $after\n      optionValueIds: $optionValueIds\n      brandIds: $brandIds\n      priceGte: $priceGte\n      priceLte: $priceLte\n      categoryIds: $categoryIds\n      attributes: $attributes\n    ) {\n      ...productConnection\n      nodes {\n        id\n        name\n        defaultVariant {\n          id\n          name\n          materialNumber\n          available\n          netPrice\n          vatPrice\n          vatWholesalePrice\n          defaultImageUrl\n          campaignPropratedPrices {\n            id\n            propratedPrice\n          }\n          discounts {\n            ...discount\n          }\n          giftCampaigns {\n            id\n            type\n            applied\n            campaignName\n            description\n            fromDate\n            toDate\n            progressData {\n              id\n              materialNumber\n              name\n              quantity\n              revenue\n            }\n            level\n            multiplyBy\n            conditionCount\n            remainingRewardTimes\n            requirements {\n              id\n              totalRevenueThreshold\n              totalQuantityThreshold\n            }\n          }\n          optionValues {\n            value\n          }\n        }\n      }\n    }\n    children {\n      id\n      name\n      imageUrl\n    }\n  }\n}\n    ${ProductConnectionFragmentDoc}\n${DiscountFragmentDoc}`;\n\n/**\n * __useGetCategoryWithGiftCampaignsQuery__\n *\n * To run a query within a React component, call `useGetCategoryWithGiftCampaignsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCategoryWithGiftCampaignsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCategoryWithGiftCampaignsQuery({\n *   variables: {\n *      id: // value for 'id'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      optionValueIds: // value for 'optionValueIds'\n *      brandIds: // value for 'brandIds'\n *      priceGte: // value for 'priceGte'\n *      priceLte: // value for 'priceLte'\n *      categoryIds: // value for 'categoryIds'\n *      attributes: // value for 'attributes'\n *   },\n * });\n */\nexport function useGetCategoryWithGiftCampaignsQuery(baseOptions: Apollo.QueryHookOptions<GetCategoryWithGiftCampaignsQuery, GetCategoryWithGiftCampaignsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCategoryWithGiftCampaignsQuery, GetCategoryWithGiftCampaignsQueryVariables>(GetCategoryWithGiftCampaignsDocument, options);\n      }\nexport function useGetCategoryWithGiftCampaignsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoryWithGiftCampaignsQuery, GetCategoryWithGiftCampaignsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCategoryWithGiftCampaignsQuery, GetCategoryWithGiftCampaignsQueryVariables>(GetCategoryWithGiftCampaignsDocument, options);\n        }\nexport type GetCategoryWithGiftCampaignsQueryHookResult = ReturnType<typeof useGetCategoryWithGiftCampaignsQuery>;\nexport type GetCategoryWithGiftCampaignsLazyQueryHookResult = ReturnType<typeof useGetCategoryWithGiftCampaignsLazyQuery>;\nexport type GetCategoryWithGiftCampaignsQueryResult = Apollo.QueryResult<GetCategoryWithGiftCampaignsQuery, GetCategoryWithGiftCampaignsQueryVariables>;\nexport const GetOptionTypesDocument = gql`\n    query GetOptionTypes($categoryId: ID!) {\n  getOptionTypes(id: $categoryId) {\n    id\n    name\n    optionValuesByCategory(categoryId: $categoryId) {\n      id\n      value\n    }\n  }\n}\n    `;\n\n/**\n * __useGetOptionTypesQuery__\n *\n * To run a query within a React component, call `useGetOptionTypesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOptionTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOptionTypesQuery({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *   },\n * });\n */\nexport function useGetOptionTypesQuery(baseOptions: Apollo.QueryHookOptions<GetOptionTypesQuery, GetOptionTypesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOptionTypesQuery, GetOptionTypesQueryVariables>(GetOptionTypesDocument, options);\n      }\nexport function useGetOptionTypesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOptionTypesQuery, GetOptionTypesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOptionTypesQuery, GetOptionTypesQueryVariables>(GetOptionTypesDocument, options);\n        }\nexport type GetOptionTypesQueryHookResult = ReturnType<typeof useGetOptionTypesQuery>;\nexport type GetOptionTypesLazyQueryHookResult = ReturnType<typeof useGetOptionTypesLazyQuery>;\nexport type GetOptionTypesQueryResult = Apollo.QueryResult<GetOptionTypesQuery, GetOptionTypesQueryVariables>;\nexport const GetOptionValuesDocument = gql`\n    query GetOptionValues($optionId: ID!, $categoryId: ID!) {\n  listOptionValues(id: $optionId, categoryId: $categoryId) {\n    id\n    value\n    optionType {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useGetOptionValuesQuery__\n *\n * To run a query within a React component, call `useGetOptionValuesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOptionValuesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOptionValuesQuery({\n *   variables: {\n *      optionId: // value for 'optionId'\n *      categoryId: // value for 'categoryId'\n *   },\n * });\n */\nexport function useGetOptionValuesQuery(baseOptions: Apollo.QueryHookOptions<GetOptionValuesQuery, GetOptionValuesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOptionValuesQuery, GetOptionValuesQueryVariables>(GetOptionValuesDocument, options);\n      }\nexport function useGetOptionValuesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOptionValuesQuery, GetOptionValuesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOptionValuesQuery, GetOptionValuesQueryVariables>(GetOptionValuesDocument, options);\n        }\nexport type GetOptionValuesQueryHookResult = ReturnType<typeof useGetOptionValuesQuery>;\nexport type GetOptionValuesLazyQueryHookResult = ReturnType<typeof useGetOptionValuesLazyQuery>;\nexport type GetOptionValuesQueryResult = Apollo.QueryResult<GetOptionValuesQuery, GetOptionValuesQueryVariables>;","import React, { useCallback } from 'react';\nimport merge from 'deepmerge';\nimport { message } from 'antd';\n\nimport { GetCategoryQuery, useGetCategoryLazyQuery, useGetCategoryWithGiftCampaignsLazyQuery } from '@hooks/category';\n\ntype Params = {\n  after?: string;\n  first?: number;\n  optionValueIds?: string[];\n  brandIds?: string[];\n  categoryIds?: string[];\n  attributes?: string[];\n};\n\nexport type ProductCategoriesContextType = {\n  productCategory?: GetCategoryQuery['category'];\n  loading?: boolean;\n  categoryDepth?: number;\n  handleFetchMoreProducts?: (params: Params) => void;\n  handleFilterProducts?: (params: Params) => void;\n  fetchMoreLoading?: boolean;\n};\n\nconst ProductCategoriesContext = React.createContext<ProductCategoriesContextType | undefined>(undefined);\nexport const useProductCategory = () => {\n  const value = React.useContext(ProductCategoriesContext);\n  if (!value) return {};\n  return value;\n};\n\ntype Props = {\n  children?: React.ReactNode;\n  initialParams?: Params;\n  isGift?: boolean;\n  cid?: string | string[];\n};\n\nfunction getCategoryDepth(category?: any, depth = 0): number {\n  if (!category) return depth;\n  if (category && !category.parent) depth;\n  const nextDepth = depth + 1;\n  return getCategoryDepth(category.parent, nextDepth);\n}\n\nexport const ProductCategoryController = ({ cid = '', initialParams = {}, isGift = false, children }: Props) => {\n  // Performance issue: Get list product with gift campaign is expensive.\n  // So, we need to limit call this query and wait BE fix issue about performance\n  const useGetCategory = isGift ? useGetCategoryWithGiftCampaignsLazyQuery : useGetCategoryLazyQuery;\n  const [fetchCategory, { loading, data, error, fetchMore }] = useGetCategory({\n    notifyOnNetworkStatusChange: true, // this is a must so fetchMore would have loading change https://github.com/apollographql/apollo-client/issues/6354\n  });\n\n  React.useEffect(() => {\n    if (typeof cid === 'string' && cid) {\n      try {\n        fetchCategory({\n          variables: {\n            id: cid,\n            first: 10,\n            ...initialParams,\n          },\n        });\n      } catch (error) {\n        message.error(error.message);\n      }\n    }\n  }, [cid]);\n\n  const handleFetchMoreProducts = useCallback(\n    (params: Params = {}) => {\n      try {\n        // @ts-ignore\n        fetchMore?.({\n          variables: {\n            id: cid,\n            first: 20,\n            ...params,\n          },\n          updateQuery: (\n            prev: GetCategoryQuery,\n            {\n              fetchMoreResult,\n            }: {\n              fetchMoreResult?: GetCategoryQuery;\n            },\n          ): GetCategoryQuery => {\n            if (!fetchMoreResult?.category) {\n              return prev;\n            }\n            return {\n              ...prev,\n              category: {\n                ...merge(prev.category, fetchMoreResult.category),\n                // deepmerge merge all children by adding previous children\n                // so we need to overwrite children by new result to avoid duplicate\n                children: fetchMoreResult.category.children,\n              },\n            };\n          },\n        });\n      } catch (error) {\n        message.error(error.message);\n      }\n    },\n    [cid, fetchMore],\n  );\n\n  const handleFilterProducts = useCallback(\n    (params: Params) => {\n      try {\n        fetchCategory({\n          variables: {\n            id: cid as string,\n            first: 10,\n            ...params,\n          },\n        });\n      } catch (error) {\n        message.error(error.message);\n      }\n    },\n    [cid, fetchCategory],\n  );\n\n  const context = React.useMemo(() => {\n    // first render loading\n    const loadingContainer = loading && !data && !error;\n    return {\n      productCategory: data?.category,\n      categoryDepth: getCategoryDepth(data?.category),\n      loading: loadingContainer,\n      fetchMoreLoading: loading,\n      handleFetchMoreProducts,\n      handleFilterProducts,\n    };\n  }, [loading, data, error, handleFetchMoreProducts]);\n\n  return (\n    <ProductCategoriesContext.Provider value={context}>\n      {typeof children === 'function' ? children(context) : children}\n    </ProductCategoriesContext.Provider>\n  );\n};\n","import React from 'react';\nimport {\n  AppstoreFilled,\n  ThunderboltFilled,\n  BulbFilled,\n  ToolFilled,\n  ControlFilled,\n  HomeFilled,\n  TabletFilled,\n  BugFilled,\n  FilterFilled,\n  DatabaseFilled,\n  GoldenFilled,\n  LikeFilled,\n} from '@ant-design/icons';\n\nexport const iconMap: Record<string, React.ElementType> = {\n  '101': AppstoreFilled,\n  '123': BulbFilled,\n  '150': ToolFilled,\n  '185': ControlFilled,\n  '189': HomeFilled,\n  '197': ThunderboltFilled,\n  '214': TabletFilled,\n  '215': BugFilled,\n  '216': FilterFilled,\n  '217': DatabaseFilled,\n  '218': GoldenFilled,\n  '219': LikeFilled,\n};\n\nexport const _Icon = () => null;\n\nexport function getCategoryIconById(id: string) {\n  return iconMap[id] || _Icon;\n}\n","import * as Types from '../../graphql/types.generated';\n\nimport { gql } from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type DiscountFragment = Pick<Types.DiscountDetails, 'id' | 'name' | 'percent' | 'type' | 'flatAmount' | 'applied' | 'vatAdjustment' | 'adjustment' | 'fromDate' | 'toDate' | 'requirements'>;\n\nexport const DiscountFragmentDoc = gql`\n    fragment discount on DiscountDetails {\n  id\n  name\n  percent\n  type\n  flatAmount\n  applied\n  vatAdjustment\n  adjustment\n  fromDate\n  toDate\n  requirements\n}\n    `;","import * as Types from '../../graphql/types.generated';\n\nimport { gql } from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type GiftFragment = (\n  Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n  & { giftSelectionItemGroups: Array<(\n    Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n    & { giftSelectionItems: Array<(\n      Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n      & { variant: (\n        Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'netPrice' | 'volume'>\n        & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n      ) }\n    )> }\n  )> }\n);\n\nexport const GiftFragmentDoc = gql`\n    fragment gift on GiftSelection {\n  id\n  name\n  description\n  giftSelectionItemGroups {\n    groupId\n    itemCount\n    quantity\n    giftSelectionItems {\n      groupId\n      id\n      quantity\n      totalValue\n      variant {\n        id\n        name\n        materialNumber\n        defaultImageUrl\n        vatWholesalePrice\n        netPrice\n        volume\n        optionValues {\n          id\n          value\n        }\n      }\n    }\n  }\n}\n    `;","import * as Types from '../../graphql/types.generated';\n\nimport { DiscountFragment } from '../discount/discount.gql.generated';\nimport { ProgressDataFragment, SelectedGiftsFragment } from '../campaign/campaign.gql.generated';\nimport { RequirementFragment } from '../requirement/requirement.gql.generated';\nimport { GiftFragment } from '../gift/gift.gql.generated';\nimport { gql } from '@apollo/client';\nimport { DiscountFragmentDoc } from '../discount/discount.gql.generated';\nimport { ProgressDataFragmentDoc, SelectedGiftsFragmentDoc } from '../campaign/campaign.gql.generated';\nimport { RequirementFragmentDoc } from '../requirement/requirement.gql.generated';\nimport { GiftFragmentDoc } from '../gift/gift.gql.generated';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type GetOrderItemQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\n\nexport type GetOrderItemQuery = { orderItem: (\n    Pick<Types.OrderItem, 'id' | 'quantity' | 'vatWholesalePrice' | 'totalPriceBeforeVat' | 'wholesalePrice' | 'vat' | 'totalPrice'>\n    & { discounts: Array<DiscountFragment>, noncombinableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.NoncombinableGiftCampaign, 'groupId'>\n      & { giftCampaignGroups?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'multiplyBy' | 'totalRewardsInCart' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'level'>\n        & { progressData?: Types.Maybe<Array<ProgressDataFragment>>, selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, requirements: Array<RequirementFragment>, gifts: Array<GiftFragment> }\n      )>> }\n    )>>, levelableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.LevelableGiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'multiplyBy' | 'level' | 'remainingRewardTimes'>\n      & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, gifts: Array<GiftFragment>, requirements: Array<RequirementFragment>, giftCampaignChildren?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'multiplyBy' | 'level' | 'remainingRewardTimes'>\n        & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, requirements: Array<RequirementFragment>, gifts: Array<GiftFragment> }\n      )>> }\n    )>>, giftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.GiftCampaign, 'id' | 'type' | 'applied' | 'campaignName' | 'description' | 'fromDate' | 'toDate' | 'level' | 'multiplyBy' | 'totalRewardsInCart' | 'remainingRewardTimesInCart' | 'unconfirmedRewardTimesInCart' | 'remainingRewardTimes'>\n      & { progressData?: Types.Maybe<Array<Pick<Types.GiftCampaignProgressItem, 'id' | 'materialNumber' | 'name' | 'quantity' | 'revenue'>>>, selectedGiftsInCart?: Types.Maybe<Array<(\n        Pick<Types.SelectedGift, 'id' | 'status' | 'orderId' | 'multiplyBy' | 'giftBillingOption'>\n        & { giftSelection: (\n          Pick<Types.GiftSelection, 'id'>\n          & { giftSelectionItemGroups: Array<(\n            Pick<Types.GiftSelectionItemGroup, 'quantity'>\n            & { giftSelectionItems: Array<(\n              Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n              & { variant: (\n                Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            )> }\n          )> }\n        ), selectedGiftItems: Array<(\n          Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n          & { giftSelectionItem: (\n            Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n            & { variant: (\n              Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice'>\n              & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          ) }\n        )> }\n      )>>, selectedGifts?: Types.Maybe<Array<(\n        Pick<Types.SelectedGift, 'id' | 'status' | 'orderId' | 'multiplyBy' | 'giftBillingOption'>\n        & { giftSelection: (\n          Pick<Types.GiftSelection, 'id'>\n          & { giftSelectionItemGroups: Array<(\n            Pick<Types.GiftSelectionItemGroup, 'quantity'>\n            & { giftSelectionItems: Array<(\n              Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n              & { variant: (\n                Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'vatWholesalePrice'>\n                & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n              ) }\n            )> }\n          )> }\n        ), selectedGiftItems: Array<(\n          Pick<Types.SelectedGiftItem, 'quantity' | 'id'>\n          & { giftSelectionItem: (\n            Pick<Types.GiftSelectionItem, 'id' | 'quantity'>\n            & { variant: (\n              Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice'>\n              & { optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          ) }\n        )> }\n      )>>, requirements: Array<(\n        Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold'>\n        & { giftConditionItems: Array<(\n          Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold' | 'propratedPrice'>\n          & { variant: Pick<Types.Variant, 'id' | 'name' | 'netPrice'> }\n        )> }\n      )>, gifts: Array<(\n        Pick<Types.GiftSelection, 'id' | 'name' | 'description'>\n        & { giftSelectionItemGroups: Array<(\n          Pick<Types.GiftSelectionItemGroup, 'groupId' | 'itemCount' | 'quantity'>\n          & { giftSelectionItems: Array<(\n            Pick<Types.GiftSelectionItem, 'groupId' | 'id' | 'quantity' | 'totalValue'>\n            & { variant: (\n              Pick<Types.Variant, 'name' | 'id' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'volume'>\n              & { product: Pick<Types.Product, 'id'>, volumeUnit: Pick<Types.Unit, 'id' | 'code' | 'englishName'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n            ) }\n          )> }\n        )> }\n      )> }\n    )>>, order: Pick<Types.Order, 'id' | 'total' | 'status'>, variant: (\n      Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'netPrice'>\n      & { product: Pick<Types.Product, 'id'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n    ) }\n  ) };\n\nexport type GetCampaignDataByOrderItemQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\n\nexport type GetCampaignDataByOrderItemQuery = { orderItem: (\n    Pick<Types.OrderItem, 'id'>\n    & { noncombinableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.NoncombinableGiftCampaign, 'groupId'>\n      & { giftCampaignGroups?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'multiplyBy'>\n        & { gifts: Array<GiftFragment> }\n      )>> }\n    )>>, levelableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.LevelableGiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'multiplyBy'>\n      & { gifts: Array<GiftFragment>, giftCampaignChildren?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'multiplyBy'>\n        & { gifts: Array<GiftFragment> }\n      )>> }\n    )>>, giftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.GiftCampaign, 'id' | 'type' | 'applied' | 'campaignName' | 'description' | 'multiplyBy'>\n      & { gifts: Array<GiftFragment> }\n    )>> }\n  ) };\n\nexport type GetCampaignSelectedGiftsQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\n\nexport type GetCampaignSelectedGiftsQuery = { orderItem: (\n    Pick<Types.OrderItem, 'id'>\n    & { noncombinableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.NoncombinableGiftCampaign, 'groupId'>\n      & { giftCampaignGroups?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'totalRewardsInCart' | 'conditionCount'>\n        & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>> }\n      )>> }\n    )>>, levelableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.LevelableGiftCampaign, 'id' | 'applied' | 'conditionCount'>\n      & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, giftCampaignChildren?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied'>\n        & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>> }\n      )>> }\n    )>>, giftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.GiftCampaign, 'id' | 'applied' | 'totalRewardsInCart' | 'conditionCount'>\n      & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>> }\n    )>> }\n  ) };\n\nexport type GetOrderItemForCampaignsQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\n\nexport type GetOrderItemForCampaignsQuery = { orderItem: (\n    Pick<Types.OrderItem, 'id'>\n    & { noncombinableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.NoncombinableGiftCampaign, 'groupId'>\n      & { giftCampaignGroups?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'multiplyBy' | 'totalRewardsInCart' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'importableSameOrder' | 'conditionCount'>\n        & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, gifts: Array<GiftFragment> }\n      )>> }\n    )>>, levelableGiftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.LevelableGiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'multiplyBy' | 'totalRewardsInCart' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'importableSameOrder' | 'conditionCount'>\n      & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, gifts: Array<GiftFragment>, giftCampaignChildren?: Types.Maybe<Array<(\n        Pick<Types.GiftCampaign, 'id' | 'applied' | 'type' | 'campaignName' | 'description' | 'multiplyBy' | 'totalRewardsInCart' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'importableSameOrder' | 'conditionCount'>\n        & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, gifts: Array<GiftFragment> }\n      )>> }\n    )>>, giftCampaigns?: Types.Maybe<Array<(\n      Pick<Types.GiftCampaign, 'id' | 'type' | 'applied' | 'campaignName' | 'description' | 'multiplyBy' | 'totalRewardsInCart' | 'remainingRewardTimes' | 'remainingRewardTimesInCart' | 'importableSameOrder' | 'conditionCount'>\n      & { selectedGifts?: Types.Maybe<Array<SelectedGiftsFragment>>, selectedGiftsInCart?: Types.Maybe<Array<SelectedGiftsFragment>>, gifts: Array<GiftFragment> }\n    )>> }\n  ) };\n\nexport type GetOrderItemDrawerQueryVariables = Types.Exact<{\n  id: Types.Scalars['ID'];\n}>;\n\n\nexport type GetOrderItemDrawerQuery = { orderItem: (\n    Pick<Types.OrderItem, 'id' | 'quantity' | 'vatWholesalePrice' | 'totalPriceBeforeVat' | 'wholesalePrice' | 'vat' | 'totalPrice'>\n    & { discounts: Array<DiscountFragment>, variant: (\n      Pick<Types.Variant, 'id' | 'name' | 'available' | 'materialNumber' | 'netPrice'>\n      & { product: Pick<Types.Product, 'id'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n    ) }\n  ) };\n\nexport type RemoveOrderItemsMutationVariables = Types.Exact<{\n  input: Types.RemoveOrderItemsInput;\n  first?: Types.Maybe<Types.Scalars['Int']>;\n  after?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type RemoveOrderItemsMutation = { removeOrderItems?: Types.Maybe<(\n    Pick<Types.Order, 'id' | 'status' | 'total'>\n    & { orderItems?: Types.Maybe<(\n      Pick<Types.OrderItemConnection, 'totalCount'>\n      & { nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.OrderItem, 'id' | 'price' | 'quantity' | 'updatedAt' | 'createdAt' | 'vatWholesalePrice' | 'totalPrice' | 'firstGiftCampaignId' | 'firstLevelableCampaignId' | 'firstNoncombinableCampaignId' | 'anyImportableSameOrder' | 'ownCampaignTypeA' | 'hasAllGiftsSelected'>\n        & { userUpdater?: Types.Maybe<Pick<Types.User, 'id' | 'name' | 'phoneNumber' | 'email'>>, variant: (\n          Pick<Types.Variant, 'name' | 'id' | 'netPrice' | 'vatPrice' | 'campaignIds' | 'materialNumber' | 'defaultImageUrl' | 'vatWholesalePrice' | 'volume'>\n          & { discounts: Array<DiscountFragment>, product: Pick<Types.Product, 'id'>, volumeUnit: Pick<Types.Unit, 'code'>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>> }\n        ), discounts: Array<DiscountFragment> }\n      )>>>, pageInfo: Pick<Types.PageInfo, 'hasNextPage' | 'endCursor'> }\n    )> }\n  )> };\n\n\nexport const GetOrderItemDocument = gql`\n    query getOrderItem($id: ID!) {\n  orderItem(id: $id) {\n    id\n    quantity\n    vatWholesalePrice\n    totalPriceBeforeVat\n    wholesalePrice\n    vat\n    totalPrice\n    discounts {\n      ...discount\n    }\n    noncombinableGiftCampaigns {\n      groupId\n      giftCampaignGroups {\n        id\n        applied\n        type\n        campaignName\n        description\n        fromDate\n        toDate\n        multiplyBy\n        totalRewardsInCart\n        progressData {\n          ...progressData\n        }\n        remainingRewardTimes\n        remainingRewardTimesInCart\n        selectedGifts {\n          ...selectedGifts\n        }\n        selectedGiftsInCart {\n          ...selectedGifts\n        }\n        requirements {\n          ...requirement\n        }\n        level\n        gifts {\n          ...gift\n        }\n      }\n    }\n    levelableGiftCampaigns {\n      id\n      applied\n      type\n      campaignName\n      description\n      fromDate\n      toDate\n      multiplyBy\n      level\n      remainingRewardTimes\n      selectedGifts {\n        ...selectedGifts\n      }\n      gifts {\n        ...gift\n      }\n      requirements {\n        ...requirement\n      }\n      giftCampaignChildren {\n        id\n        applied\n        type\n        campaignName\n        description\n        fromDate\n        toDate\n        multiplyBy\n        level\n        remainingRewardTimes\n        selectedGifts {\n          ...selectedGifts\n        }\n        requirements {\n          ...requirement\n        }\n        gifts {\n          ...gift\n        }\n      }\n    }\n    giftCampaigns {\n      id\n      type\n      applied\n      campaignName\n      description\n      fromDate\n      toDate\n      progressData {\n        id\n        materialNumber\n        name\n        quantity\n        revenue\n      }\n      level\n      multiplyBy\n      totalRewardsInCart\n      remainingRewardTimesInCart\n      unconfirmedRewardTimesInCart\n      remainingRewardTimes\n      selectedGiftsInCart {\n        id\n        status\n        orderId\n        multiplyBy\n        giftSelection {\n          id\n          giftSelectionItemGroups {\n            quantity\n            giftSelectionItems {\n              id\n              quantity\n              variant {\n                name\n                id\n                netPrice\n                materialNumber\n                vatWholesalePrice\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n          }\n        }\n        selectedGiftItems {\n          giftSelectionItem {\n            id\n            quantity\n            variant {\n              name\n              id\n              netPrice\n              materialNumber\n              defaultImageUrl\n              vatWholesalePrice\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n          quantity\n          id\n        }\n        giftBillingOption\n      }\n      selectedGifts {\n        id\n        status\n        orderId\n        multiplyBy\n        giftSelection {\n          id\n          giftSelectionItemGroups {\n            quantity\n            giftSelectionItems {\n              id\n              quantity\n              variant {\n                name\n                id\n                netPrice\n                materialNumber\n                vatWholesalePrice\n                optionValues {\n                  id\n                  value\n                }\n              }\n            }\n          }\n        }\n        selectedGiftItems {\n          giftSelectionItem {\n            id\n            quantity\n            variant {\n              name\n              id\n              netPrice\n              materialNumber\n              defaultImageUrl\n              vatWholesalePrice\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n          quantity\n          id\n        }\n        giftBillingOption\n      }\n      requirements {\n        id\n        totalRevenueThreshold\n        totalQuantityThreshold\n        giftConditionItems {\n          id\n          revenueThreshold\n          quantityThreshold\n          propratedPrice\n          variant {\n            id\n            name\n            netPrice\n          }\n        }\n      }\n      gifts {\n        id\n        name\n        description\n        giftSelectionItemGroups {\n          groupId\n          itemCount\n          quantity\n          giftSelectionItems {\n            groupId\n            id\n            quantity\n            totalValue\n            variant {\n              name\n              id\n              materialNumber\n              defaultImageUrl\n              vatWholesalePrice\n              volume\n              product {\n                id\n              }\n              volumeUnit {\n                id\n                code\n                englishName\n              }\n              optionValues {\n                id\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n    order {\n      id\n      total\n      status\n    }\n    variant {\n      id\n      name\n      product {\n        id\n      }\n      materialNumber\n      netPrice\n      optionValues {\n        id\n        value\n      }\n    }\n  }\n}\n    ${DiscountFragmentDoc}\n${ProgressDataFragmentDoc}\n${SelectedGiftsFragmentDoc}\n${RequirementFragmentDoc}\n${GiftFragmentDoc}`;\n\n/**\n * __useGetOrderItemQuery__\n *\n * To run a query within a React component, call `useGetOrderItemQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderItemQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderItemQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetOrderItemQuery(baseOptions: Apollo.QueryHookOptions<GetOrderItemQuery, GetOrderItemQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOrderItemQuery, GetOrderItemQueryVariables>(GetOrderItemDocument, options);\n      }\nexport function useGetOrderItemLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderItemQuery, GetOrderItemQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOrderItemQuery, GetOrderItemQueryVariables>(GetOrderItemDocument, options);\n        }\nexport type GetOrderItemQueryHookResult = ReturnType<typeof useGetOrderItemQuery>;\nexport type GetOrderItemLazyQueryHookResult = ReturnType<typeof useGetOrderItemLazyQuery>;\nexport type GetOrderItemQueryResult = Apollo.QueryResult<GetOrderItemQuery, GetOrderItemQueryVariables>;\nexport const GetCampaignDataByOrderItemDocument = gql`\n    query getCampaignDataByOrderItem($id: ID!) {\n  orderItem(id: $id) {\n    id\n    noncombinableGiftCampaigns {\n      groupId\n      giftCampaignGroups {\n        id\n        applied\n        type\n        campaignName\n        description\n        multiplyBy\n        gifts {\n          ...gift\n        }\n      }\n    }\n    levelableGiftCampaigns {\n      id\n      applied\n      type\n      campaignName\n      description\n      multiplyBy\n      gifts {\n        ...gift\n      }\n      giftCampaignChildren {\n        id\n        applied\n        type\n        campaignName\n        description\n        multiplyBy\n        gifts {\n          ...gift\n        }\n      }\n    }\n    giftCampaigns {\n      id\n      type\n      applied\n      campaignName\n      description\n      multiplyBy\n      gifts {\n        ...gift\n      }\n    }\n  }\n}\n    ${GiftFragmentDoc}`;\n\n/**\n * __useGetCampaignDataByOrderItemQuery__\n *\n * To run a query within a React component, call `useGetCampaignDataByOrderItemQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCampaignDataByOrderItemQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCampaignDataByOrderItemQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCampaignDataByOrderItemQuery(baseOptions: Apollo.QueryHookOptions<GetCampaignDataByOrderItemQuery, GetCampaignDataByOrderItemQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCampaignDataByOrderItemQuery, GetCampaignDataByOrderItemQueryVariables>(GetCampaignDataByOrderItemDocument, options);\n      }\nexport function useGetCampaignDataByOrderItemLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCampaignDataByOrderItemQuery, GetCampaignDataByOrderItemQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCampaignDataByOrderItemQuery, GetCampaignDataByOrderItemQueryVariables>(GetCampaignDataByOrderItemDocument, options);\n        }\nexport type GetCampaignDataByOrderItemQueryHookResult = ReturnType<typeof useGetCampaignDataByOrderItemQuery>;\nexport type GetCampaignDataByOrderItemLazyQueryHookResult = ReturnType<typeof useGetCampaignDataByOrderItemLazyQuery>;\nexport type GetCampaignDataByOrderItemQueryResult = Apollo.QueryResult<GetCampaignDataByOrderItemQuery, GetCampaignDataByOrderItemQueryVariables>;\nexport const GetCampaignSelectedGiftsDocument = gql`\n    query getCampaignSelectedGifts($id: ID!) {\n  orderItem(id: $id) {\n    id\n    noncombinableGiftCampaigns {\n      groupId\n      giftCampaignGroups {\n        id\n        applied\n        totalRewardsInCart\n        conditionCount\n        selectedGifts {\n          ...selectedGifts\n        }\n        selectedGiftsInCart {\n          ...selectedGifts\n        }\n      }\n    }\n    levelableGiftCampaigns {\n      id\n      applied\n      conditionCount\n      selectedGifts {\n        ...selectedGifts\n      }\n      giftCampaignChildren {\n        id\n        applied\n        selectedGifts {\n          ...selectedGifts\n        }\n      }\n    }\n    giftCampaigns {\n      id\n      applied\n      totalRewardsInCart\n      conditionCount\n      selectedGifts {\n        ...selectedGifts\n      }\n      selectedGiftsInCart {\n        ...selectedGifts\n      }\n    }\n  }\n}\n    ${SelectedGiftsFragmentDoc}`;\n\n/**\n * __useGetCampaignSelectedGiftsQuery__\n *\n * To run a query within a React component, call `useGetCampaignSelectedGiftsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCampaignSelectedGiftsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCampaignSelectedGiftsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCampaignSelectedGiftsQuery(baseOptions: Apollo.QueryHookOptions<GetCampaignSelectedGiftsQuery, GetCampaignSelectedGiftsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCampaignSelectedGiftsQuery, GetCampaignSelectedGiftsQueryVariables>(GetCampaignSelectedGiftsDocument, options);\n      }\nexport function useGetCampaignSelectedGiftsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCampaignSelectedGiftsQuery, GetCampaignSelectedGiftsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCampaignSelectedGiftsQuery, GetCampaignSelectedGiftsQueryVariables>(GetCampaignSelectedGiftsDocument, options);\n        }\nexport type GetCampaignSelectedGiftsQueryHookResult = ReturnType<typeof useGetCampaignSelectedGiftsQuery>;\nexport type GetCampaignSelectedGiftsLazyQueryHookResult = ReturnType<typeof useGetCampaignSelectedGiftsLazyQuery>;\nexport type GetCampaignSelectedGiftsQueryResult = Apollo.QueryResult<GetCampaignSelectedGiftsQuery, GetCampaignSelectedGiftsQueryVariables>;\nexport const GetOrderItemForCampaignsDocument = gql`\n    query getOrderItemForCampaigns($id: ID!) {\n  orderItem(id: $id) {\n    id\n    noncombinableGiftCampaigns {\n      groupId\n      giftCampaignGroups {\n        id\n        applied\n        type\n        campaignName\n        description\n        multiplyBy\n        totalRewardsInCart\n        remainingRewardTimes\n        remainingRewardTimesInCart\n        importableSameOrder\n        conditionCount\n        selectedGifts {\n          ...selectedGifts\n        }\n        selectedGiftsInCart {\n          ...selectedGifts\n        }\n        gifts {\n          ...gift\n        }\n      }\n    }\n    levelableGiftCampaigns {\n      id\n      applied\n      type\n      campaignName\n      description\n      multiplyBy\n      totalRewardsInCart\n      remainingRewardTimes\n      remainingRewardTimesInCart\n      importableSameOrder\n      conditionCount\n      selectedGifts {\n        ...selectedGifts\n      }\n      selectedGiftsInCart {\n        ...selectedGifts\n      }\n      gifts {\n        ...gift\n      }\n      giftCampaignChildren {\n        id\n        applied\n        type\n        campaignName\n        description\n        multiplyBy\n        totalRewardsInCart\n        remainingRewardTimes\n        remainingRewardTimesInCart\n        importableSameOrder\n        conditionCount\n        selectedGifts {\n          ...selectedGifts\n        }\n        selectedGiftsInCart {\n          ...selectedGifts\n        }\n        gifts {\n          ...gift\n        }\n      }\n    }\n    giftCampaigns {\n      id\n      type\n      applied\n      campaignName\n      description\n      multiplyBy\n      totalRewardsInCart\n      remainingRewardTimes\n      remainingRewardTimesInCart\n      importableSameOrder\n      conditionCount\n      selectedGifts {\n        ...selectedGifts\n      }\n      selectedGiftsInCart {\n        ...selectedGifts\n      }\n      gifts {\n        ...gift\n      }\n    }\n  }\n}\n    ${SelectedGiftsFragmentDoc}\n${GiftFragmentDoc}`;\n\n/**\n * __useGetOrderItemForCampaignsQuery__\n *\n * To run a query within a React component, call `useGetOrderItemForCampaignsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderItemForCampaignsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderItemForCampaignsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetOrderItemForCampaignsQuery(baseOptions: Apollo.QueryHookOptions<GetOrderItemForCampaignsQuery, GetOrderItemForCampaignsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOrderItemForCampaignsQuery, GetOrderItemForCampaignsQueryVariables>(GetOrderItemForCampaignsDocument, options);\n      }\nexport function useGetOrderItemForCampaignsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderItemForCampaignsQuery, GetOrderItemForCampaignsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOrderItemForCampaignsQuery, GetOrderItemForCampaignsQueryVariables>(GetOrderItemForCampaignsDocument, options);\n        }\nexport type GetOrderItemForCampaignsQueryHookResult = ReturnType<typeof useGetOrderItemForCampaignsQuery>;\nexport type GetOrderItemForCampaignsLazyQueryHookResult = ReturnType<typeof useGetOrderItemForCampaignsLazyQuery>;\nexport type GetOrderItemForCampaignsQueryResult = Apollo.QueryResult<GetOrderItemForCampaignsQuery, GetOrderItemForCampaignsQueryVariables>;\nexport const GetOrderItemDrawerDocument = gql`\n    query getOrderItemDrawer($id: ID!) {\n  orderItem(id: $id) {\n    id\n    quantity\n    vatWholesalePrice\n    totalPriceBeforeVat\n    wholesalePrice\n    vat\n    totalPrice\n    discounts {\n      ...discount\n    }\n    variant {\n      id\n      name\n      available\n      product {\n        id\n      }\n      materialNumber\n      netPrice\n      optionValues {\n        id\n        value\n      }\n    }\n  }\n}\n    ${DiscountFragmentDoc}`;\n\n/**\n * __useGetOrderItemDrawerQuery__\n *\n * To run a query within a React component, call `useGetOrderItemDrawerQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderItemDrawerQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderItemDrawerQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetOrderItemDrawerQuery(baseOptions: Apollo.QueryHookOptions<GetOrderItemDrawerQuery, GetOrderItemDrawerQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOrderItemDrawerQuery, GetOrderItemDrawerQueryVariables>(GetOrderItemDrawerDocument, options);\n      }\nexport function useGetOrderItemDrawerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderItemDrawerQuery, GetOrderItemDrawerQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOrderItemDrawerQuery, GetOrderItemDrawerQueryVariables>(GetOrderItemDrawerDocument, options);\n        }\nexport type GetOrderItemDrawerQueryHookResult = ReturnType<typeof useGetOrderItemDrawerQuery>;\nexport type GetOrderItemDrawerLazyQueryHookResult = ReturnType<typeof useGetOrderItemDrawerLazyQuery>;\nexport type GetOrderItemDrawerQueryResult = Apollo.QueryResult<GetOrderItemDrawerQuery, GetOrderItemDrawerQueryVariables>;\nexport const RemoveOrderItemsDocument = gql`\n    mutation removeOrderItems($input: RemoveOrderItemsInput!, $first: Int, $after: String) {\n  removeOrderItems(input: $input) {\n    id\n    orderItems(first: $first, after: $after) {\n      nodes {\n        id\n        price\n        quantity\n        updatedAt\n        createdAt\n        vatWholesalePrice\n        totalPrice\n        firstGiftCampaignId\n        firstLevelableCampaignId\n        firstNoncombinableCampaignId\n        anyImportableSameOrder\n        ownCampaignTypeA\n        hasAllGiftsSelected\n        updatedAt\n        userUpdater {\n          id\n          name\n          phoneNumber\n          email\n        }\n        variant {\n          name\n          id\n          netPrice\n          vatPrice\n          campaignIds\n          discounts {\n            ...discount\n          }\n          materialNumber\n          defaultImageUrl\n          vatWholesalePrice\n          volume\n          product {\n            id\n          }\n          volumeUnit {\n            code\n          }\n          optionValues {\n            id\n            value\n          }\n        }\n        discounts {\n          ...discount\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n    status\n    total\n  }\n}\n    ${DiscountFragmentDoc}`;\nexport type RemoveOrderItemsMutationFn = Apollo.MutationFunction<RemoveOrderItemsMutation, RemoveOrderItemsMutationVariables>;\n\n/**\n * __useRemoveOrderItemsMutation__\n *\n * To run a mutation, you first call `useRemoveOrderItemsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveOrderItemsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeOrderItemsMutation, { data, loading, error }] = useRemoveOrderItemsMutation({\n *   variables: {\n *      input: // value for 'input'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useRemoveOrderItemsMutation(baseOptions?: Apollo.MutationHookOptions<RemoveOrderItemsMutation, RemoveOrderItemsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveOrderItemsMutation, RemoveOrderItemsMutationVariables>(RemoveOrderItemsDocument, options);\n      }\nexport type RemoveOrderItemsMutationHookResult = ReturnType<typeof useRemoveOrderItemsMutation>;\nexport type RemoveOrderItemsMutationResult = Apollo.MutationResult<RemoveOrderItemsMutation>;\nexport type RemoveOrderItemsMutationOptions = Apollo.BaseMutationOptions<RemoveOrderItemsMutation, RemoveOrderItemsMutationVariables>;","import * as Types from '../../graphql/types.generated';\n\nimport { gql } from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type RequirementFragment = (\n  Pick<Types.VariantGiftCondition, 'id' | 'totalRevenueThreshold' | 'totalQuantityThreshold' | 'totalGiftConditionItemsRevenueThreshold' | 'totalGiftConditionItemsQuantityThreshold'>\n  & { giftConditionItems: Array<(\n    Pick<Types.GiftConditionItem, 'id' | 'revenueThreshold' | 'quantityThreshold' | 'propratedPrice'>\n    & { variant: Pick<Types.Variant, 'id' | 'name' | 'materialNumber' | 'vatWholesalePrice'> }\n  )> }\n);\n\nexport const RequirementFragmentDoc = gql`\n    fragment requirement on VariantGiftCondition {\n  id\n  totalRevenueThreshold\n  totalQuantityThreshold\n  totalGiftConditionItemsRevenueThreshold\n  totalGiftConditionItemsQuantityThreshold\n  giftConditionItems {\n    id\n    revenueThreshold\n    quantityThreshold\n    propratedPrice\n    variant {\n      id\n      name\n      materialNumber\n      vatWholesalePrice\n    }\n  }\n}\n    `;","import * as Types from '../../graphql/types.generated';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: any;\n  /** An ISO 8601-encoded date */\n  ISO8601Date: any;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Address = {\n  addressType: Scalars['String'];\n  body: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  id: Scalars['ID'];\n  receiver?: Maybe<Scalars['String']>;\n  receiverPhoneNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Authentication = {\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type Balance = {\n  amount: Scalars['Int'];\n};\n\nexport type Banner = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Int']>;\n  position?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type Brand = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type BuildOrderItemsInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type CampaignPropratedPrice = {\n  id: Scalars['ID'];\n  propratedPrice: Scalars['Int'];\n};\n\nexport type CancelOrderInput = {\n  orderId: Scalars['ID'];\n  reasons: Array<Scalars['String']>;\n};\n\nexport type Category = {\n  children?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  imageUrl?: Maybe<Scalars['String']>;\n  isDeepestChild?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  parent?: Maybe<Category>;\n  products?: Maybe<ProductConnection>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\nexport type CategoryDiscount = {\n  appliedVariants?: Maybe<VariantConnection>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type CategoryDiscountAppliedVariantsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n  otp: Scalars['String'];\n};\n\nexport type ChangeUserStatusInput = {\n  selectedUserId: Scalars['ID'];\n  status: Scalars['String'];\n};\n\nexport type ChangeUserTypeInput = {\n  selectedUserId: Scalars['ID'];\n  userType: Scalars['String'];\n};\n\nexport type CheckoutGiftInput = {\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type CheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  estimateDeliveredAt: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type Country = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type CreatePasswordInput = {\n  userId: Scalars['ID'];\n  createPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type CreateShippingAddressInput = {\n  body: Scalars['String'];\n  receiver: Scalars['String'];\n  receiverPhoneNumber: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  sapId?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  userType: Scalars['String'];\n};\n\nexport type Customer = {\n  billingAddress?: Maybe<Address>;\n  createdAt: Scalars['ISO8601DateTime'];\n  emails: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  phoneNumbers?: Maybe<Array<Scalars['String']>>;\n  salesOrg?: Maybe<SalesOrg>;\n  sapId: Scalars['String'];\n  shippingAddresses: Array<Address>;\n  taxNumber?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  users?: Maybe<Array<User>>;\n};\n\nexport type DeleteSelectedGiftsInput = {\n  campaignIds: Array<Scalars['ID']>;\n};\n\nexport type Discount = {\n  discountType?: Maybe<Scalars['String']>;\n  discountValue?: Maybe<Scalars['Int']>;\n  vatDiscountValue?: Maybe<Scalars['Float']>;\n};\n\nexport type DiscountDetails = {\n  adjustment: Scalars['Float'];\n  applied: Scalars['Boolean'];\n  flatAmount?: Maybe<Scalars['Int']>;\n  fromDate: Scalars['ISO8601Date'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  percent?: Maybe<Scalars['Int']>;\n  requirements?: Maybe<Scalars['JSON']>;\n  sapCode?: Maybe<Scalars['String']>;\n  toDate: Scalars['ISO8601Date'];\n  type?: Maybe<Scalars['String']>;\n  vatAdjustment: Scalars['Float'];\n};\n\nexport type DispatchCheckoutInput = {\n  orderId: Scalars['ID'];\n  shippingAddressId: Scalars['ID'];\n  selectedGiftIds?: Maybe<Array<Scalars['ID']>>;\n  note?: Maybe<Scalars['String']>;\n  slocId?: Maybe<Scalars['ID']>;\n};\n\nexport type EmptyInput = {\n  emptyInput: Scalars['Boolean'];\n};\n\nexport type EstimateDetails = {\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dateArrival?: Maybe<Scalars['ISO8601Date']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  id: Scalars['ID'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  priority?: Maybe<Scalars['Int']>;\n  totalDayDispatch?: Maybe<Scalars['Int']>;\n  warehouseDelivery?: Maybe<Sloc>;\n};\n\nexport type EstimateTimeArrival = {\n  estimateTimeArrivalItems: Array<EstimateTimeArrivalItem>;\n  id: Scalars['ID'];\n  warehouseReceipt: Sloc;\n};\n\nexport type EstimateTimeArrivalItem = {\n  availableInBranch?: Maybe<Scalars['Boolean']>;\n  availableInWarehouse?: Maybe<Scalars['Boolean']>;\n  availableQuantity?: Maybe<Scalars['Int']>;\n  dispatchedQuantity?: Maybe<Scalars['Int']>;\n  estimateDetails: Array<EstimateDetails>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  giftQuantity: Scalars['Int'];\n  notEnoughInventory?: Maybe<Scalars['Boolean']>;\n  orderQuantity: Scalars['Int'];\n  variant: Variant;\n};\n\nexport type ExecutionOrder = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrderGiftItems: Array<ExecutionOrderGiftItem>;\n  executionOrderItems: Array<ExecutionOrderItem>;\n  id: Scalars['ID'];\n  order: Order;\n  orderIdInWarehouse?: Maybe<Scalars['ID']>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ExecutionOrderGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  status: Scalars['String'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\nexport type ExecutionOrderItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  executionOrder: ExecutionOrder;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  status: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  typeACampaignId?: Maybe<Scalars['ID']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\nexport type ExtraDataFile = {\n  createdAt: Scalars['ISO8601DateTime'];\n  fileUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type ForgotPasswordInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type GiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for GiftCampaign. */\nexport type GiftCampaignConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftCampaignEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftCampaign>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftCampaignEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftCampaign>;\n};\n\nexport type GiftCampaignProgress = {\n  confirmedQuantity?: Maybe<Scalars['Int']>;\n  confirmedRevenue?: Maybe<Scalars['BigInt']>;\n  confirmedRewards?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\nexport type GiftCampaignProgressItem = {\n  id: Scalars['ID'];\n  materialNumber?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  revenue: Scalars['BigInt'];\n};\n\nexport type GiftConditionItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  propratedPrice?: Maybe<Scalars['BigInt']>;\n  quantityThreshold?: Maybe<Scalars['Int']>;\n  revenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  variantId: Scalars['ID'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for GiftConditionItem. */\nexport type GiftConditionItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GiftConditionItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GiftConditionItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GiftConditionItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GiftConditionItem>;\n};\n\nexport type GiftSelection = {\n  description?: Maybe<Scalars['String']>;\n  giftSelectionItemGroups: Array<GiftSelectionItemGroup>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GiftSelectionItem = {\n  groupId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  occupiedQuantity?: Maybe<Scalars['Int']>;\n  quantity?: Maybe<Scalars['Int']>;\n  quantityInWarehouse?: Maybe<Scalars['Int']>;\n  totalValue?: Maybe<Scalars['Int']>;\n  variant: Variant;\n};\n\n\nexport type GiftSelectionItemOccupiedQuantityArgs = {\n  orderId?: Maybe<Scalars['ID']>;\n};\n\nexport type GiftSelectionItemGroup = {\n  giftSelectionItems: Array<GiftSelectionItem>;\n  groupId: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport type GroupedDiscount = {\n  applicableDiscounts: Array<Discount>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type ItemCategory = {\n  codeItemCategory?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftItemCategory?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  orderType?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type LevelableGiftCampaign = {\n  applied: Scalars['Boolean'];\n  campaignName: Scalars['String'];\n  canCheckOutRewards: Scalars['Int'];\n  checkedOutRewards: Scalars['Int'];\n  conditionCount: Scalars['Int'];\n  confirmedData?: Maybe<GiftCampaignProgress>;\n  confirmedProgressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  description: Scalars['String'];\n  duplicatedFrom?: Maybe<Scalars['ID']>;\n  fromDate: Scalars['ISO8601Date'];\n  giftCampaignChildren?: Maybe<Array<GiftCampaign>>;\n  giftInvoiceType?: Maybe<Scalars['Int']>;\n  gifts: Array<GiftSelection>;\n  id: Scalars['ID'];\n  importableSameOrder: Scalars['Boolean'];\n  level?: Maybe<Scalars['Int']>;\n  multiplyBy: Scalars['Int'];\n  multiplyByTypeB?: Maybe<Scalars['Int']>;\n  noncombinable: Scalars['Boolean'];\n  noncombinableParentId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  progressData?: Maybe<Array<GiftCampaignProgressItem>>;\n  progressDataWithoutCart?: Maybe<Array<GiftCampaignProgressItem>>;\n  remainingRewardTimes: Scalars['Int'];\n  remainingRewardTimesInCart?: Maybe<Scalars['Int']>;\n  requirements: Array<VariantGiftCondition>;\n  selectedGift?: Maybe<SelectedGift>;\n  selectedGifts?: Maybe<Array<SelectedGift>>;\n  selectedGiftsInCart?: Maybe<Array<SelectedGift>>;\n  selectedGiftsTypeBInWarehouse?: Maybe<Array<SelectedGift>>;\n  toDate: Scalars['ISO8601Date'];\n  totalConfirmedRewards: Scalars['Int'];\n  totalRewardsInCart?: Maybe<Scalars['Int']>;\n  totalRewardsWithCart: Scalars['Int'];\n  totalRewardsWithoutCart?: Maybe<Scalars['Int']>;\n  totalUnconfirmedRewards: Scalars['Int'];\n  type: Scalars['String'];\n  typeDescription: Scalars['String'];\n  unconfirmedRewardTimesInCart?: Maybe<Scalars['Int']>;\n};\n\nexport type ListNotification = {\n  /** filter argument can be 'unread', 'read', '' == all */\n  notifications: NotificationConnection;\n  unreadCount: Scalars['Int'];\n};\n\n\nexport type ListNotificationNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type LoginInput = {\n  phoneNumber: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MarkNotificationsAsReadInput = {\n  readNotificationIds: Array<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  buildOrderItemsInWarehouse?: Maybe<Order>;\n  cancelOrder?: Maybe<Order>;\n  changePassword?: Maybe<User>;\n  changeUserStatus?: Maybe<User>;\n  changeUserType?: Maybe<User>;\n  checkout?: Maybe<Order>;\n  checkoutGift?: Maybe<Order>;\n  checkoutWithInternalDispatch?: Maybe<Array<Order>>;\n  createPassword?: Maybe<User>;\n  createShippingAddress?: Maybe<Address>;\n  createUser?: Maybe<User>;\n  deleteSelectedGifts?: Maybe<Array<SelectedGift>>;\n  forgotPassword?: Maybe<User>;\n  login?: Maybe<Authentication>;\n  markAllNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  markNotificationsAsRead?: Maybe<Scalars['JSON']>;\n  register?: Maybe<User>;\n  removeOrderItems?: Maybe<Order>;\n  removeSelectedGiftsTypeBInWarehouse?: Maybe<RemoveSelectedGiftsTypeBInWarehousePayload>;\n  removeUser?: Maybe<RemoveUserMutationPayload>;\n  reorder?: Maybe<Order>;\n  resendOtp?: Maybe<User>;\n  resetPassword?: Maybe<User>;\n  saveProduct?: Maybe<Product>;\n  searchConversion?: Maybe<Scalars['JSON']>;\n  selectGift?: Maybe<SelectedGift>;\n  selectGiftItem?: Maybe<SelectedGiftItem>;\n  unsaveProduct?: Maybe<Product>;\n  updateCart?: Maybe<Order>;\n  updateExecutionOrderItem?: Maybe<Array<ExecutionOrder>>;\n  updateOrderItem?: Maybe<OrderItem>;\n  verifyPhoneLogin?: Maybe<Authentication>;\n  verifyPhoneRegistration?: Maybe<User>;\n  webpushTokens?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type MutationBuildOrderItemsInWarehouseArgs = {\n  input: BuildOrderItemsInWarehouseInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  input: CancelOrderInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\nexport type MutationChangeUserTypeArgs = {\n  input: ChangeUserTypeInput;\n};\n\n\nexport type MutationCheckoutArgs = {\n  input: CheckoutInput;\n};\n\n\nexport type MutationCheckoutGiftArgs = {\n  input: CheckoutGiftInput;\n};\n\n\nexport type MutationCheckoutWithInternalDispatchArgs = {\n  input: DispatchCheckoutInput;\n};\n\n\nexport type MutationCreatePasswordArgs = {\n  input: CreatePasswordInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  input: CreateShippingAddressInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteSelectedGiftsArgs = {\n  input: DeleteSelectedGiftsInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMarkAllNotificationsAsReadArgs = {\n  input: EmptyInput;\n};\n\n\nexport type MutationMarkNotificationsAsReadArgs = {\n  input: MarkNotificationsAsReadInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegistrationInput;\n};\n\n\nexport type MutationRemoveOrderItemsArgs = {\n  input: RemoveOrderItemsInput;\n};\n\n\nexport type MutationRemoveSelectedGiftsTypeBInWarehouseArgs = {\n  input: RemoveSelectGiftsTypeBInWarehouseInput;\n};\n\n\nexport type MutationRemoveUserArgs = {\n  input: RemoveUserInput;\n};\n\n\nexport type MutationReorderArgs = {\n  input: ReorderInput;\n};\n\n\nexport type MutationResendOtpArgs = {\n  input: ResendOtpInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  input: SaveProductInput;\n};\n\n\nexport type MutationSearchConversionArgs = {\n  input: SearchConversionInput;\n};\n\n\nexport type MutationSelectGiftArgs = {\n  input: SelectGiftInput;\n};\n\n\nexport type MutationSelectGiftItemArgs = {\n  input: SelectGiftItemInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  input: UnsaveProductInput;\n};\n\n\nexport type MutationUpdateCartArgs = {\n  input: UpdateCartInput;\n};\n\n\nexport type MutationUpdateExecutionOrderItemArgs = {\n  input: UpdateExecutionOrderItemInput;\n};\n\n\nexport type MutationUpdateOrderItemArgs = {\n  input: UpdateOrderItemInput;\n};\n\n\nexport type MutationVerifyPhoneLoginArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationVerifyPhoneRegistrationArgs = {\n  input: VerifyPhoneNumberInput;\n};\n\n\nexport type MutationWebpushTokensArgs = {\n  input: WebpushTokenInput;\n};\n\nexport type NoncombinableGiftCampaign = {\n  giftCampaignGroups?: Maybe<Array<GiftCampaign>>;\n  groupId: Scalars['ID'];\n};\n\nexport type Notification = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message: Scalars['String'];\n  params: Scalars['JSON'];\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type OptionType = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  optionValues: Array<OptionValue>;\n  optionValuesByCategory: Array<OptionValue>;\n  optionValuesByProduct: Array<OptionValue>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n\nexport type OptionTypeOptionValuesByCategoryArgs = {\n  categoryId: Scalars['ID'];\n};\n\n\nexport type OptionTypeOptionValuesByProductArgs = {\n  productId: Scalars['ID'];\n};\n\nexport type OptionValue = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  optionType: OptionType;\n  updatedAt: Scalars['ISO8601DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Order = {\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  checkedOutAt?: Maybe<Scalars['ISO8601DateTime']>;\n  completedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  customer: Customer;\n  dispatchedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eoTotal?: Maybe<Scalars['BigInt']>;\n  eoTotalQuantity?: Maybe<Scalars['Int']>;\n  estimateDeliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  eta?: Maybe<Scalars['ISO8601Date']>;\n  fromExportGift?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isReturn: Scalars['Boolean'];\n  itemCount: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  orderGifts?: Maybe<OrderGiftConnection>;\n  orderItems?: Maybe<OrderItemConnection>;\n  orderType?: Maybe<Scalars['String']>;\n  returnedGifts?: Maybe<ReturnedGiftConnection>;\n  returnedItems?: Maybe<ReturnedItemConnection>;\n  salesOrg: SalesOrg;\n  sapId?: Maybe<Scalars['ID']>;\n  shippingAddress?: Maybe<Address>;\n  slocAddress?: Maybe<Sloc>;\n  status: Scalars['String'];\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  user: User;\n  userCheckout?: Maybe<User>;\n};\n\n\nexport type OrderOrderGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderOrderItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  timeOrder?: Maybe<Scalars['String']>;\n};\n\n\nexport type OrderReturnedGiftsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type OrderReturnedItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\nexport type OrderGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  order: Order;\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n};\n\n/** The connection type for OrderGift. */\nexport type OrderGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderGift>;\n};\n\nexport type OrderItem = {\n  adjustmentTotal: Scalars['Float'];\n  anyImportableSameOrder: Scalars['Boolean'];\n  createdAt: Scalars['ISO8601DateTime'];\n  discounts: Array<DiscountDetails>;\n  firstGiftCampaignId?: Maybe<Scalars['ID']>;\n  firstLevelableCampaignId?: Maybe<Scalars['ID']>;\n  firstNoncombinableCampaignId?: Maybe<Scalars['ID']>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  hasAllGiftsSelected: Scalars['Boolean'];\n  id: Scalars['ID'];\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  order: Order;\n  ownCampaignTypeA: Scalars['Boolean'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  totalPriceBeforeVat: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userCreator?: Maybe<User>;\n  userUpdater?: Maybe<User>;\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatRetailPrice: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for OrderItem. */\nexport type OrderItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrderItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrderItem>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PaymentHistory = {\n  amount: Scalars['Int'];\n  documentDate: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n};\n\n/** The connection type for PaymentHistory. */\nexport type PaymentHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentHistoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PaymentHistory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentHistoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PaymentHistory>;\n};\n\nexport type Product = {\n  baseUnit: Unit;\n  brand?: Maybe<Brand>;\n  categories?: Maybe<Array<Category>>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultVariant: Variant;\n  filterVariant?: Maybe<Variant>;\n  id: Scalars['ID'];\n  isSaved?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  optionTypes: Array<OptionType>;\n  promotedVariant?: Maybe<Variant>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  variants: Array<Variant>;\n};\n\n\nexport type ProductFilterVariantArgs = {\n  attributes?: Maybe<Array<Scalars['String']>>;\n  priceGte?: Maybe<Scalars['Int']>;\n  priceLte?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Product. */\nexport type ProductConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProductEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Product>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProductEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Product>;\n};\n\nexport type Query = {\n  /** Return list of gift campaigns for User with or without in_progress */\n  allGiftCampaigns: GiftCampaignConnection;\n  /** Return list of products that are on sale */\n  allPromotedProducts: ProductConnection;\n  /** Return list of noncombinable gift campaigns in same group */\n  allSameGroupNcCampaigns: GiftCampaignConnection;\n  /** Return list of applied variant of discount */\n  appliedVariantsDiscount: VariantConnection;\n  /** Return list of banner */\n  banners: Array<Banner>;\n  /** Return details of a gift campaign with respect to the provided order */\n  campaignDetailsByOrder: GiftCampaign;\n  /** query gift campaigns by  list of Ids */\n  campaigns: Array<GiftCampaign>;\n  /** Return cart data for the current user */\n  cart: Order;\n  /** list all gift campaigns applied to the current cart */\n  cartGiftCampaigns: Array<GiftCampaign>;\n  /** Return the top level product categories */\n  categories: Array<Category>;\n  /** Return a specific product category */\n  category: Category;\n  /** Return list of discounts for a category */\n  categoryDiscounts: Array<CategoryDiscount>;\n  /** Return list of gift campaigns for a category */\n  categoryGiftCampaigns: GiftCampaignConnection;\n  /** Return list of condition items for a group condition */\n  conditionItems: GiftConditionItemConnection;\n  /** Return balance of the current user's customer */\n  currentBalance?: Maybe<Balance>;\n  /** Return estimate time arrival for items in order */\n  estimateTimeArrival: EstimateTimeArrival;\n  /** Return list of execution order of order */\n  executionOrders: Array<ExecutionOrder>;\n  /** Return all Campaign Group for type B gift campaigns */\n  getCampaignGroups: Array<ItemCategory>;\n  /** Return all Category's option types */\n  getOptionTypes: Array<OptionType>;\n  /** Details of a particular gift campaign */\n  giftCampaignDetails: GiftCampaign;\n  /** Return list of orders who concerns with the gift campaigns (only applied for type B) */\n  giftCampaignOrders: OrderConnection;\n  /** Return list of discount */\n  groupedDiscounts: Array<GroupedDiscount>;\n  /** Return inventory of all gift selection items */\n  inventoryByGiftSelection: GiftSelection;\n  /** Return all available brands of system */\n  listBrand: Array<Brand>;\n  /** Return all available colors of system */\n  listColor: Array<OptionValue>;\n  /** Return notifications of current users */\n  listNotifications: ListNotification;\n  /**  Return all Option Type's option values */\n  listOptionValues: Array<OptionValue>;\n  /** Return list of noncombinable gift campaigns in the same group with respect to an order */\n  ncCampaignsByGroupInOrder: GiftCampaignConnection;\n  /** Return notifications from current user with ids */\n  notifications: Array<Notification>;\n  /** Return data for a particular order by id */\n  order: Order;\n  /** Return order item by id */\n  orderItem: OrderItem;\n  /** List all orders of the current user, with optional search/sort query */\n  orders: OrderConnection;\n  /** Return all payment history of the current user's customer */\n  paymentHistories?: Maybe<PaymentHistoryConnection>;\n  /** Returns a list of products purchased within 90 days ago in sales org */\n  popularProducts: ProductConnection;\n  /** Return a specific product by id */\n  product: Product;\n  /** Return list promotions of product */\n  productPromotions?: Maybe<Array<GiftCampaign>>;\n  /** Return list of type B gift campaigns in progress and the progress does not count in Cart */\n  progressGiftCampaigns: GiftCampaignConnection;\n  /** Return products that are on sale */\n  promotedProducts: Array<Product>;\n  /** Returns a list of favorite products or purchased within 90 days ago */\n  recommendedProducts: ProductConnection;\n  /** List all products related to the current variant */\n  relatedProducts: ProductConnection;\n  /** Return the current user's saved products */\n  savedProducts: ProductConnection;\n  selectedGiftsTypeBInWarehouse: Array<SelectedGift>;\n  /** Return all shipping addresses of the current user's customer */\n  shippingAddresses?: Maybe<Array<Address>>;\n  /** List all products of the same categories as the input product */\n  similarProducts: ProductConnection;\n  /** Return all sloc addresses of sales org of the current user's customer */\n  slocAddresses?: Maybe<Array<Sloc>>;\n  trip: TmsTrip;\n  /** Return list of trips of order */\n  trips: Array<TmsTrip>;\n  /** Get user's information */\n  userProfile?: Maybe<User>;\n  /** Return all users of the current customer */\n  users: Array<User>;\n  /** Return a Product's variant matching the chosen option values */\n  variant?: Maybe<Variant>;\n  /** Return the variant with the chosen ID */\n  variantById?: Maybe<Variant>;\n  /** Return a product's variant matching the chosen option values */\n  variantByOptionValues: Variant;\n  /** Return list of gift campaigns for a variant */\n  variantCampaigns: Array<GiftCampaign>;\n  /** List all variants whose name, category, or brand match the query */\n  variantSearch: VariantSearch;\n  /** list all type b gift campaigns applied to the order that items is available in warehouse */\n  warehouseTypeBCampaigns: Array<GiftCampaign>;\n};\n\n\nexport type QueryAllGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  inProgress: Scalars['Boolean'];\n};\n\n\nexport type QueryAllPromotedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAllSameGroupNcCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAppliedVariantsDiscountArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  discountProgramId: Scalars['ID'];\n  discountType?: Maybe<Scalars['String']>;\n  discountValue: Scalars['Int'];\n};\n\n\nexport type QueryCampaignDetailsByOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryCampaignsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryCartGiftCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCategoryDiscountsArgs = {\n  categoryId: Scalars['ID'];\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCategoryGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  categoryId: Scalars['ID'];\n};\n\n\nexport type QueryConditionItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEstimateTimeArrivalArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryExecutionOrdersArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryGetOptionTypesArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignDetailsArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryGiftCampaignOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n\nexport type QueryInventoryByGiftSelectionArgs = {\n  giftSelectionId: Scalars['ID'];\n};\n\n\nexport type QueryListOptionValuesArgs = {\n  id: Scalars['ID'];\n  categoryId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryNcCampaignsByGroupInOrderArgs = {\n  campaignId: Scalars['ID'];\n  orderId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  sapId?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentHistoriesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPopularProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductPromotionsArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type QueryProgressGiftCampaignsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<Scalars['Boolean']>;\n  codeItemCategory?: Maybe<Scalars['String']>;\n  validDate?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryRecommendedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRelatedProductsArgs = {\n  variantId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySavedProductsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QuerySelectedGiftsTypeBInWarehouseArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QuerySimilarProductsArgs = {\n  productId: Scalars['ID'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTripsArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type QueryVariantArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n};\n\n\nexport type QueryVariantByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryVariantByOptionValuesArgs = {\n  productId: Scalars['ID'];\n  optionValueIds: Array<Scalars['ID']>;\n  newOptionValueId: Scalars['ID'];\n};\n\n\nexport type QueryVariantCampaignsArgs = {\n  variantId: Scalars['ID'];\n};\n\n\nexport type QueryVariantSearchArgs = {\n  query: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  optionValueIds?: Maybe<Array<Scalars['ID']>>;\n  brandIds?: Maybe<Array<Scalars['ID']>>;\n  categoryIds?: Maybe<Array<Scalars['ID']>>;\n  attributes?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type QueryWarehouseTypeBCampaignsArgs = {\n  filter?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RegistrationInput = {\n  phoneNumber: Scalars['String'];\n};\n\nexport type RemoveOrderItemsInput = {\n  orderItemIds: Array<Scalars['ID']>;\n};\n\nexport type RemoveSelectGiftsTypeBInWarehouseInput = {\n  orderId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveSelectedGiftsTypeBInWarehouse */\nexport type RemoveSelectedGiftsTypeBInWarehousePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type RemoveUserInput = {\n  selectedUserId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUserMutation */\nexport type RemoveUserMutationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n};\n\nexport type ReorderInput = {\n  orderId: Scalars['ID'];\n};\n\nexport type ResendOtpInput = {\n  userId: Scalars['ID'];\n};\n\nexport type ResetPasswordInput = {\n  userId: Scalars['ID'];\n  resetPasswordToken: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type ReturnedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftInvoiceType?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  salesDeal: Scalars['String'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedGift. */\nexport type ReturnedGiftConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedGiftEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedGift>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedGiftEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedGift>;\n};\n\nexport type ReturnedItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  itemCategory: Scalars['String'];\n  order: Order;\n  original?: Maybe<OrderItem>;\n  originalCheckoutTime?: Maybe<Scalars['ISO8601DateTime']>;\n  price: Scalars['BigInt'];\n  progressRevertedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  progressUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  quantity: Scalars['Int'];\n  retailPrice: Scalars['BigInt'];\n  totalPrice: Scalars['BigInt'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  variant: Variant;\n  vat: Scalars['BigInt'];\n  vatWholesalePrice: Scalars['BigInt'];\n  wholesalePrice: Scalars['BigInt'];\n};\n\n/** The connection type for ReturnedItem. */\nexport type ReturnedItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReturnedItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReturnedItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReturnedItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReturnedItem>;\n};\n\nexport type SalesOrg = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sapCode?: Maybe<Scalars['String']>;\n};\n\nexport type SaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type SearchConversionInput = {\n  convertableType: Scalars['String'];\n  convertableId: Scalars['ID'];\n  searchId: Scalars['ID'];\n  source?: Maybe<Scalars['String']>;\n};\n\nexport type SelectGiftInput = {\n  orderId?: Maybe<Scalars['ID']>;\n  giftSelectionId: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  bWithOrder?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SelectGiftItemInput = {\n  selectedGiftId: Scalars['ID'];\n  giftSelectionItemId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type SelectedGift = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftBillingOption: Scalars['String'];\n  giftSelection: GiftSelection;\n  id: Scalars['ID'];\n  multiplyBy: Scalars['Int'];\n  orderId?: Maybe<Scalars['ID']>;\n  selectedGiftItems: Array<SelectedGiftItem>;\n  status: Scalars['String'];\n  totalValue?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId?: Maybe<Scalars['ID']>;\n  variantGiftId: Scalars['ID'];\n};\n\nexport type SelectedGiftItem = {\n  createdAt: Scalars['ISO8601DateTime'];\n  giftSelectionItem: GiftSelectionItem;\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  quantityBilled: Scalars['Int'];\n  selectedGift: SelectedGift;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Sloc = {\n  address?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  sapCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type Subscription = {\n  newUserNotification?: Maybe<Notification>;\n  orderItemWasUpdated?: Maybe<OrderItem>;\n};\n\nexport type TmsCargoDetail = {\n  deliveryAddress: Scalars['String'];\n  id: Scalars['ID'];\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigInt'];\n  quantity: Scalars['Int'];\n  receiptAddress: Scalars['String'];\n};\n\n/** The connection type for TmsCargoDetail. */\nexport type TmsCargoDetailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TmsCargoDetailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TmsCargoDetail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TmsCargoDetailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TmsCargoDetail>;\n};\n\nexport type TmsTrip = {\n  arrivedDeliveryAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  arrivedReceiptAddressAt?: Maybe<Scalars['ISO8601DateTime']>;\n  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;\n  contactFullname: Scalars['String'];\n  contactMobilephone: Scalars['String'];\n  deliverySuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  deliveryUnsuccessfulAt?: Maybe<Scalars['ISO8601DateTime']>;\n  driverName: Scalars['String'];\n  id: Scalars['ID'];\n  itemCount: Scalars['Int'];\n  items?: Maybe<TmsCargoDetailConnection>;\n  locations: Array<TmsTripLocation>;\n  startedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  status?: Maybe<Scalars['String']>;\n  total: Scalars['BigInt'];\n  totalQuantity: Scalars['Int'];\n  tripId: Scalars['String'];\n  vehicleCode: Scalars['String'];\n};\n\n\nexport type TmsTripItemsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type TmsTripLocation = {\n  address: Scalars['String'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  tmsUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  tripStatus: Scalars['String'];\n};\n\nexport type Unit = {\n  code: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  englishName: Scalars['String'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vietnameseName: Scalars['String'];\n};\n\nexport type UnsaveProductInput = {\n  productId: Scalars['ID'];\n};\n\nexport type UpdateCartInput = {\n  variantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type UpdateExecutionOrderItemInput = {\n  executionOrderItemIds: Array<Scalars['ID']>;\n};\n\nexport type UpdateOrderItemInput = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport type User = {\n  active: Scalars['Boolean'];\n  createPasswordToken?: Maybe<Scalars['String']>;\n  customer: Customer;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  userType?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Variant = {\n  available?: Maybe<Scalars['Boolean']>;\n  campaignIds?: Maybe<Array<Scalars['ID']>>;\n  campaignPropratedPrices?: Maybe<Array<CampaignPropratedPrice>>;\n  countryOfOrigin?: Maybe<Country>;\n  createdAt: Scalars['ISO8601DateTime'];\n  defaultImageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  discount?: Maybe<DiscountDetails>;\n  discounts: Array<DiscountDetails>;\n  extraDataFiles?: Maybe<Array<ExtraDataFile>>;\n  firstOrderDiscount?: Maybe<DiscountDetails>;\n  giftCampaigns?: Maybe<Array<GiftCampaign>>;\n  grossWeight?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  imageUrls: Array<Scalars['String']>;\n  levelableGiftCampaigns?: Maybe<Array<LevelableGiftCampaign>>;\n  maintenanceDetails?: Maybe<Scalars['String']>;\n  materialNumber: Scalars['String'];\n  name: Scalars['String'];\n  netPrice?: Maybe<Scalars['Int']>;\n  netWeight?: Maybe<Scalars['Int']>;\n  noncombinableGiftCampaigns?: Maybe<Array<NoncombinableGiftCampaign>>;\n  optionValues: Array<OptionValue>;\n  product: Product;\n  regionalNames: Array<Scalars['String']>;\n  specifications?: Maybe<Scalars['JSON']>;\n  unavailableOptionValues: Scalars['JSON'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  vatPrice?: Maybe<Scalars['Int']>;\n  vatWholesalePrice?: Maybe<Scalars['Int']>;\n  volume?: Maybe<Scalars['Int']>;\n  volumeUnit: Unit;\n  warranty?: Maybe<Warranty>;\n  weightUnit: Unit;\n  wholesalePrice?: Maybe<Scalars['Int']>;\n};\n\n\nexport type VariantDiscountArgs = {\n  discountProgramId?: Maybe<Scalars['ID']>;\n};\n\n/** The connection type for Variant. */\nexport type VariantConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VariantEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Variant>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VariantEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Variant>;\n};\n\nexport type VariantGiftCondition = {\n  conditionItemSummary: Array<GiftConditionItem>;\n  createdAt: Scalars['ISO8601DateTime'];\n  giftConditionItemCount?: Maybe<Scalars['Int']>;\n  giftConditionItems: Array<GiftConditionItem>;\n  id: Scalars['ID'];\n  totalGiftConditionItemsQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalGiftConditionItemsRevenueThreshold?: Maybe<Scalars['Int']>;\n  totalQuantityThreshold?: Maybe<Scalars['Int']>;\n  totalRevenueThreshold?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\nexport type VariantSearch = {\n  results: VariantConnection;\n  searchId: Scalars['ID'];\n};\n\n\nexport type VariantSearchResultsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type VerifyPhoneNumberInput = {\n  userId: Scalars['ID'];\n  otp: Scalars['String'];\n};\n\nexport type Warranty = {\n  exchangePolicy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  warrantyPolicy?: Maybe<Scalars['String']>;\n};\n\nexport type WebpushTokenInput = {\n  endpoint: Scalars['String'];\n  keysP256dh: Scalars['String'];\n  keysAuth: Scalars['String'];\n  oldKeysP256dh?: Maybe<Scalars['String']>;\n  device?: Maybe<Scalars['String']>;\n};\n\nexport type GetVariantSearchQueryVariables = Types.Exact<{\n  query: Types.Scalars['String'];\n  optionValueIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  brandIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  categoryIds?: Types.Maybe<Array<Types.Scalars['ID']> | Types.Scalars['ID']>;\n  attributes?: Types.Maybe<Array<Types.Scalars['String']> | Types.Scalars['String']>;\n  first?: Types.Maybe<Types.Scalars['Int']>;\n  after?: Types.Maybe<Types.Scalars['String']>;\n  source: Types.Scalars['String'];\n}>;\n\n\nexport type GetVariantSearchQuery = { variantSearch: (\n    Pick<Types.VariantSearch, 'searchId'>\n    & { results: (\n      Pick<Types.VariantConnection, 'totalCount'>\n      & { pageInfo: Pick<Types.PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'>, nodes?: Types.Maybe<Array<Types.Maybe<(\n        Pick<Types.Variant, 'id' | 'name' | 'available' | 'materialNumber' | 'netPrice' | 'vatPrice' | 'vatWholesalePrice' | 'defaultImageUrl' | 'imageUrls' | 'campaignIds'>\n        & { firstOrderDiscount?: Types.Maybe<Pick<Types.DiscountDetails, 'name' | 'applied' | 'percent' | 'flatAmount' | 'adjustment' | 'type' | 'requirements'>>, discounts: Array<Pick<Types.DiscountDetails, 'name' | 'applied' | 'percent' | 'flatAmount' | 'adjustment' | 'type' | 'requirements'>>, optionValues: Array<Pick<Types.OptionValue, 'id' | 'value'>>, product: (\n          Pick<Types.Product, 'id'>\n          & { brand?: Types.Maybe<Pick<Types.Brand, 'name'>> }\n        ) }\n      )>>> }\n    ) }\n  ) };\n\nexport type SearchConversionMutationVariables = Types.Exact<{\n  searchId: Types.Scalars['ID'];\n  source?: Types.Maybe<Types.Scalars['String']>;\n  convertableId: Types.Scalars['ID'];\n  convertableType: Types.Scalars['String'];\n}>;\n\n\nexport type SearchConversionMutation = Pick<Types.Mutation, 'searchConversion'>;\n\n\nexport const GetVariantSearchDocument = gql`\n    query GetVariantSearch($query: String!, $optionValueIds: [ID!], $brandIds: [ID!], $categoryIds: [ID!], $attributes: [String!], $first: Int, $after: String, $source: String!) {\n  variantSearch(\n    query: $query\n    optionValueIds: $optionValueIds\n    brandIds: $brandIds\n    attributes: $attributes\n    categoryIds: $categoryIds\n    source: $source\n  ) {\n    searchId\n    results(first: $first, after: $after) {\n      totalCount\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        endCursor\n        startCursor\n      }\n      nodes {\n        id\n        name\n        available\n        materialNumber\n        netPrice\n        vatPrice\n        vatWholesalePrice\n        defaultImageUrl\n        imageUrls\n        campaignIds\n        firstOrderDiscount {\n          name\n          applied\n          percent\n          flatAmount\n          adjustment\n          type\n          requirements\n        }\n        discounts {\n          name\n          applied\n          percent\n          flatAmount\n          adjustment\n          type\n          requirements\n        }\n        optionValues {\n          id\n          value\n        }\n        product {\n          id\n          brand {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetVariantSearchQuery__\n *\n * To run a query within a React component, call `useGetVariantSearchQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetVariantSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetVariantSearchQuery({\n *   variables: {\n *      query: // value for 'query'\n *      optionValueIds: // value for 'optionValueIds'\n *      brandIds: // value for 'brandIds'\n *      categoryIds: // value for 'categoryIds'\n *      attributes: // value for 'attributes'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      source: // value for 'source'\n *   },\n * });\n */\nexport function useGetVariantSearchQuery(baseOptions: Apollo.QueryHookOptions<GetVariantSearchQuery, GetVariantSearchQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetVariantSearchQuery, GetVariantSearchQueryVariables>(GetVariantSearchDocument, options);\n      }\nexport function useGetVariantSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetVariantSearchQuery, GetVariantSearchQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetVariantSearchQuery, GetVariantSearchQueryVariables>(GetVariantSearchDocument, options);\n        }\nexport type GetVariantSearchQueryHookResult = ReturnType<typeof useGetVariantSearchQuery>;\nexport type GetVariantSearchLazyQueryHookResult = ReturnType<typeof useGetVariantSearchLazyQuery>;\nexport type GetVariantSearchQueryResult = Apollo.QueryResult<GetVariantSearchQuery, GetVariantSearchQueryVariables>;\nexport const SearchConversionDocument = gql`\n    mutation searchConversion($searchId: ID!, $source: String, $convertableId: ID!, $convertableType: String!) {\n  searchConversion(\n    input: {convertableId: $convertableId, convertableType: $convertableType, searchId: $searchId, source: $source}\n  )\n}\n    `;\nexport type SearchConversionMutationFn = Apollo.MutationFunction<SearchConversionMutation, SearchConversionMutationVariables>;\n\n/**\n * __useSearchConversionMutation__\n *\n * To run a mutation, you first call `useSearchConversionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSearchConversionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [searchConversionMutation, { data, loading, error }] = useSearchConversionMutation({\n *   variables: {\n *      searchId: // value for 'searchId'\n *      source: // value for 'source'\n *      convertableId: // value for 'convertableId'\n *      convertableType: // value for 'convertableType'\n *   },\n * });\n */\nexport function useSearchConversionMutation(baseOptions?: Apollo.MutationHookOptions<SearchConversionMutation, SearchConversionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SearchConversionMutation, SearchConversionMutationVariables>(SearchConversionDocument, options);\n      }\nexport type SearchConversionMutationHookResult = ReturnType<typeof useSearchConversionMutation>;\nexport type SearchConversionMutationResult = Apollo.MutationResult<SearchConversionMutation>;\nexport type SearchConversionMutationOptions = Apollo.BaseMutationOptions<SearchConversionMutation, SearchConversionMutationVariables>;","import React, { useMemo } from 'react';\nimport { ApolloError, QueryLazyOptions } from '@apollo/client';\nimport deepmerge from 'deepmerge';\nimport { ITEM_PER_PAGE } from '@utils/constants';\n\nimport { useGetVariantSearchLazyQuery, GetVariantSearchQuery } from './search.gql.generated';\nimport { Exact, Maybe } from '@graphql/types.generated';\nimport { message } from 'antd';\n\ntype Params = {\n  after?: string;\n  first?: number;\n  query?: string;\n  optionValueIds?: string[];\n  brandIds?: string[];\n  categoryIds?: string[];\n  attributes?: string[];\n};\n\ntype SearchContextType = {\n  data?: GetVariantSearchQuery;\n  loading: boolean;\n  error?: ApolloError;\n  fetchVariantSearch: (\n    options?: QueryLazyOptions<\n      Exact<{\n        query: string;\n        first?: Maybe<number>;\n        after?: Maybe<string>;\n        optionValueIds?: Maybe<string | string[]>;\n        brandIds?: Maybe<string | string[]>;\n        categoryIds?: Maybe<string | string[]>;\n        attributes?: Maybe<string | string[]>;\n        source: string;\n      }>\n    >,\n  ) => void;\n  handleFetchMoreVariantSearch: (params: Params) => void;\n};\n\ntype SearchControllerProps = {\n  children: React.ReactNode;\n};\n\nconst SearchContext = React.createContext<SearchContextType>({\n  loading: false,\n  handleFetchMoreVariantSearch: () => null,\n  fetchVariantSearch: () => null,\n});\n\nexport const SearchController = ({ children }: SearchControllerProps) => {\n  const [fetchVariantSearch, { loading, data, fetchMore }] = useGetVariantSearchLazyQuery({\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const handleFetchMoreVariantSearch = React.useCallback(\n    (params: Params = {}) => {\n      try {\n        fetchMore?.({\n          variables: {\n            query: params.query || '',\n            first: ITEM_PER_PAGE,\n            ...params,\n          },\n          updateQuery: (\n            prev: GetVariantSearchQuery,\n            {\n              fetchMoreResult,\n            }: {\n              fetchMoreResult?: GetVariantSearchQuery;\n            },\n          ): GetVariantSearchQuery => {\n            if (!fetchMoreResult?.variantSearch) {\n              return prev;\n            }\n            return deepmerge(prev, fetchMoreResult);\n          },\n        });\n      } catch (error: any) {\n        message.error(error?.message);\n      }\n    },\n    [fetchMore],\n  );\n\n  const context = useMemo(\n    () => ({\n      data,\n      loading,\n      fetchVariantSearch,\n      handleFetchMoreVariantSearch,\n    }),\n    [data, loading],\n  );\n\n  return (\n    <SearchContext.Provider value={context}>\n      {typeof children === 'function' ? children(context) : children}\n    </SearchContext.Provider>\n  );\n};\n\nexport function useSearch() {\n  return React.useContext(SearchContext);\n}\n","import Icon from '@ant-design/icons';\nimport React from 'react';\n\nconst DotsVerticalSvg = (props: React.HTMLAttributes<SVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" {...props}>\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n    />\n  </svg>\n);\n\nexport const DotsVerticalIcon = ({ className, ...props }: React.ComponentProps<typeof Icon>) => (\n  <Icon component={() => <DotsVerticalSvg className={className} />} {...props} />\n);\n","import React from 'react';\n\nconst InclinedBell = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 112 112\">\n      <rect\n        width=\"18.98\"\n        height=\"18.98\"\n        x=\"34.96\"\n        y=\"82\"\n        fill=\"#F88C62\"\n        rx=\"9.49\"\n        transform=\"rotate(-15 44.445 91.471)\"\n      />\n      <circle cx=\"43.01\" cy=\"26.27\" r=\"6.85\" fill=\"#7a7d81\" />\n      <path fill=\"#bcc0c4\" d=\"M75.28 43.44a26.72 26.72 0 10-51.62 13.83L30 81l51.62-13.87z\" />\n      <path fill=\"#bcc0c4\" d=\"M90.78 75.64L26.33 92.9l3.22-13.63 51.62-13.83 9.61 10.2z\" />\n      <rect\n        width=\"66.91\"\n        height=\"8.88\"\n        x=\"25.35\"\n        y=\"80.75\"\n        fill=\"#bcc0c4\"\n        rx=\"4.44\"\n        transform=\"rotate(-15 58.793 85.207)\"\n      />\n    </svg>\n  );\n};\n\nexport default InclinedBell;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { Menu, Button, Dropdown, Spin } from 'antd';\nimport { MenuOutlined, CaretRightFilled } from '@ant-design/icons';\nimport Link from 'next/link';\n\nimport { GetCategoriesQuery, useGetCategoriesLazyQuery, getCategoryIconById } from '@hooks/category';\nimport useWindowSize, { Size } from '@hooks/useWindowSize';\nimport { toBreakpointNumber, MD, XL } from '@utils/mediaQuery';\nimport { MAX_MENU_WIDTH, MENU_PADDING, MIN_MENU_WIDTH } from './utils';\n\nimport s from './index.module.less';\n\ntype CategoryItem = GetCategoriesQuery['categories'][0];\n\ntype HoverItem = {\n  key: React.Key;\n  hover: boolean;\n};\n\nexport type HoverEventHandler = (info: HoverItem) => void;\n\ntype MenuOverlayItem = {\n  category: CategoryItem;\n  onHover: (info: HoverItem, category: CategoryItem) => void;\n  onItemHover?: HoverEventHandler;\n};\n\nconst MenuOverlayItem = ({ category, onHover, onItemHover: _onItemHover, ...props }: MenuOverlayItem) => {\n  const Icon = getCategoryIconById(category.id);\n  const hasChildren = category.children && category.children.length > 0;\n\n  const onItemHover = (event: { key: React.Key }) => {\n    const info = {\n      key: event.key,\n      hover: true,\n    };\n    onHover(info, category);\n    _onItemHover?.(info);\n  };\n\n  return (\n    <Menu.Item className={s.menuItem} onMouseEnter={onItemHover} icon={<Icon className={s.menuIcon} />} {...props}>\n      <Link href={`/categories/${category.id}`} passHref>\n        <a>\n          <span className={s.menuItemTitle}>{category.name}</span>\n          <span\n            role=\"img\"\n            aria-label=\"caret-right\"\n            className=\"anticon anticon-caret-right ant-menu-submenu-expand-icon\"\n          >\n            {hasChildren && <CaretRightFilled />}\n          </span>\n        </a>\n      </Link>\n    </Menu.Item>\n  );\n};\n\ntype MenuOverlayProps = { visible: boolean; buttonRef: React.RefObject<HTMLButtonElement> };\n\nconst MenuOverlay = ({ visible, buttonRef }: MenuOverlayProps) => {\n  const [fetchCategories, { loading, data }] = useGetCategoriesLazyQuery();\n  const size: Size = useWindowSize();\n\n  // Filter out, \"Smart devices\" with id 185\n  const filteredCategories = data?.categories.filter(cat => cat.id !== '185');\n\n  const [hoveredCategory, setHoveredCategory] = useState<CategoryItem | null>(null);\n\n  const handleHover = ({ hover }: HoverItem, category: CategoryItem) => {\n    if (hover) {\n      setHoveredCategory(category);\n    }\n  };\n\n  const getMode = () => {\n    if (!size.width || size.width <= toBreakpointNumber(MD)) return 'horizontal';\n    return 'vertical';\n  };\n\n  const getRootStyles = () => {\n    if (!hoveredCategory) return {};\n    const width =\n      size.width && size.width >= toBreakpointNumber(XL) ? toBreakpointNumber(XL) : (size.width || 0) - MENU_PADDING;\n    return { width };\n  };\n\n  const getMenuStyles = () => {\n    if (!buttonRef.current) return { width: MAX_MENU_WIDTH };\n\n    let width = buttonRef.current.offsetWidth;\n    if (buttonRef.current.offsetWidth <= MIN_MENU_WIDTH) {\n      width = (size.width || 0) - MENU_PADDING;\n    }\n    return { width };\n  };\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  useEffect(() => {\n    if (!visible) {\n      setHoveredCategory(null);\n    }\n  }, [visible]);\n\n  const rootStyles = getRootStyles();\n  const menuStyles = getMenuStyles();\n  const mode = getMode();\n\n  return (\n    <div className={s.root} style={rootStyles}>\n      <Menu className={s.menuRoot} style={menuStyles} mode={mode}>\n        {loading ? (\n          <div className={s.loading}>\n            <Spin />\n          </div>\n        ) : (\n          filteredCategories?.map(category => (\n            <MenuOverlayItem onHover={handleHover} key={category.id} category={category} />\n          ))\n        )}\n      </Menu>\n      {hoveredCategory && (\n        <div\n          className={s.subMenuRoot}\n          onMouseOver={() => handleHover({ hover: true, key: hoveredCategory.id }, hoveredCategory)}\n        >\n          <div className={s.subMenuLink}>\n            {hoveredCategory.children?.map(subCategory => (\n              <div className={s.categoryItem} key={subCategory.id}>\n                <Link href={`/categories/${subCategory.id}`} passHref>\n                  <a>\n                    <p className={s.categoryItemTitle}>{subCategory.name}</p>\n                  </a>\n                </Link>\n                <div className={s.categoryItemType}>\n                  {subCategory.children?.map(_subCategory => (\n                    <Link href={`/categories/${_subCategory.id}`} passHref key={_subCategory.id}>\n                      <a>\n                        <span className={s.subCategoryName}>{_subCategory.name}</span>\n                      </a>\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst CategoryMenu = () => {\n  const [visible, setVisible] = useState(false);\n  const buttonRef = useRef(null);\n\n  return (\n    <Dropdown\n      overlay={<MenuOverlay visible={visible} buttonRef={buttonRef} />}\n      onVisibleChange={setVisible}\n      trigger={['hover', 'click']}\n    >\n      <Button ref={buttonRef} block size=\"large\" type=\"primary\" icon={<MenuOutlined />} className={s.categoryButton}>\n        Danh mục\n      </Button>\n    </Dropdown>\n  );\n};\n\nexport default CategoryMenu;\n","import { useState, useEffect } from 'react';\n\n// Define general type for useWindowSize hook, which includes width and height\nexport interface Size {\n  width?: number;\n  height?: number;\n}\n\nexport default function useWindowSize(): Size {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<Size>({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n","export const MAX_MENU_WIDTH = 270;\nexport const MIN_MENU_WIDTH = 150;\nexport const MENU_PADDING = 50;\n","import React from 'react';\nimport { Input } from 'antd';\nimport classnames from 'classnames';\n\nimport SearchResult from './SearchResult';\n\nimport useSearchBar from './useSearchBar';\nimport s from './index.module.less';\n\nconst { Search } = Input;\n\nconst Overlay = ({ onClose }: { onClose: () => void }) => <div onClick={onClose} className={s.overlay} />;\n\nconst SearchBar = () => {\n  const { searchRef, showResult, value, loading, data, setShowResult, handleFocus, handleChange, handleSearch } =\n    useSearchBar();\n\n  return (\n    <>\n      <div className={classnames(s.root, showResult && s.zIndexHigh)}>\n        <Search\n          value={value}\n          defaultValue={value}\n          onChange={handleChange}\n          onSearch={handleSearch}\n          onFocus={handleFocus}\n          ref={searchRef}\n          placeholder=\"Tìm tên sản phẩm hoặc mã hàng\"\n          enterButton\n          size=\"large\"\n          allowClear\n          className={s.searchInput}\n        />\n        {showResult && (\n          <SearchResult\n            loading={loading}\n            variants={data?.variantSearch?.results.nodes || []}\n            searchId={data?.variantSearch?.searchId}\n          />\n        )}\n      </div>\n      {showResult && (\n        <Overlay\n          onClose={() => {\n            setShowResult(false);\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport Link from 'next/link';\nimport { Badge, Row, Col } from 'antd';\nimport { ShoppingCartOutlined } from '@ant-design/icons';\nimport get from 'lodash/get';\n\nimport CategoryMenu from '@components/CatergoryMenu';\nimport { useAuth } from '@context/AuthContext';\nimport SearchBar from '@components/SearchBar';\n\nimport { useCartData } from '@hooks/cart';\nimport { isBrowser } from '@utils/isBrowser';\n\nimport s from './Global.module.less';\n\nconst CategoryHeader = () => {\n  const { isLoggedIn } = useAuth();\n  const { data } = useCartData();\n  const totalCartItems = get(data, 'cart.orderItems.totalCount', 0);\n\n  const layouts = {\n    category: {\n      xs: 4,\n      sm: 3,\n      md: 6,\n      lg: 6,\n      xl: 6,\n    },\n    search: {\n      xs: isLoggedIn ? 18 : 20,\n      sm: isLoggedIn ? 19 : 21,\n      md: isLoggedIn ? 14 : 18,\n      lg: 14,\n      xl: 14,\n    },\n    cart: {\n      xs: isLoggedIn ? 2 : 0,\n      sm: isLoggedIn ? 2 : 0,\n      md: isLoggedIn ? 4 : 0,\n      lg: 4,\n      xl: 4,\n    },\n  };\n\n  if (!isBrowser) return null;\n\n  return (\n    <div className={s.categoryHeader}>\n      <div className={s.container}>\n        <Row gutter={{ xs: 8, sm: 8, md: 24, lg: 24, xl: 24 }}>\n          <Col {...layouts.category}>\n            <CategoryMenu />\n          </Col>\n          <Col {...layouts.search} className={s.searchBar}>\n            <SearchBar />\n          </Col>\n          <Col {...layouts.cart}>\n            {isLoggedIn && (\n              <Link href=\"/cart\" passHref>\n                <div className={s.cart} data-test=\"cart-icon\">\n                  <Badge className={s.badge} size=\"default\" count={totalCartItems}>\n                    <ShoppingCartOutlined style={{ width: 32, height: 32, fontSize: 32 }} />\n                  </Badge>\n                  {totalCartItems > 0 ? <span>{totalCartItems} sản phẩm</span> : ''}\n                </div>\n              </Link>\n            )}\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryHeader;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\nimport Image from 'next/image';\n\nimport TopNavHeader from '@components/TopNavHeader';\nimport CategoryHeader from '@components/GlobalHeader/CategoryHeader';\nimport { CartController } from '@hooks/cart';\n\nimport s from './index.module.less';\n\nconst MainHeader = dynamic(() => import('@components/GlobalHeader/MainHeader'), {\n  ssr: false,\n});\n\nconst Header = () => (\n  <TopNavHeader className={s.topNavHeader}>\n    <div className={s.decoratingTriangleOne}>\n      <Image src=\"/images/header-triangle-1.png\" width=\"136\" height=\"192\" />\n    </div>\n    <div className={s.decoratingTriangleTwo}>\n      <Image src=\"/images/header-triangle-2.png\" width=\"137\" height=\"52\" />\n    </div>\n    <div className={s.decoratingTriangleThree}>\n      <Image src=\"/images/header-triangle-3.png\" width=\"180\" height=\"54\" />\n    </div>\n    <div className={s.decoratingTriangleFour}>\n      <Image src=\"/images/header-triangle-4.png\" width=\"94\" height=\"176\" />\n    </div>\n    <div className={s.headerContainer}>\n      <MainHeader />\n      <CartController>\n        <CategoryHeader />\n      </CartController>\n    </div>\n  </TopNavHeader>\n);\n\nexport default Header;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\nimport Image from 'next/image';\n\nimport TopNavHeader from '@components/TopNavHeader';\nimport CategoryHeader from '@components/GlobalHeader/CategoryHeader';\nimport { CartController } from '@hooks/cart';\nimport { getFestival } from '@utils/datetime';\n\nimport s from './index.module.less';\n\nconst MainHeader = dynamic(() => import('@components/GlobalHeader/MainHeader'), {\n  ssr: false,\n});\n\n// TODO: common header for festival theme\nconst HeaderChrismas = () => (\n  <TopNavHeader festival={getFestival()} className={s.topNavHeader}>\n    <div className={s.decoratingTriangleOne}>\n      <Image src=\"/images/header-chrismas-1.svg\" width=\"182\" height=\"159\" />\n    </div>\n    <div className={s.decoratingTriangleTwo}>\n      <Image src=\"/images/header-chrismas-2.png\" width=\"802\" height=\"120\" />\n    </div>\n    <div className={s.decoratingTriangleFour}>\n      <Image src=\"/images/header-chrismas-3.svg\" width=\"156\" height=\"220\" />\n    </div>\n    <div className={s.headerContainer}>\n      <MainHeader />\n      <CartController>\n        <CategoryHeader />\n      </CartController>\n    </div>\n  </TopNavHeader>\n);\n\nexport default HeaderChrismas;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport TopNavHeader from '@components/TopNavHeader';\nimport CategoryHeader from '@components/GlobalHeader/CategoryHeader';\nimport { CartController } from '@hooks/cart';\nimport { getFestival } from '@utils/datetime';\n\nimport s from './index.module.less';\n\nconst MainHeader = dynamic(() => import('@components/GlobalHeader/MainHeader'), {\n  ssr: false,\n});\n\nconst HeaderChrismas = () => (\n  <TopNavHeader festival={getFestival()} className={s.topNavHeader}>\n    <div className={s.headerContainer}>\n      <MainHeader />\n      <CartController>\n        <CategoryHeader />\n      </CartController>\n    </div>\n  </TopNavHeader>\n);\n\nexport default HeaderChrismas;\n","import React from 'react';\nimport { Button, Badge, Tooltip } from 'antd';\nimport { TagOutlined } from '@ant-design/icons';\nimport { useRouter } from 'next/router';\nimport classnames from 'classnames';\nimport Link from 'next/link';\nimport { useAuth } from '@context/AuthContext';\n\nimport style from './index.module.less';\n\nfunction GiftsBtnNavigation() {\n  const { isLoggedIn } = useAuth();\n  const router = useRouter();\n\n  // TODO: count valule in Badge should be the number of qualified giftCampaigns\n  // we'll need socket for this one\n  return isLoggedIn && !router.pathname.includes('account/campaign') ? (\n    <section className={classnames([style.container, router.pathname.includes('/cart') && style.containerCartRoute])}>\n      <Tooltip title=\"Đủ điều kiện đạt quà tặng mới\" placement=\"topRight\">\n        <Badge count={null} className={style.badge}>\n          <Link href=\"/account/campaign\" passHref>\n            <Button icon={<TagOutlined />} shape=\"circle\" type=\"primary\" size=\"large\" />\n          </Link>\n        </Badge>\n      </Tooltip>\n    </section>\n  ) : null;\n}\n\nexport default GiftsBtnNavigation;\n","import APIEndpoints from './APIEndpoints';\nimport { tryParse } from './formatter';\nimport { isBrowser } from './isBrowser';\n\nconst checkStatus = (response: Response) => {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  // TODO: Improve handle error\n  const error = new Error('Something wrong!');\n  throw error;\n};\n\nexport function request(endpoint: string, options: RequestInit = {}) {\n  const defaultOptions = {\n    Accept: 'application/json',\n  };\n  const newOptions: RequestInit = { ...defaultOptions, ...options };\n  if (newOptions.method === 'POST' || newOptions.method === 'PUT' || newOptions.method === 'DELETE') {\n    if (!(newOptions.body instanceof FormData)) {\n      newOptions.headers = {\n        'Content-Type': 'application/json; charset=utf-8',\n        ...newOptions.headers,\n      };\n      newOptions.body = JSON.stringify(newOptions.body);\n    }\n  }\n\n  const auth = isBrowser ? localStorage.getItem('auth') : null;\n  if (auth) {\n    const authObj = tryParse(auth);\n    newOptions.headers = {\n      ...newOptions.headers,\n      authorization: `Bearer ${authObj?.token}`,\n    };\n  }\n\n  const url = APIEndpoints.REST_URL + endpoint;\n\n  return fetch(url, newOptions)\n    .then(checkStatus)\n    .then(response => {\n      // DELETE and 204 do not return data by default\n      // using .json will report an error.\n      if (newOptions.method === 'DELETE' || response.status === 204) {\n        return response.text();\n      }\n      return response.json();\n    });\n}\n","import { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { memo, useCallback, useEffect, useState } from 'react';\nimport { Select, Typography, Modal, message } from 'antd';\nimport dayjs from 'dayjs';\nimport cx from 'classnames';\n\nimport { useAuth } from '@context/AuthContext';\nimport { request } from '@utils/request';\nimport { isBrowser } from '@utils/isBrowser';\nimport useCurrentUser from '@hooks/useCurrentUser';\nimport usePersistedState from '@hooks/usePersistedState';\n\nimport s from './index.module.less';\n\nconst { Option } = Select;\nconst { Paragraph } = Typography;\nconst { confirm } = Modal;\n\ninterface Customer {\n  id: string;\n  name: string;\n  user_to_login: number;\n  latest_order_at?: string;\n  addresses?: string[];\n}\n\nfunction SaleAdminBanner() {\n  const { isLoggedIn } = useAuth();\n  const { id: currentUserId } = useCurrentUser();\n  const [bypassBy] = usePersistedState('bypassBy', null);\n\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [selectedCustomer, setSelectedCustomer] = useState(currentUserId);\n  const isAdminLoggin = bypassBy === 'admin';\n\n  useEffect(() => {\n    async function handleFetchCustomer() {\n      try {\n        const response = await request('/admin/managed_customers', {\n          method: 'GET',\n        });\n        setCustomers(response);\n        setSelectedCustomer(currentUserId);\n      } catch (e) {\n        console.error(e);\n        setCustomers([]);\n      }\n    }\n    if (isBrowser && isAdminLoggin) {\n      handleFetchCustomer();\n    }\n  }, []);\n\n  const showConfirm = useCallback(\n    (newSelectedCustomer: string) => {\n      const customer = customers.find(customer => String(customer.user_to_login) === newSelectedCustomer);\n\n      confirm({\n        title: 'Xác nhận',\n        icon: <ExclamationCircleOutlined />,\n        content: `Bạn sẽ chuyển sang tài khoản của ${customer?.name}`,\n        cancelText: 'Huỷ',\n        okText: 'Đồng ý',\n        async onOk() {\n          try {\n            if (isBrowser && customer) {\n              window.location.href = `/admin/login_as_user?user_id=${customer.user_to_login}`;\n            }\n          } catch (e: any) {\n            message.error((e as Error).message);\n          }\n        },\n        onCancel() {\n          setSelectedCustomer(currentUserId);\n        },\n      });\n    },\n    [selectedCustomer, customers],\n  );\n\n  const handleSelectCustomer = useCallback(\n    (newSelectedCustomer: string) => {\n      setSelectedCustomer(newSelectedCustomer);\n      showConfirm(newSelectedCustomer);\n    },\n    [showConfirm],\n  );\n\n  if (!isLoggedIn || !isAdminLoggin || customers.length === 0) return null;\n\n  const currentCustomer = customers.find(customer => String(customer.user_to_login) === selectedCustomer);\n\n  return (\n    <div className={s.root}>\n      {currentCustomer && (\n        <>\n          <div className={s.title}>Bạn đang đăng nhập bằng tài khoản của khách hàng: </div>\n          <div className={s.companyName}>{currentCustomer.name}</div>\n          <div className={s.companyInfo}>\n            <div>Mã khách hàng: {currentCustomer.id}</div>\n            <div>Địa chỉ giao hàng: {(currentCustomer.addresses || [''])[0]}</div>\n            {currentCustomer.latest_order_at && (\n              <div className={s.lastOrder}>\n                Lần đặt đơn hàng gần nhất: {dayjs(currentCustomer.latest_order_at).format('DD/MM/YYYY - HH:mm')}{' '}\n              </div>\n            )}\n          </div>\n        </>\n      )}\n      <div className={s.space}>\n        <div className={s.selectLabel}>Chọn tài khoản để đăng nhập:</div>\n        <div>\n          <Select\n            placeholder=\"Khách hàng\"\n            className={s.select}\n            size=\"large\"\n            value={selectedCustomer ? String(selectedCustomer) : selectedCustomer}\n            onChange={handleSelectCustomer}\n          >\n            {customers.map(customer => (\n              <Option\n                value={String(customer.user_to_login)}\n                key={customer.id}\n                disabled={!customer.user_to_login}\n                className={cx(!customer.user_to_login && s.optionDisabled)}\n              >\n                <Paragraph className={s.customer}>\n                  <span className={s.customerName}>{customer.name}</span>\n                  <br />\n                  <span className={s.customerCode}>Mã khách hàng: {customer.id}</span>\n                </Paragraph>\n              </Option>\n            ))}\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(SaleAdminBanner);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport Head from 'next/head';\n\nimport Header from '@layouts/Header';\nimport HeaderChrismas from '@layouts/HeaderChrismas';\nimport HeaderTet from '@layouts/HeaderTet';\nimport Footer from '@layouts/Footer';\nimport { getFestival } from '@utils/datetime';\nimport GiftsBtnNavigation from '@components/GiftsBtnNavigation';\nimport SaleAdminBanner from '@components/SaleAdminBanner';\n\nimport s from './index.module.less';\nimport { BasicLayoutProps } from './type';\n\nconst { Content } = Layout;\n\nfunction renderHeader({ chrismas, tet }: { chrismas?: boolean; tet?: boolean }) {\n  if (chrismas) return <HeaderChrismas />;\n  if (tet) return <HeaderTet />;\n\n  return <Header />;\n}\n\nconst BasicLayout = ({ title = 'This is the default title', children }: BasicLayoutProps) => {\n  const chrismas = getFestival() === 'chrismas';\n  const tet = getFestival() === 'tet';\n\n  return (\n    <div>\n      <Head>\n        <title>{title}</title>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      <Layout className={s.root}>\n        {renderHeader({ chrismas, tet })}\n        <div className={s.container}>\n          <SaleAdminBanner />\n        </div>\n        <GiftsBtnNavigation />\n        <Content>{children}</Content>\n        <Footer festival={getFestival()} />\n      </Layout>\n    </div>\n  );\n};\n\nexport default BasicLayout;\n","import Link from 'next/link';\nimport { HomeOutlined, AppstoreOutlined, SearchOutlined, ThunderboltOutlined, UserOutlined } from '@ant-design/icons';\nimport { useRouter } from 'next/router';\nimport cn from 'classnames';\n\nimport * as s from './index.module.less';\n\nconst links = [\n  {\n    icon: HomeOutlined,\n    label: 'Trang chủ',\n    href: '/',\n  },\n  {\n    icon: AppstoreOutlined,\n    label: 'Danh mục',\n    href: '/categories',\n  },\n  {\n    icon: ThunderboltOutlined,\n    label: 'Đặt hàng',\n    href: '/instantdeal',\n  },\n  {\n    icon: SearchOutlined,\n    label: 'Tìm kiếm',\n    href: '/search',\n  },\n  {\n    icon: UserOutlined,\n    label: 'Tài khoản',\n    href: '/account/navigator',\n  },\n];\n\nexport default function BottomNavigator() {\n  const router = useRouter();\n\n  return (\n    <div className={s.root}>\n      {links.map(({ icon: Icon, ...link }) => (\n        <Link href={link.href} passHref key={link.label}>\n          <a className={cn(s.buttonNavigator, link.href === router.pathname && s.active)}>\n            <div className={s.icon}>\n              <Icon />\n            </div>\n            <span>{link.label}</span>\n          </a>\n        </Link>\n      ))}\n    </div>\n  );\n}\n","import React, { memo } from 'react';\nimport { Layout } from 'antd';\nimport Head from 'next/head';\nimport cn from 'classnames';\n\nimport MobileHeader from '@layouts/Header/Mobile';\nimport MobileBottomNavigator from '@components/Mobile/BottomNavigator';\nimport { CartController } from '@hooks/cart';\n\nimport type { MobileBasicLayoutProps } from '../type';\nimport s from './index.module.less';\n\nconst { Content } = Layout;\n\nconst MobileBasicLayout = memo(\n  ({\n    title = 'This is the default title',\n    children,\n    showBottomNavigator,\n    showBackButton,\n    backButtonTitle,\n    backButtonLink,\n    pageTitle,\n    hideCart,\n    className,\n  }: MobileBasicLayoutProps) => {\n    return (\n      <div>\n        <Head>\n          <title>{title}</title>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n        </Head>\n        <Layout className={s.root}>\n          {/* TODO: CartController should be in _app.tsx */}\n          <CartController>\n            <MobileHeader\n              pageTitle={pageTitle}\n              backButtonTitle={backButtonTitle}\n              backButtonLink={backButtonLink}\n              showBackButton={showBackButton}\n              hideCart={hideCart}\n            />\n          </CartController>\n          <Content className={cn(s.content, className)}>{children}</Content>\n          {showBottomNavigator && <MobileBottomNavigator />}\n        </Layout>\n      </div>\n    );\n  },\n);\n\nexport default MobileBasicLayout;\n","import React, { memo } from 'react';\n\nimport { useAppLayout } from '@context/LayoutContext';\n\nimport DesktopBasicLayout from './BasicLayout';\nimport MobileBasicLayout from './Mobile';\nimport { BasicLayoutProps, MobileBasicLayoutProps } from './type';\n\nconst BasicLayout = memo((props: BasicLayoutProps & MobileBasicLayoutProps) => {\n  const { isMobile } = useAppLayout();\n  const LayoutComponent = isMobile ? MobileBasicLayout : DesktopBasicLayout;\n\n  return <LayoutComponent {...props} />;\n});\n\nexport default BasicLayout;\n","import React, { memo, useCallback } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { Badge, Menu, Dropdown } from 'antd';\nimport { ShoppingCartOutlined, ArrowLeftOutlined } from '@ant-design/icons';\nimport get from 'lodash/get';\nimport cn from 'classnames';\n\nimport { useAuth } from '@context/AuthContext';\nimport TopNavHeader from '@components/TopNavHeader';\nimport NotificationCenter from '@components/NotificationCenter/NotificationCenter';\nimport Logo from '@components/Logo';\nimport { DotsVerticalIcon } from '@icons/DotsVertical';\nimport { useCartData } from '@hooks/cart';\nimport useHasMounted from '@hooks/useHasMounted';\n\nimport s from './index.module.less';\n\ntype MobileHeaderProps = {\n  pageTitle?: React.ReactNode;\n  backButtonTitle?: string;\n  backButtonLink?: string;\n  showBackButton?: boolean;\n  hideCart?: boolean;\n  transparent?: boolean;\n};\n\nconst MobileHeader = memo(\n  ({ pageTitle, backButtonTitle, backButtonLink, showBackButton, transparent, hideCart }: MobileHeaderProps) => {\n    const router = useRouter();\n    const { isLoggedIn } = useAuth();\n    const hasMounted = useHasMounted();\n    const { data } = useCartData();\n    const totalCartItems = get(data, 'cart.orderItems.totalCount', 0);\n    const isHomePage = router.pathname === '/';\n\n    const renderTitle = useCallback(() => {\n      if (backButtonTitle) return null;\n      if (pageTitle) return <div className={s.pageTitle}>{pageTitle}</div>;\n      return (\n        <div className={s.contentContent}>\n          <Link href=\"/\" passHref>\n            <a>\n              <Logo className={s.logo} position=\"header\" />\n            </a>\n          </Link>\n        </div>\n      );\n    }, [backButtonTitle, pageTitle]);\n\n    return (\n      <TopNavHeader className={cn(s.topNavHeader, transparent && s.topNavTransparent)}>\n        {!transparent && (\n          <div className={s.background}>\n            <div className={s.decoratingTriangleOne}>\n              <Image src=\"/images/header-triangle-1.png\" width=\"107\" height=\"105\" />\n            </div>\n            <div className={s.decoratingTriangleTwo}>\n              <Image src=\"/images/header-triangle-2.png\" width=\"137\" height=\"52\" />\n            </div>\n            <div className={s.decoratingTriangleThree}>\n              <Image src=\"/images/header-triangle-3.png\" width=\"180\" height=\"54\" />\n            </div>\n            <div className={s.decoratingTriangleFour}>\n              <Image src=\"/images/header-triangle-4.png\" width=\"94\" height=\"54\" />\n            </div>\n          </div>\n        )}\n        <div className={s.content}>\n          <div className={s.leftContent}>\n            {(showBackButton || !isHomePage) && (\n              <>\n                <a\n                  onClick={() => {\n                    if (backButtonLink) router.push(backButtonLink);\n                    else router.back();\n                  }}\n                  className={cn(transparent && s.btnTransparent)}\n                >\n                  <ArrowLeftOutlined style={{ fontSize: 20 }} />\n                </a>\n                {backButtonTitle && <span className={s.backButtonTitle}>{backButtonTitle}</span>}\n              </>\n            )}\n          </div>\n          {renderTitle()}\n          <div className={cn(s.rightContent, !backButtonTitle && s.flex1)}>\n            <div className={s.space}>\n              {isLoggedIn && hasMounted && !hideCart && (\n                <>\n                  <Link href=\"/cart\" passHref>\n                    <div className={cn(s.cart, transparent && s.btnTransparent)} data-test=\"cart-icon\">\n                      <Badge size=\"small\" className={s.badge} count={totalCartItems} showZero>\n                        <ShoppingCartOutlined style={{ fontSize: 24 }} />\n                      </Badge>\n                    </div>\n                  </Link>\n                  <NotificationCenter isMobile />\n                </>\n              )}\n              <MoreDropdown isLoggedIn={isLoggedIn} transparent={transparent} />\n            </div>\n          </div>\n        </div>\n      </TopNavHeader>\n    );\n  },\n);\n\nconst MoreDropdown = memo(({ isLoggedIn, transparent }: { isLoggedIn: boolean; transparent?: boolean }) => {\n  const menuPaths = [\n    {\n      href: '/',\n      name: 'Trang chủ',\n      label: 'Our product',\n    },\n    ...(isLoggedIn\n      ? [\n          {\n            href: '/instantdeal',\n            name: 'Đặt hàng nhanh',\n            label: 'Instant deal',\n          },\n          {\n            href: '/account/navigator',\n            name: 'Doanh nghiệp',\n            label: 'Account',\n          },\n        ]\n      : [\n          {\n            href: '/login',\n            name: 'Đăng nhập',\n            label: 'Login',\n          },\n          {\n            href: '/register',\n            name: 'Đăng ký',\n            label: 'Register',\n          },\n        ]),\n  ];\n\n  const menu = (\n    <Menu className={s.menu}>\n      {menuPaths.map(path => (\n        <React.Fragment key={path.href}>\n          <Menu.Item key={path.href}>\n            <Link href={path.href} passHref>\n              <a aria-label={path.label}>{path.name}</a>\n            </Link>\n          </Menu.Item>\n          <Menu.Divider />\n        </React.Fragment>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={menu} trigger={['click']} arrow placement=\"bottomRight\">\n      <span className={cn(transparent && s.btnTransparent)}>\n        <DotsVerticalIcon className={s.dotIcon} />\n      </span>\n    </Dropdown>\n  );\n});\n\nexport default MobileHeader;\n","import get from 'lodash/get';\nimport { GiftCampaign, GiftConditionItem } from '@hooks/giftCampaign';\nimport { NoncombinableGiftCampaign, LevelableGiftCampaign } from '@hooks/cart';\nimport { Maybe } from '@graphql/types.generated';\nimport {\n  getGiftsDataNoncombinableCampaigns,\n  getGiftsDataGiftCampaigns,\n  getGiftsDataLevelableCampaigns,\n} from './orderItem';\nimport { Campaigns } from '@hooks/giftCampaigns/controller';\nimport { GetOrderItemQuery } from '@hooks/orderItem';\nimport { Product } from '@components/InstantDeal/ProductCategoriesDropdown';\nimport { Variants } from '@components/SearchBar/SearchResult';\n\n/* document https://coderpush.slite.com/app/channels/W6Vtt1eO8e/notes/Gkqnv5RfK\n- 1.1: 1 variant -> 1 gift\n- 1.2: 1 variant -> n gifts (or)\n- 1.3: 1 variant -> n gifts (and)\n\n- 2.1: 1 || n variants (any) -> 1 gift\n- 2.2: 1 || n variants (any) -> n gifts (or)\n- 2.3: 1 || n variants (any) -> n gift (and)\n- 2.4: n variants (and) -> 1 gift\n- 2.5: n variants (and) -> n gifts (or)\n- 2.6: n variants (and) -> n gift (and)\n\n*/\nexport function getCampaignType(promotion?: GiftCampaign) {\n  const requirements = promotion?.requirements || [];\n  const gifts = promotion?.gifts || [];\n  const giftSelectionItemGroups = gifts[0]?.giftSelectionItemGroups || [];\n\n  const isMultipleRequirements = requirements.length > 1;\n\n  const isRequirementHasMultipleConditions = (promotion?.conditionCount || 0) > 1;\n\n  const isSelectionGift = gifts.length > 1; // or\n  const isGiftHasMultipleGroups = giftSelectionItemGroups.length > 1; // and\n  const isGiftHasMultipleItems = (giftSelectionItemGroups[0]?.giftSelectionItems?.length || 0) > 1; // and\n\n  const isRequiredMultipleVariants = isMultipleRequirements || isRequirementHasMultipleConditions;\n  const isMultipleGifts = isSelectionGift || isGiftHasMultipleGroups || isGiftHasMultipleItems;\n\n  const isAnyVariants =\n    Boolean(promotion?.requirements?.[0]?.totalQuantityThreshold) ||\n    Boolean(promotion?.requirements?.[0]?.totalRevenueThreshold);\n\n  if (isAnyVariants) {\n    if (isMultipleGifts) {\n      if (isSelectionGift) return 2.2;\n      return 2.3;\n    } else return 2.1;\n  }\n\n  if (isRequiredMultipleVariants) {\n    if (isMultipleGifts) {\n      if (isSelectionGift) return 2.5;\n      return 2.6;\n    } else return 2.4;\n  } else {\n    if (isMultipleGifts) {\n      if (isSelectionGift) return 1.2;\n      return 1.3;\n    } else return 1.1;\n  }\n}\n\nexport const caculateMetaDataByVariantId = (variantId?: string, promotion?: GiftCampaign, _variantPrice?: number) => {\n  const campaignType = getCampaignType(promotion);\n  const currentCondition = promotion?.requirements?.[0]?.giftConditionItems?.find(\n    condition => condition.variant.id === variantId,\n  );\n  const variantPrice = currentCondition?.variant?.netPrice || _variantPrice;\n\n  /* this case is different, it used totalRevenueThreshold or totalQuantityThreshold of requirements */\n  if (campaignType >= 2.1 && campaignType <= 2.3) {\n    return caculateWithAnyVariants({ currentCondition, promotion, variantPrice });\n  }\n\n  return caculateForEachVariants({ currentCondition, promotion, variantPrice });\n};\n\ntype Keys = {\n  quantityThresholdOrRevenueThresholdKey: 'quantityThreshold' | 'revenueThreshold';\n  quantityOrRevenueKey: 'quantity' | 'revenue';\n  totalQuantityThresholdOrRevenueThresholdKey: 'totalQuantityThreshold' | 'totalRevenueThreshold';\n};\n\nexport const keyFactory = (isRequireQuantity: boolean): Keys => ({\n  quantityThresholdOrRevenueThresholdKey: isRequireQuantity ? 'quantityThreshold' : 'revenueThreshold',\n  quantityOrRevenueKey: isRequireQuantity ? 'quantity' : 'revenue',\n  totalQuantityThresholdOrRevenueThresholdKey: isRequireQuantity ? 'totalQuantityThreshold' : 'totalRevenueThreshold',\n});\n\ntype CaculateMetaData = {\n  currentCondition?: GiftConditionItem;\n  promotion?: GiftCampaign;\n  variantPrice?: number;\n};\n\nconst caculateForEachVariants = ({ currentCondition, promotion, variantPrice }: CaculateMetaData) => {\n  const isRequireQuantity = !currentCondition?.revenueThreshold;\n  const { quantityThresholdOrRevenueThresholdKey, quantityOrRevenueKey } = keyFactory(isRequireQuantity);\n  const currentProgressData = promotion?.progressData?.find(item => item.id === currentCondition?.variant?.id);\n\n  // revenue is string we need to conver to number\n  const currentValue = currentProgressData?.[quantityOrRevenueKey]\n    ? Number(currentProgressData?.[quantityOrRevenueKey])\n    : 0;\n  const requirementThreshold = currentCondition?.[quantityThresholdOrRevenueThresholdKey];\n\n  const currentQuantity =\n    promotion?.progressData?.find(item => item.id === currentCondition?.variant?.id)?.quantity || 0;\n  const requirementRevenueThreshold = currentCondition?.revenueThreshold || 0;\n\n  const requirementQuantity =\n    currentCondition?.quantityThreshold || Math.round(requirementRevenueThreshold / (variantPrice || 1)) || 0;\n\n  const percent = ((currentValue || 0) / (requirementThreshold || 1)) * 100;\n  const quantityRemaining = requirementQuantity - currentQuantity;\n  const validQuantityRemaining = quantityRemaining < 0 ? 0 : quantityRemaining;\n\n  return {\n    giftCondition: currentCondition,\n    isRequireQuantity,\n    currentValue,\n    requirementThreshold,\n    progress: percent > 100 ? 100 : percent.toFixed(2),\n    quantityRemaining: validQuantityRemaining,\n    quantityRemainingText: `Mua thêm ${validQuantityRemaining} cái`,\n    currentQuantity,\n  };\n};\n\nconst caculateWithAnyVariants = ({ currentCondition, promotion, variantPrice }: CaculateMetaData) => {\n  const requirement = promotion?.requirements[0];\n  const isRequireQuantity = !requirement?.totalRevenueThreshold;\n  const { totalQuantityThresholdOrRevenueThresholdKey, quantityOrRevenueKey } = keyFactory(isRequireQuantity);\n\n  const requirementThreshold = requirement?.[totalQuantityThresholdOrRevenueThresholdKey];\n\n  // currentValue is total quantity or revenue required items\n  const currentValue =\n    promotion?.progressData?.reduce((acc: number, item) => {\n      acc += item?.[quantityOrRevenueKey] ? Number(item?.[quantityOrRevenueKey]) : 0;\n      return acc;\n    }, 0) || 0;\n\n  const currentQuantity = isRequireQuantity\n    ? promotion?.progressData?.reduce((acc: number, item) => {\n        acc += item.quantity || 0;\n        return acc;\n      }, 0) || 0\n    : Math.floor(currentValue / (variantPrice || 1));\n\n  const requirementRevenueThreshold = requirement?.totalRevenueThreshold || 0;\n\n  const requirementQuantity =\n    requirement?.totalQuantityThreshold || Math.round(requirementRevenueThreshold / (variantPrice || 1)) || 0;\n\n  const percent = ((currentValue || 0) / (requirementThreshold || 1)) * 100;\n  const quantityRemaining = requirementQuantity - currentQuantity;\n  const validQuantityRemaining = quantityRemaining < 0 ? 0 : quantityRemaining;\n\n  return {\n    giftCondition: currentCondition,\n    isRequireQuantity,\n    currentValue,\n    requirementThreshold,\n    progress: percent > 100 ? 100 : percent.toFixed(2),\n    quantityRemaining: validQuantityRemaining,\n    quantityRemainingText: `Mua thêm ${validQuantityRemaining} cái`,\n    currentQuantity,\n  };\n};\n\nexport type ProgressItem = {\n  id: string;\n  materialNumber?: Maybe<string>;\n  name: string;\n  quantity: number;\n  revenue: any;\n};\n\nexport type ConditionItem = {\n  id: string;\n  variantId: string;\n  name: string;\n  materialNumber: string;\n  revenueThreshold?: Maybe<string>;\n  quantityThreshold?: Maybe<number>;\n  vatWholesalePrice: Maybe<number>;\n  available: boolean;\n};\n\nexport type SynchronizedProgressData = Maybe<ProgressItem>[];\n\nexport const syncProgressDataWithCondition = (\n  progressItems: ProgressItem[],\n  conditionItems: ConditionItem[],\n): SynchronizedProgressData => {\n  if (progressItems.length === conditionItems.length) return progressItems;\n\n  const synchronizedProgressItems = new Array(conditionItems.length).fill(null);\n\n  conditionItems.forEach((item, index) => {\n    for (let i = 0; i < progressItems.length; i++) {\n      if (item.variantId === progressItems[i].id) {\n        synchronizedProgressItems[index] = progressItems[i];\n        break;\n      }\n    }\n  });\n\n  return synchronizedProgressItems;\n};\n\nexport const getAllGiftsFromCampaigns = ({\n  noncombinableGiftCampaigns,\n  giftCampaigns,\n  levelableGiftCampaigns,\n}: {\n  noncombinableGiftCampaigns: NoncombinableGiftCampaign[] | null;\n  giftCampaigns: GiftCampaign[] | null;\n  levelableGiftCampaigns: LevelableGiftCampaign[] | null;\n}) => {\n  const noncombinableGiftsData = getGiftsDataNoncombinableCampaigns(noncombinableGiftCampaigns || []) || [];\n  const normalGiftsData = getGiftsDataGiftCampaigns(giftCampaigns || []) || [];\n  const levelableGiftsData = getGiftsDataLevelableCampaigns(levelableGiftCampaigns || []) || [];\n\n  return [...noncombinableGiftsData, ...normalGiftsData, ...levelableGiftsData];\n};\n\nexport const getPropratedPriceByVariantId = (variantId?: string, promotion?: GiftCampaign) => {\n  const giftConditionItem = promotion?.requirements?.[0]?.giftConditionItems?.find(\n    condition => condition.variant.id === variantId,\n  );\n\n  return giftConditionItem?.propratedPrice || 0;\n};\n\ntype AllCampaigns = {\n  giftCampaigns: GiftCampaign[] | null;\n  levelableGiftCampaigns: LevelableGiftCampaign[] | null;\n  noncombinableGiftCampaigns: NoncombinableGiftCampaign[] | null;\n};\n\nexport function getGiftCampaigns(giftCampaigns: GiftCampaign[]) {\n  return giftCampaigns.reduce(\n    (acc, campaign) => (Number(campaign.totalRewardsInCart) > 0 && campaign.applied ? [...acc, campaign] : acc),\n    [] as GiftCampaign[],\n  );\n}\n\nexport function getLevelCampaigns(campaigns: LevelableGiftCampaign[], array?: GiftCampaign[]) {\n  const typeBCampaigns = getGiftCampaigns(campaigns);\n  campaigns.forEach(campaign => {\n    if (campaign.giftCampaignChildren) array = getLevelCampaigns(campaign.giftCampaignChildren, array);\n    array = [...(array || []), ...typeBCampaigns];\n  });\n\n  return array || [];\n}\n\nexport function getNoncombinableCampaigns(noncombinableCampaigns: NoncombinableGiftCampaign[]) {\n  return noncombinableCampaigns.reduce((acc, campaign) => {\n    const typeBCampaigns = getGiftCampaigns(campaign.giftCampaignGroups || []);\n\n    acc.push(...typeBCampaigns);\n\n    return acc;\n  }, [] as GiftCampaign[]);\n}\n\nexport function getAllCampaigns({ giftCampaigns, levelableGiftCampaigns, noncombinableGiftCampaigns }: AllCampaigns) {\n  return [\n    ...getGiftCampaigns(giftCampaigns || []),\n    ...getLevelCampaigns(levelableGiftCampaigns || []),\n    ...getNoncombinableCampaigns(noncombinableGiftCampaigns || []),\n  ];\n}\n\nexport const getVariantCampaignsFromCampaigns = (campaigns: Campaigns, variantCampaignIds: string[]) => {\n  return campaigns.filter(campaigns => variantCampaignIds.includes(campaigns.id));\n};\n\nexport const getUniqueCampaignIdsFromProducts = (products: Product[]) => {\n  let campaignIds: string[] = [];\n  products.forEach(product => {\n    campaignIds = campaignIds.concat(product.defaultVariant.campaignIds);\n  });\n\n  return [...new Set(campaignIds)];\n};\n\nexport const getUniqueCampaignIdsFromVariants = (variants: Variants) => {\n  const campaignIds = variants?.map(variant => variant?.campaignIds).reduce((acc, ids) => acc?.concat(ids || []), []);\n\n  return [...new Set(campaignIds)];\n};\n\nexport function isVariantOrderItem(selectedVariantId: string, orderItem?: GetOrderItemQuery) {\n  return selectedVariantId === get(orderItem, 'orderItem.variant.id', '');\n}\n\nexport function isOrderItemCampaign(campaigns: GiftCampaign[], orderItem?: GetOrderItemQuery, variantId?: string) {\n  return campaigns && campaigns.length && isVariantOrderItem(variantId || '', orderItem);\n}\n","import { FetchResult } from '@apollo/client';\nimport get from 'lodash/get';\n\nimport { ColumnFilterItem } from '@components/MultipleFilterDropdown';\nimport { CheckoutMutation, CheckoutInternalOrdersMutation, OrderItem } from '@hooks/checkout';\n\n/**\n * This one contains all of custom events\n */\n\nexport const firePurchaseEvent = (\n  mutationResult:\n    | FetchResult<CheckoutMutation, Record<string, any>, Record<string, any>>\n    | FetchResult<CheckoutInternalOrdersMutation, Record<string, any>, Record<string, any>>,\n) => {\n  const checkout = get(mutationResult, 'data.checkout');\n  const checkoutWithInternalDispatch = get(mutationResult, 'data.checkoutWithInternalDispatch');\n  const data = checkout || checkoutWithInternalDispatch;\n\n  if (!data) return;\n\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({ ecommerce: null });\n\n  // TODO: remove when /checkout is removed\n  if (!Array.isArray(data)) {\n    window.dataLayer.push({\n      event: 'purchase',\n      ecommerce: {\n        transaction_id: data?.id,\n        value: Number(data?.total),\n        currency: 'VND',\n        items: data?.orderItems?.nodes?.map((item: OrderItem) => ({\n          item_id: item?.variant.id,\n          item_name: item?.variant.name,\n          item_variant: item?.variant.materialNumber,\n          price: Number(item?.price),\n          quantity: item?.quantity,\n        })),\n      },\n    });\n  } else {\n    for (const el of data) {\n      window.dataLayer.push({\n        event: 'purchase',\n        ecommerce: {\n          transaction_id: el?.id,\n          value: Number(el?.total),\n          currency: 'VND',\n          items: el?.orderItems?.nodes?.map((item: OrderItem) => ({\n            item_id: item?.variant.id,\n            item_name: item?.variant.name,\n            item_variant: item?.variant.materialNumber,\n            price: Number(item?.price),\n            quantity: item?.quantity,\n          })),\n        },\n      });\n    }\n  }\n};\n\nexport const fireExportGiftEvent = (items: Record<string, any>[]) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({ ecommerce: null });\n  window.dataLayer.push({\n    event: 'export_gift',\n    ecommerce: {\n      items: items.map(item => ({\n        item_id: item?.id,\n        item_name: item?.name,\n        item_variant: item?.materialNumber,\n        quantity: item?.quantity,\n      })),\n    },\n  });\n};\n\nexport const fireAddToCartEvent = (items: Record<string, any>[], addFrom: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({ ecommerce: null });\n  window.dataLayer.push({\n    event: 'add_to_cart',\n    add_to_cart_from: addFrom,\n    ecommerce: {\n      items,\n    },\n  });\n};\n\nexport const fireVisitDiscountsEvent = (visitDiscountsFrom: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'visit_discounts',\n    visitDiscountsFrom,\n  });\n};\n\nexport const fireVisitCampaignsEvent = (visitCampaignsFrom: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'visit_campaigns',\n    visitCampaignsFrom,\n  });\n};\n\nexport const fireFilterEvent = (filterValuesName: string, filterFrom: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'filter',\n    filterFrom,\n    filterValues: filterValuesName,\n  });\n};\n\nexport const fireSearchEvent = (searchTerm: string, searchFrom: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'search',\n    search_term: searchTerm,\n    search_from: searchFrom,\n  });\n};\n\nexport const fireClickBannerEvent = (url: string, position: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'click_banner',\n    banner_url: url,\n    banner_position: position,\n  });\n};\n\nexport const fireVisitProductsEvent = (from: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'visit_products',\n    visit_products_from: from,\n  });\n};\n\nexport const fireClickProductsCarouselEvent = (carouselType: string) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'click_carousel',\n    carousel_type: carouselType,\n  });\n};\n\nexport const fireDisallowNotificationEvent = (userName = 'unknown') => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'disallow_notification',\n    by_user: userName,\n  });\n};\n\nexport const fireViewItemEvent = (item: Record<string, any>) => {\n  const { id, name, materialNumber, vatWholesalePrice } = item;\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({ ecommerce: null });\n  window.dataLayer.push({\n    event: 'view_item',\n    ecommerce: {\n      items: [\n        {\n          item_id: id,\n          item_name: name,\n          item_variant: materialNumber,\n          currency: 'VND',\n          price: vatWholesalePrice,\n        },\n      ],\n    },\n  });\n};\n\nexport const fireViewItemListEvent = (items: Record<string, any>[]) => {\n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({ ecommerce: null });\n  window.dataLayer.push({\n    event: 'view_item_list',\n    ecommerce: {\n      items: [\n        ...items.map(item => ({\n          item_id: item?.id,\n          item_name: item?.name,\n          item_variant: item?.materialNumber,\n          currency: 'VND',\n          price: item?.vatWholesalePrice,\n        })),\n      ],\n    },\n  });\n};\n\n/**\n * This one contains all utility functions\n */\ninterface FilterItem {\n  text: string;\n  value: string;\n}\nexport const getFilterValuesName = (\n  filterValues: Record<string, string[]>,\n  categories: ColumnFilterItem[],\n  brands: FilterItem[],\n  colors: FilterItem[],\n  attributes: FilterItem[],\n) => {\n  const categoryNames: string[] = [];\n  const brandNames: string[] = [];\n  const colorNames: string[] = [];\n  const attributeNames: string[] = [];\n\n  const categoryFilterValues = filterValues.categoryIds;\n  const brandFilterValues = filterValues.brandIds;\n  const colorFilterValues = filterValues.optionValueIds;\n  const attributeFilterValues = filterValues.attributes;\n\n  const flatCategories: ColumnFilterItem[] = [];\n  function flattenCategory(categories: ColumnFilterItem[]) {\n    if (!categories) return;\n\n    categories.forEach(category => {\n      if (category.children) {\n        flattenCategory(category.children);\n      }\n      flatCategories.push(category);\n    });\n  }\n  flattenCategory(categories);\n\n  flatCategories.forEach(category => {\n    if (categoryFilterValues.includes(category.value as string)) categoryNames.push(category.text as string);\n  });\n  brands.forEach(brand => {\n    if (brandFilterValues.includes(brand.value)) brandNames.push(brand.text);\n  });\n  colors.forEach(color => {\n    if (colorFilterValues.includes(color.value)) colorNames.push(color.text);\n  });\n  attributes.forEach(attr => {\n    if (attributeFilterValues.includes(attr.value)) attributeNames.push(attr.text);\n  });\n\n  return categoryNames.concat(brandNames).concat(colorNames).concat(attributeNames).join('-');\n};\n","/*\n  The breakpoints of responsive grid follow BootStrap 4 media queries rules\n  More info: https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints\n*/\nimport { isBrowser } from './isBrowser';\n\nexport const SM = '576px';\nexport const MD = '768px';\nexport const LG = '992px';\nexport const XL = '1140px';\n\nexport const toBreakpointNumber = (breakpoint: string) => {\n  return Number(breakpoint.replace('px', ''));\n};\n\nexport const isMatchMedia = (breakpoint: string) => {\n  if (isBrowser) return window.matchMedia(`(max-width: ${breakpoint})`).matches;\n  return false;\n};\n","import { GiftSelection, SelectedGift } from '@hooks/cart';\n\n// change gift quantity by multiplyBy\nexport function multiplyGiftSelectionItemQuantity(gifts: GiftSelection[], multiplyBy: number) {\n  return gifts.map(gift => {\n    const newGiftSelectionItemGroup = gift.giftSelectionItemGroups.map(itemGroup => {\n      const newGiftSelectionItems = itemGroup.giftSelectionItems.map(selectionItem => {\n        return {\n          ...selectionItem,\n          quantity: (selectionItem?.quantity || 0) * multiplyBy,\n        };\n      });\n\n      return { ...itemGroup, giftSelectionItems: newGiftSelectionItems };\n    });\n\n    return { ...gift, giftSelectionItemGroups: newGiftSelectionItemGroup };\n  });\n}\n\nexport function getGiftItemNumber(selectedGifts: SelectedGift[]) {\n  return selectedGifts.reduce((acc, selectedGift) => {\n    const { selectedGiftItems } = selectedGift;\n    acc += selectedGiftItems.length;\n\n    return acc;\n  }, 0);\n}\n","import { OrderItem, NoncombinableGiftCampaign, LevelableGiftCampaign, SelectedGift } from '@hooks/cart';\nimport { GiftCampaign } from '@graphql/types.generated';\nimport isEmpty from 'lodash/isEmpty';\nimport flow from 'lodash/flow';\nimport { OrderItemElement } from '@utils/gift';\nimport { ExtendedGiftSelection } from '@components/SelectGiftModal';\nimport { OrderGiftItemCombined } from '@components/Cart/types';\nimport { getSelectedGiftsCampaigns, getSelectedGiftsNoncombinable, getSelectedGiftsLevelCampaigns } from './selectGift';\nimport { generateId } from '.';\nimport { getGiftItemNumber } from './giftItem';\n\nfunction getGiftsFromCampaign(campaign: GiftCampaign): ExtendedGiftSelection[] {\n  if (!campaign) return [];\n  const {\n    applied,\n    multiplyBy,\n    canCheckOutRewards,\n    totalRewardsInCart,\n    remainingRewardTimesInCart,\n    gifts,\n    type,\n    selectedGifts,\n    selectedGiftsInCart,\n    id: campaignId,\n    remainingRewardTimes,\n    importableSameOrder,\n    campaignName,\n  } = campaign;\n  return gifts.map(gift => ({\n    ...gift,\n    campaignName,\n    remainingRewardTimes,\n    remainingRewardTimesInCart,\n    importableSameOrder,\n    isAccumulated: type === 'Type B',\n    multiplyBy,\n    canCheckOutRewards,\n    totalRewardsInCart,\n    selectedGiftInCart: selectedGiftsInCart?.find(selected => selected.giftSelection.id === gift.id) || undefined,\n    selectedGift: selectedGifts?.find(selectedGift => selectedGift.giftSelection.id === gift.id) || undefined,\n    campaignId,\n    applied,\n  }));\n}\n\nfunction noSelectionGifts(gifts: ExtendedGiftSelection[]) {\n  if (gifts.length === 0) return [];\n  return gifts.map((gift, _, array) => {\n    const { giftSelectionItemGroups, isAccumulated } = gift;\n    if (!isAccumulated && array.length === 1 && giftSelectionItemGroups.length === 1) {\n      return { ...gift, noSelection: true };\n    }\n    return gift;\n  });\n}\n\nexport function getGiftsDataGiftCampaigns(giftCampaigns: GiftCampaign[]) {\n  return giftCampaigns.reduce((acc, campaign) => {\n    const gifts = flow([getGiftsFromCampaign, noSelectionGifts])(campaign || []);\n    acc.push(...gifts);\n    return acc;\n  }, [] as ExtendedGiftSelection[]);\n}\n\nexport function getGiftsDataLevelableCampaigns(\n  levelableGiftCampaigns: LevelableGiftCampaign[],\n  array?: ExtendedGiftSelection[],\n) {\n  levelableGiftCampaigns.forEach(campaign => {\n    const newGifts = getGiftsFromCampaign(campaign) || [];\n    if (campaign.giftCampaignChildren) array = getGiftsDataLevelableCampaigns(campaign.giftCampaignChildren, array);\n    array = [...(array || []), ...newGifts];\n  });\n\n  return array;\n}\n\nexport function getGiftsDataNoncombinableCampaigns(noncombinableCampaigns: NoncombinableGiftCampaign[]) {\n  if (!noncombinableCampaigns) return [];\n\n  function giftsFromNoncombinableGroups(giftCampaignGroups: GiftCampaign[]) {\n    let gifts: ExtendedGiftSelection[] = [];\n    for (const item in giftCampaignGroups) {\n      gifts = gifts.concat(getGiftsFromCampaign(giftCampaignGroups[item]));\n    }\n\n    return gifts;\n  }\n\n  const allGifts: ExtendedGiftSelection[] = [];\n  noncombinableCampaigns.forEach(item => {\n    const group: any = giftsFromNoncombinableGroups(item?.giftCampaignGroups || []);\n\n    group && !isEmpty(group) && allGifts.push(...group);\n  });\n\n  return allGifts;\n}\n\nexport function getAllGiftsData({\n  noncombinableGiftCampaigns,\n  giftCampaigns,\n  levelableGiftCampaigns,\n}: {\n  levelableGiftCampaigns?: LevelableGiftCampaign[] | null;\n  giftCampaigns?: GiftCampaign[] | null;\n  noncombinableGiftCampaigns?: NoncombinableGiftCampaign[] | null;\n}) {\n  const noncombinableGiftsData = getGiftsDataNoncombinableCampaigns(noncombinableGiftCampaigns || []) || [];\n  const normalGiftsData = getGiftsDataGiftCampaigns(giftCampaigns || []) || [];\n  const levelableGiftsData = getGiftsDataLevelableCampaigns(levelableGiftCampaigns || []) || [];\n\n  return [...noncombinableGiftsData, ...normalGiftsData, ...levelableGiftsData];\n}\n\nexport function getPrioritizedCampaignId(orderItem: OrderItem): string {\n  const { firstGiftCampaignId, firstLevelableCampaignId, firstNoncombinableCampaignId } = orderItem;\n\n  return firstNoncombinableCampaignId || firstLevelableCampaignId || firstGiftCampaignId || '';\n}\n\n// TODO: carefully remove this logic because this function groupOrderItemsByPrioritizedCampaignId serve the purpose\nexport function groupOrderItemsByCampaignId(transformedOrderItems: OrderItemElement[]): {\n  list: OrderItemElement[];\n  indexMap: Map<string, number>;\n} {\n  const giftsMap: { [key: string]: OrderItemElement[] } = {};\n  const prioritizedIds = new Set();\n  const collection: OrderItemElement[] = [];\n\n  transformedOrderItems.forEach(orderItem => {\n    const { prioritizedId: id, campaignId } = orderItem;\n    id && prioritizedIds.add(id);\n    if (prioritizedIds.has(campaignId)) {\n      giftsMap[campaignId] = giftsMap[campaignId] ? [...giftsMap[campaignId], orderItem] : [orderItem];\n    } else {\n      collection.push(orderItem);\n    }\n  });\n\n  const indexMap: Map<string, number> = new Map();\n  collection.forEach(item => {\n    if (item?.prioritizedId && giftsMap[item.prioritizedId]) {\n      const id = String(item.prioritizedId);\n      indexMap.set(id, item.index);\n    }\n  });\n\n  const list = collection.reduce((acc, item) => {\n    acc.push(item);\n    const { prioritizedId: id } = item;\n    if (item.index === indexMap.get(String(id))) {\n      acc.push(...(giftsMap[id || 0] || []));\n    }\n    return acc;\n  }, [] as OrderItemElement[]);\n\n  return { list, indexMap };\n}\n\nfunction getPrioritizedIdMap(orderItems: OrderItem[]) {\n  const map = new Map();\n\n  orderItems.forEach(orderItem => {\n    const {\n      firstGiftCampaignId,\n      firstLevelableCampaignId,\n      firstNoncombinableCampaignId,\n      giftCampaigns,\n      levelableGiftCampaigns,\n      noncombinableGiftCampaigns,\n    } = orderItem;\n    if (firstGiftCampaignId) {\n      const campaign = giftCampaigns?.find(campaign => campaign.id === firstGiftCampaignId);\n      campaign && map.set(firstGiftCampaignId, campaign);\n    }\n    if (firstLevelableCampaignId) {\n      const campaign = levelableGiftCampaigns?.find(campaign => campaign.id === firstLevelableCampaignId);\n      campaign && map.set(firstLevelableCampaignId, campaign);\n    }\n    if (firstNoncombinableCampaignId) {\n      const campaign = noncombinableGiftCampaigns?.find(campaign => campaign.groupId === firstNoncombinableCampaignId);\n      campaign && map.set(firstNoncombinableCampaignId, campaign);\n    }\n  });\n\n  return map;\n}\n\nfunction generateDummyGroupItem(campaign: GiftCampaign & { giftCampaignGroups?: GiftCampaign[]; groupId: string }) {\n  const { id, selectedGifts, giftCampaignGroups, selectedGiftsInCart, groupId, type } = campaign;\n  const currSelectedGifts = type === 'Type A' ? selectedGifts : selectedGiftsInCart;\n  const allSelectedGifts = giftCampaignGroups\n    ? giftCampaignGroups.reduce(\n        (acc, group) =>\n          (group.selectedGifts || []).length > 0 || (group.selectedGiftsInCart || []).length > 0\n            ? [...acc, ...(group.selectedGifts || []), ...(group.selectedGiftsInCart || [])]\n            : acc,\n        [] as SelectedGift[],\n      )\n    : currSelectedGifts || [];\n\n  return {\n    id: `orderItem_${id}_${generateId()}`,\n    campaignId: groupId ? groupId : id,\n    receivedGift: true,\n    isNoncombinable: Boolean(groupId),\n    giftItemNumber: getGiftItemNumber(allSelectedGifts),\n  };\n}\n\nexport function groupOrderItemsByPrioritizedCampaignId(orderItems: OrderGiftItemCombined[]) {\n  if (orderItems && orderItems.length === 0) return [];\n  const campaignGroupIdMap = getPrioritizedIdMap(orderItems);\n  const orderItemObj: { [key: string]: any[] } = {};\n  const noGroupItem: OrderGiftItemCombined[] = [];\n\n  // pick out all the items of a group and add it to a data structure\n  orderItems.forEach(orderItem => {\n    const prioritizedId = getPrioritizedCampaignId(orderItem);\n    if (campaignGroupIdMap.has(prioritizedId)) {\n      const value = orderItemObj[prioritizedId];\n      orderItemObj[prioritizedId] = value ? [...value, orderItem] : [orderItem];\n    } else {\n      noGroupItem.push(orderItem);\n    }\n  });\n\n  // go over the data structure and add a dummy group item to it\n  for (const item in orderItemObj) {\n    const campaign = campaignGroupIdMap.get(item);\n    const dummyGroupItem = campaign ? generateDummyGroupItem(campaign) : null;\n    if (campaign.type === 'Type A') {\n      dummyGroupItem && (campaign.applied || campaign.giftCampaignGroups) && orderItemObj[item].push(dummyGroupItem);\n    } else {\n      dummyGroupItem && orderItemObj[item].push(dummyGroupItem);\n    }\n  }\n\n  // check the first item, if it has correct group id, attach the group items\n  // if not just append them\n  const result = [];\n  const firstItem = orderItems[0];\n  const prioritizedId = getPrioritizedCampaignId(firstItem);\n  if (campaignGroupIdMap.has(prioritizedId)) {\n    result.push(orderItemObj[prioritizedId]);\n    delete orderItemObj[prioritizedId];\n  }\n  for (const item in orderItemObj) {\n    result.push(orderItemObj[item]);\n  }\n\n  result.push(...noGroupItem);\n\n  return result;\n}\n\nexport function getSelectedGiftsOrderItems(orderItems: OrderItem[]) {\n  return orderItems.reduce((acc, item) => {\n    const { giftCampaigns, noncombinableGiftCampaigns, levelableGiftCampaigns } = item;\n    const selectedGiftCampaigns = getSelectedGiftsCampaigns(giftCampaigns || []);\n    const selectedGiftsNoncombinable = getSelectedGiftsNoncombinable(noncombinableGiftCampaigns || []);\n    const selectedGiftsLevel = getSelectedGiftsLevelCampaigns(levelableGiftCampaigns || []);\n    const all = [...selectedGiftCampaigns, ...selectedGiftsNoncombinable, ...selectedGiftsLevel];\n    acc.push(...all);\n    return acc;\n  }, [] as SelectedGift[]);\n}\n\nexport function isImportableSameOrder(campaigns: GiftCampaign[] = []) {\n  return campaigns.every(cam => !(cam.type === 'Type B' && !cam.importableSameOrder));\n}\n","export function getCurrPage(pathname: string) {\n  const routeMap = new Map([\n    ['/', 'HomePage'],\n    ['/instantdeal', 'InstantDeal'],\n  ]);\n\n  let result = 'Other';\n  routeMap.forEach((value, key) => {\n    // TODO: write a regexp instead of pathname === key to match more complex route\n    if (pathname === key) result = value;\n  });\n\n  return result;\n}\n","import { Maybe } from '@graphql/types.generated';\nimport { Variants } from '@components/SearchBar/SearchResult';\nimport { Variant } from '@graphql/types.generated';\nimport { DiscountDetails } from '@hooks/variant';\n\nexport function accumulateVariantValue(optionValuesArray: { value: string; id: string }[]) {\n  return (\n    optionValuesArray?.reduce((acc, item, index) => {\n      acc += item ? item.value : '';\n      if (index < optionValuesArray.length - 1) acc += ', ';\n\n      return acc;\n    }, '') || ''\n  );\n}\n\nexport const mapVariantToProduct = (variants: Maybe<Variant[]>) => {\n  return variants?.map(variant => ({\n    id: variant.product.id,\n    name: variant.name,\n    defaultVariant: {\n      id: variant.id,\n      available: variant.available || false,\n      name: variant.name || '',\n      brand: variant.product.brand?.name || '',\n      materialNumber: variant.materialNumber || '',\n      defaultImageUrl: variant.defaultImageUrl || '',\n      campaignIds: variant.campaignIds || [],\n      imageUrls: variant.imageUrls || '',\n      vatWholesalePrice: variant.vatWholesalePrice || 0,\n      netPrice: variant.netPrice || 0,\n      vatPrice: variant.vatPrice || 0,\n      discounts: variant.discounts || [],\n      firstOrderDiscount: variant.firstOrderDiscount as DiscountDetails,\n      optionValues: variant.optionValues || [],\n    },\n  }));\n};\n\nexport function toBottomUnavailVariants(variants: Variants): Variants {\n  if (!variants || variants.length === 0) return [];\n\n  const availableArr: Variants = [];\n  const unavailableArr: Variants = [];\n\n  variants.forEach(variant => {\n    if (variant) {\n      const { available } = variant;\n\n      available ? availableArr.push(variant) : unavailableArr.push(variant);\n    }\n  });\n\n  return [...availableArr, ...unavailableArr] as Variants;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ssk6hBO7\",\"loading\":\"PGCrDsfO\",\"menuRoot\":\"KFojDcxS\",\"menuItem\":\"CzkvZDsR\",\"menuItemTitle\":\"nrpi8VAV\",\"menuIcon\":\"M6ClIfz9\",\"subMenuRoot\":\"__9lYwoXw2\",\"brandRoot\":\"RF5_ATwa\",\"subMenuLink\":\"PZlKv5Jw\",\"categoryItem\":\"EuNzjX5d\",\"categoryItemTitle\":\"qVwBHSqA\",\"categoryItemType\":\"iIrDGzqM\",\"subCategoryName\":\"_JDIaq0j\",\"categoryButton\":\"kXn0VV2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"d_m0XD_J\",\"badge\":\"t1JN3imJ\",\"containerCartRoute\":\"SpnlIW6d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainHeader\":\"__1EgM_Vs_\",\"categoryHeader\":\"VvSD_j8Z\",\"container\":\"__9c81UK_f\",\"searchBar\":\"Cv6cFlEZ\",\"navbarWrapper\":\"J37Pe3yn\",\"navLink\":\"__2kkiyLbL\",\"active\":\"dfae2G6e\",\"rightContent\":\"__8pO6L7uu\",\"toggler\":\"f0v_0y2E\",\"cart\":\"X6on1_9y\",\"user\":\"Abh84FKL\",\"signUpBtn\":\"QK0pWpXe\",\"loginBtn\":\"apBIBmnh\",\"logo\":\"e7NV6MpG\",\"menu\":\"MQvEJRO2\",\"headerToggler\":\"__3x8VnRfH\",\"headerContent\":\"A7AY9zZu\",\"show\":\"O3D_x6M5\",\"wrapper\":\"Dy5JeeLB\",\"avatar\":\"mNc2Gaa6\",\"userName\":\"Jl2Jvdk3\",\"badge\":\"qsUPSdXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"__7teG1wZ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discountIcon\":\"E_FqQlU9\",\"discountText\":\"MgYh1mWD\",\"highlight\":\"sWLXNPUb\",\"note\":\"YeVzPgZS\",\"discountAchieved\":\"__8a3jO4Hc\",\"discountNotAchieved\":\"l4FZ4rLJ\",\"root\":\"b8aVtF_Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"promotionSelection\":\"MiMpMivn\",\"dropdownList\":\"osW0pSA7\",\"fireIcon\":\"vXKtYcw1\",\"promotionText\":\"HaKazkd2\",\"disabledText\":\"xuP_SRtZ\",\"highlight\":\"HDAvFF_x\",\"seeMore\":\"__4ScSYyn4\",\"disabledSeeMore\":\"y5OhjoPV\",\"menu\":\"YbdAQ3ub\",\"menuItem\":\"w5IVbS2r\",\"promotionItem\":\"d72Dbngy\",\"promotionItemAchieved\":\"umurRN5L\",\"promotionItemNotAchieved\":\"Tnyhn_Qf\",\"promotionItemSuggested\":\"M7_Q_Ese\",\"root\":\"aaUPDqM0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"kIq0CY9s\",\"buttonNavigator\":\"AFQkFweD\",\"active\":\"sf5cPN7r\",\"icon\":\"GAU1vHNV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"mFWsg2yh\",\"overlay\":\"__87u10Xlj\",\"header\":\"IR7V0fZM\",\"title\":\"wrJS_3fS\",\"bellIcon\":\"j4MBDJd0\",\"seeAll\":\"P9QELoF1\",\"unread\":\"_7XKVgef\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ns06RQJt\",\"filterBtn\":\"pOuxSqbd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secondaryInformation\":\"__7TaYnJbi\",\"title\":\"hr3wsRIR\",\"content\":\"geStQk8g\",\"datetime\":\"__8X5dMlfi\",\"dot\":\"__75HrAEZU\",\"orderStatusIcon\":\"AgEbO6i1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OEw1pBGJ\",\"title\":\"__5efnADc2\",\"companyName\":\"qowzMHve\",\"companyInfo\":\"gdzoJYyS\",\"lastOrder\":\"e2zVc3xA\",\"space\":\"W_wtgR1n\",\"selectLabel\":\"YSuPr_f2\",\"select\":\"cdJV_642\",\"optionDisabled\":\"UPDCY4uR\",\"customer\":\"j_rUEVL3\",\"customerCode\":\"__8kPb6Ono\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"F1KxzwrP\",\"resultWrapper\":\"__25TwSaLm\",\"resultItemWrapper\":\"Rr0c41YX\",\"resultItem\":\"vIxl6hWN\",\"resultItemInfo\":\"__5p2k1DOC\",\"resultItemAdditionalInfo\":\"NDDGfnt7\",\"materialNumber\":\"tj0SEY1C\",\"resultItemName\":\"uG5CZAo2\",\"btnAddCart\":\"jfpV1Ueq\",\"empty\":\"__8i5o2jDx\",\"divider\":\"wsTm6rpZ\",\"image\":\"__1HveJ1Xq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"UmHsX6ZF\",\"zIndexHigh\":\"Oa9Vn7sA\",\"searchInput\":\"i5NSarg2\",\"overlay\":\"__1_qRNFkp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"__0GbBbyNF\",\"notification\":\"HC6_LdNs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ttrNFT_i\",\"item\":\"CH_XUYOT\",\"imageContainer\":\"mcVruojA\",\"image\":\"uELvcq_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ADgyFTFy\",\"content\":\"z2HIF1Ud\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ktFV3_Yd\",\"container\":\"sCQSJLSj\",\"unauthenticated\":\"R0Nb17C_\",\"cleanPadding\":\"hYyKJElt\",\"clearPadding\":\"_ZDKF4n8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavHeader\":\"VBVY6PdA\",\"background\":\"__6jNLLbxe\",\"decoratingTriangleOne\":\"qNQrT8Gu\",\"decoratingTriangleTwo\":\"ERucmsgV\",\"decoratingTriangleThree\":\"MHwByC__\",\"decoratingTriangleFour\":\"O7bE9cwV\",\"topNavTransparent\":\"i2MCplWG\",\"content\":\"jFPwDscY\",\"logo\":\"L1x4WTSj\",\"leftContent\":\"__7IyszK9L\",\"contentContent\":\"P5rYcoRq\",\"rightContent\":\"m_aCmbUv\",\"space\":\"__8e4Pca1K\",\"dotIcon\":\"ERlD4v6i\",\"pageTitle\":\"rca_186z\",\"backButtonTitle\":\"lfhcx5Ew\",\"flex1\":\"zMh2UcHM\",\"btnTransparent\":\"F0Ji9Cdk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavHeader\":\"eQhOolAq\",\"decoratingTriangleOne\":\"yOH_JXt6\",\"decoratingTriangleTwo\":\"IhkiknaU\",\"decoratingTriangleThree\":\"g_aCDYUW\",\"decoratingTriangleFour\":\"bK_x0xL9\",\"headerContainer\":\"eiIzVffo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavHeader\":\"sRTR7Rcf\",\"decoratingTriangleOne\":\"iBqHEtlZ\",\"decoratingTriangleTwo\":\"QtaRCvEF\",\"decoratingTriangleFour\":\"s_TdJP_T\",\"headerContainer\":\"bJe6UtQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavHeader\":\"qee4UfeU\",\"headerContainer\":\"FwIG_bRS\"};"],"names":["InLineWarning","text","className","style","firstOrderDiscount","currQuantity","percent","flatAmount","requirements","isAchieved","quantity_threshold","max_quantity","isMinMaxEqual","twoToneColor","toVNDShort","insertSpaceToPromotionName","promotionName","replace","calculateAmountToTarget","promotion","totalQuantityThreshold","totalRevenueThreshold","totalGiftConditionItemsQuantityThreshold","progressData","map","item","quantity","reduce","acc","val","toString","inProgressRevenue","BigInt","revenue","revenueToTarget","variantGiftCampaigns","options","disabled","promotions","filter","campaign","duplicatedFrom","sortedPromotions","promotionWithFirstRequirement","promo","sort","promotionOne","promotionTwo","Number","sortPromotionsByRequirement","theFirstTarget","Set","amountToTarget","multiplyBy","calculateMultiplyBy","campaignName","menu","onClick","key","router","id","length","isPromotionTextHidden","src","alt","width","height","textOnly","overlay","trigger","placement","e","preventDefault","buildParamsByQuery","query","Object","keys","queryValue","param","Array","isArray","split","type","multiplyByTypeB","icon","Icon","title","content","createdAt","read","align","justify","span","NotificationCenter","isMobile","useNotification","filterValue","handleFilterChange","unreadNotificationsCount","userNotifications","isLoading","isError","handleSeeDetails","handleMarkAllNotificationsAsRead","isNotificationEmpty","userNotificationsContent","slice","notification","dayjs","format","notificationsOverlay","CheckOutlined","NotificationFilter","onFilterChange","NotificationListSkeleton","description","image","InclinedBell","message","count","size","BellOutlined","overlayClassName","offset","memo","buttonStyle","value","onChange","variant","inCartQuantity","searchId","isLoggedIn","useAuth","campaigns","useCampaigns","pathname","useRouter","useSearchConversionMutation","searchConvert","variantCampaignIds","campaignIds","getVariantCampaignsFromCampaigns","hasFirstOrderDiscount","href","linkItemToSearchList","searchTerm","product","optionValues","option","join","passHref","variables","convertableType","convertableId","source","getCurrPage","s","imageUrls","defaultImageUrl","name","brand","available","InlineWarning","materialNumber","vatWholesalePrice","isWithPromotions","FirstOrderDiscountSuggestion","PromotionSelection","noAddToCart","PlusOutlined","SearchResultItemSkeleton","active","paragraph","rows","searchResultsSkeleton","fill","_","idx","variants","loading","orderItemsWithQuantity","setCampaignIds","getUniqueCampaignIdsFromVariants","searchResults","toBottomUnavailVariants","index","array","find","Fragment","useEffect","cn","setShowResult","useGetVariantSearchLazyQuery","fetchVariantSearch","data","q","useState","showResult","setValue","searchRef","useRef","searchDebounced","useCallback","debounce","newQuery","first","ITEM_PER_PAGE","error","fireSearchEvent","handleFocus","handleChange","target","handleSearch","current","blur","push","titleLength","contentLength","notifications","shape","defaultOptions","SelectedGiftsFragmentDoc","gql","ProgressDataFragmentDoc","CartGiftCampaignsDocument","useCartGiftCampaignsQuery","baseOptions","Apollo","useCartGiftCampaignsLazyQuery","WarehouseTypeBCampaignsDocument","useWarehouseTypeBCampaignsLazyQuery","CampaignDetailsByOrderDocument","GiftFragmentDoc","useCampaignDetailsByOrderLazyQuery","OrderItemConnectFragmentDoc","GetCartDocument","DiscountFragmentDoc","useGetCartQuery","useGetCartLazyQuery","UpdateCartDocument","useUpdateCartMutation","GetOrderItemsWithQuantityDocument","useGetOrderItemsWithQuantityLazyQuery","GetCartVariantAvailabilityDocument","useGetCartVariantAvailabilityLazyQuery","CartContext","createContext","updateCount","initialLoading","isMiniCartItemDetailVisible","selectedCartItemId","selectedVariantId","undefined","variantIdWithCartData","handleUpdateCart","refetchAfterUpdatingCart","CartController","children","setUpdateCount","setVariantIdWithCartData","setMiniCartItemDetailVisibility","setSelectedCartItemId","setSelectedVariantId","removingVariantId","setRemovingVariantId","fetchPolicy","onCompleted","response","transformedData","get","orderItem","orderItemId","transformVariantByOrder","fetchAllOrderItems","client","useContext","getApolloContext","setRefetchAfterUpdatingCart","PERFORMANCE_ITEM_PER_PAGE","notifyOnNetworkStatusChange","fetchMore","refetchCart","refetch","useGetOrderItemLazyQuery","fetchOrderItem","orderItemData","orderItemLoading","updateCart","updateCartLoading","React","variantId","currOrderItemId","input","update","cache","mutationResult","evict","gc","prev","handleOpenMiniCartDetail","handleCloseMiniCartDetail","fetchMoreCartItem","endCursor","after","updateQuery","fetchMoreResult","orderItems","previousOrderItems","orderItemFragment","cart","nodes","readQuery","newVariantIdCartData","omit","firstItem","orderId","context","useMemo","Provider","useCartData","useFetchMoreCartItems","totalCount","products","hasNextPage","fetchMoreProducts","CartConsumer","Consumer","ProductConnectionFragmentDoc","GetCategoriesDocument","useGetCategoriesQuery","useGetCategoriesLazyQuery","GetCategoryDocument","useGetCategoryLazyQuery","GetCategoryWithGiftCampaignsDocument","useGetCategoryWithGiftCampaignsLazyQuery","GetOptionTypesDocument","useGetOptionTypesLazyQuery","ProductCategoriesContext","useProductCategory","getCategoryDepth","category","depth","parent","nextDepth","ProductCategoryController","cid","initialParams","isGift","fetchCategory","handleFetchMoreProducts","params","merge","handleFilterProducts","loadingContainer","productCategory","categoryDepth","fetchMoreLoading","iconMap","AppstoreFilled","BulbFilled","ToolFilled","ControlFilled","HomeFilled","ThunderboltFilled","TabletFilled","BugFilled","FilterFilled","DatabaseFilled","GoldenFilled","LikeFilled","_Icon","getCategoryIconById","GetOrderItemDocument","RequirementFragmentDoc","GetCampaignSelectedGiftsDocument","useGetCampaignSelectedGiftsQuery","GetOrderItemForCampaignsDocument","useGetOrderItemForCampaignsLazyQuery","GetOrderItemDrawerDocument","useGetOrderItemDrawerQuery","RemoveOrderItemsDocument","useRemoveOrderItemsMutation","GetVariantSearchDocument","SearchConversionDocument","SearchContext","handleFetchMoreVariantSearch","SearchController","variantSearch","deepmerge","useSearch","DotsVerticalSvg","props","xmlns","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","DotsVerticalIcon","component","x","y","rx","transform","cx","cy","r","MenuOverlayItem","onHover","_onItemHover","onItemHover","hasChildren","onMouseEnter","event","info","hover","role","CaretRightFilled","MenuOverlay","visible","buttonRef","fetchCategories","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","filteredCategories","categories","cat","hoveredCategory","setHoveredCategory","handleHover","rootStyles","toBreakpointNumber","XL","menuStyles","offsetWidth","getMenuStyles","mode","MD","onMouseOver","subCategory","_subCategory","setVisible","onVisibleChange","ref","block","MenuOutlined","Search","Overlay","onClose","useSearchBar","classnames","defaultValue","onSearch","onFocus","placeholder","enterButton","allowClear","SearchResult","results","totalCartItems","layouts","xs","sm","md","lg","xl","search","isBrowser","gutter","ShoppingCartOutlined","fontSize","MainHeader","dynamic","ssr","TopNavHeader","festival","getFestival","includes","TagOutlined","checkStatus","status","Error","request","endpoint","Accept","newOptions","method","body","FormData","headers","JSON","stringify","auth","localStorage","getItem","authObj","tryParse","authorization","token","url","APIEndpoints","fetch","then","json","Option","Paragraph","confirm","SaleAdminBanner","currentUserId","useCurrentUser","usePersistedState","bypassBy","customers","setCustomers","selectedCustomer","setSelectedCustomer","isAdminLoggin","console","handleFetchCustomer","showConfirm","newSelectedCustomer","customer","String","user_to_login","ExclamationCircleOutlined","cancelText","okText","onOk","location","onCancel","handleSelectCustomer","currentCustomer","addresses","latest_order_at","Content","renderHeader","chrismas","tet","HeaderTet","charSet","Footer","links","HomeOutlined","label","AppstoreOutlined","ThunderboltOutlined","SearchOutlined","UserOutlined","BottomNavigator","link","showBottomNavigator","showBackButton","backButtonTitle","backButtonLink","pageTitle","hideCart","Mobile","BasicLayout","LayoutComponent","useAppLayout","MobileBasicLayout","DesktopBasicLayout","MobileHeader","transparent","hasMounted","useHasMounted","isHomePage","renderTitle","position","back","showZero","MoreDropdown","menuPaths","path","arrow","caculateMetaDataByVariantId","_variantPrice","campaignType","gifts","giftSelectionItemGroups","isMultipleRequirements","isRequirementHasMultipleConditions","conditionCount","isSelectionGift","isGiftHasMultipleGroups","isGiftHasMultipleItems","giftSelectionItems","isRequiredMultipleVariants","isMultipleGifts","Boolean","getCampaignType","currentCondition","giftConditionItems","condition","variantPrice","netPrice","caculateWithAnyVariants","caculateForEachVariants","keyFactory","isRequireQuantity","quantityThresholdOrRevenueThresholdKey","quantityOrRevenueKey","totalQuantityThresholdOrRevenueThresholdKey","revenueThreshold","currentProgressData","currentValue","requirementThreshold","currentQuantity","requirementRevenueThreshold","quantityRemaining","quantityThreshold","Math","round","validQuantityRemaining","giftCondition","progress","toFixed","quantityRemainingText","requirement","floor","getPropratedPriceByVariantId","giftConditionItem","propratedPrice","getUniqueCampaignIdsFromProducts","forEach","concat","defaultVariant","ids","isVariantOrderItem","isOrderItemCampaign","firePurchaseEvent","checkout","checkoutWithInternalDispatch","dataLayer","ecommerce","el","transaction_id","total","currency","items","item_id","item_name","item_variant","price","fireExportGiftEvent","fireAddToCartEvent","addFrom","add_to_cart_from","fireVisitDiscountsEvent","visitDiscountsFrom","fireVisitCampaignsEvent","visitCampaignsFrom","fireFilterEvent","filterValuesName","filterFrom","filterValues","searchFrom","search_term","search_from","fireClickBannerEvent","banner_url","banner_position","fireVisitProductsEvent","from","visit_products_from","fireClickProductsCarouselEvent","carouselType","carousel_type","fireDisallowNotificationEvent","userName","by_user","fireViewItemEvent","fireViewItemListEvent","getFilterValuesName","brands","colors","attributes","categoryNames","brandNames","colorNames","attributeNames","categoryFilterValues","categoryIds","brandFilterValues","brandIds","colorFilterValues","optionValueIds","attributeFilterValues","flatCategories","flattenCategory","color","attr","SM","breakpoint","isMatchMedia","matchMedia","matches","getGiftItemNumber","selectedGifts","selectedGift","selectedGiftItems","getGiftsFromCampaign","applied","canCheckOutRewards","totalRewardsInCart","remainingRewardTimesInCart","selectedGiftsInCart","campaignId","remainingRewardTimes","importableSameOrder","gift","isAccumulated","selectedGiftInCart","selected","giftSelection","noSelectionGifts","noSelection","getGiftsDataGiftCampaigns","giftCampaigns","flow","getGiftsDataNoncombinableCampaigns","noncombinableCampaigns","allGifts","group","giftCampaignGroups","giftsFromNoncombinableGroups","isEmpty","getPrioritizedCampaignId","firstGiftCampaignId","firstLevelableCampaignId","firstNoncombinableCampaignId","generateDummyGroupItem","groupId","currSelectedGifts","allSelectedGifts","generateId","receivedGift","isNoncombinable","giftItemNumber","groupOrderItemsByPrioritizedCampaignId","campaignGroupIdMap","Map","levelableGiftCampaigns","noncombinableGiftCampaigns","set","getPrioritizedIdMap","orderItemObj","noGroupItem","prioritizedId","has","dummyGroupItem","result","isImportableSameOrder","every","cam","routeMap","accumulateVariantValue","optionValuesArray","mapVariantToProduct","vatPrice","discounts","availableArr","unavailableArr","module","exports"],"sourceRoot":""}